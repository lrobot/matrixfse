#!/usr/bin/env python

#
# Generated Wed Apr 15 20:04:09 2009 by generateDS.py.
#

import sys
import getopt
from string import lower as str_lower
from xml.dom import minidom
from xml.dom import Node

#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Support/utility functions.
#

def showIndent(outfile, level):
    for idx in range(level):
        outfile.write('    ')

def quote_xml(inStr):
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1

def quote_attrib(inStr):
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1

def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace):
        if self.category == MixedContainer.CategoryText:
            outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(outfile, level, namespace,name)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (self.name, self.value, self.name))
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write('MixedContainer(%d, %d, "%s", "%s"),\n' % \
                (self.category, self.content_type, self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write('MixedContainer(%d, %d, "%s", "%s"),\n' % \
                (self.category, self.content_type, self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write('MixedContainer(%d, %d, "%s",\n' % \
                (self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class _MemberSpec(object):
    def __init__(self, name='', data_type='', container=0):
        self.name = name
        self.data_type = data_type
        self.container = container
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type(self): return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container


#
# Data representation classes.
#

class svgType(object):
    subclass = None
    superclass = None
    def __init__(self, onmousedown=None, requiredExtensions=None, onerror=None, onfocusout=None, height=None, onscroll=None, contentStyleType=None, style_attr=None, onresize=None, id=None, onabort=None, onload=None, space=None, onzoom=None, viewBox=None, width=None, onmouseup=None, onmousemove=None, onactivate=None, onfocusin=None, onclick=None, onmouseout=None, systemLanguage=None, onmouseover=None, externalResourcesRequired=None, zoomAndPan='magnify', classxx=None, lang=None, onunload=None, requiredFeatures=None, base=None, y=None, x=None, preserveAspectRatio=None, contentScriptType=None):
        self.internalName = "svg"
        self.onmousedown = onmousedown
        self.requiredExtensions = requiredExtensions
        self.onerror = onerror
        self.onfocusout = onfocusout
        self.height = height
        self.onscroll = onscroll
        self.contentStyleType = contentStyleType
        self.style_attr = style_attr
        self.onresize = onresize
        self.id = id
        self.onabort = onabort
        self.onload = onload
        self.space = space
        self.onzoom = onzoom
        self.viewBox = viewBox
        self.width = width
        self.onmouseup = onmouseup
        self.onmousemove = onmousemove
        self.onactivate = onactivate
        self.onfocusin = onfocusin
        self.onclick = onclick
        self.onmouseout = onmouseout
        self.systemLanguage = systemLanguage
        self.onmouseover = onmouseover
        self.externalResourcesRequired = externalResourcesRequired
        self.zoomAndPan = zoomAndPan
        self.classxx = classxx
        self.lang = lang
        self.onunload = onunload
        self.requiredFeatures = requiredFeatures
        self.base = base
        self.y = y
        self.x = x
        self.preserveAspectRatio = preserveAspectRatio
        self.contentScriptType = contentScriptType
        self.internalElements = []
    def factory(*args_, **kwargs_):
        if svgType.subclass:
            return svgType.subclass(*args_, **kwargs_)
        else:
            return svgType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def addElement(self, value): self.internalElements.append(value)
    def validate_textType(self, value):
        # validate type textType
        pass
    def validate_svgType(self, value):
        # validate type svgType
        pass
    def validate_viewType(self, value):
        # validate type viewType
        pass
    def validate_markerType(self, value):
        # validate type markerType
        pass
    def validate_clipPathType(self, value):
        # validate type clipPathType
        pass
    def validate_maskType(self, value):
        # validate type maskType
        pass
    def validate_linearGradientType(self, value):
        # validate type linearGradientType
        pass
    def validate_radialGradientType(self, value):
        # validate type radialGradientType
        pass
    def validate_patternType(self, value):
        # validate type patternType
        pass
    def validate_filterType(self, value):
        # validate type filterType
        pass
    def validate_animateTransformType(self, value):
        # validate type animateTransformType
        pass
    def get_onmousedown(self): return self.onmousedown
    def set_onmousedown(self, onmousedown): self.onmousedown = onmousedown
    def get_requiredExtensions(self): return self.requiredExtensions
    def set_requiredExtensions(self, requiredExtensions): self.requiredExtensions = requiredExtensions
    def get_onerror(self): return self.onerror
    def set_onerror(self, onerror): self.onerror = onerror
    def get_onfocusout(self): return self.onfocusout
    def set_onfocusout(self, onfocusout): self.onfocusout = onfocusout
    def get_height(self): return self.height
    def set_height(self, height): self.height = height
    def get_onscroll(self): return self.onscroll
    def set_onscroll(self, onscroll): self.onscroll = onscroll
    def get_contentStyleType(self): return self.contentStyleType
    def set_contentStyleType(self, contentStyleType): self.contentStyleType = contentStyleType
    def get_style_attr(self): return self.style_attr
    def set_style_attr(self, style_attr): self.style_attr = style_attr
    def get_onresize(self): return self.onresize
    def set_onresize(self, onresize): self.onresize = onresize
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_onabort(self): return self.onabort
    def set_onabort(self, onabort): self.onabort = onabort
    def get_onload(self): return self.onload
    def set_onload(self, onload): self.onload = onload
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_onzoom(self): return self.onzoom
    def set_onzoom(self, onzoom): self.onzoom = onzoom
    def get_viewBox(self): return self.viewBox
    def set_viewBox(self, viewBox): self.viewBox = viewBox
    def get_width(self): return self.width
    def set_width(self, width): self.width = width
    def get_onmouseup(self): return self.onmouseup
    def set_onmouseup(self, onmouseup): self.onmouseup = onmouseup
    def get_onmousemove(self): return self.onmousemove
    def set_onmousemove(self, onmousemove): self.onmousemove = onmousemove
    def get_onactivate(self): return self.onactivate
    def set_onactivate(self, onactivate): self.onactivate = onactivate
    def get_onfocusin(self): return self.onfocusin
    def set_onfocusin(self, onfocusin): self.onfocusin = onfocusin
    def get_onclick(self): return self.onclick
    def set_onclick(self, onclick): self.onclick = onclick
    def get_onmouseout(self): return self.onmouseout
    def set_onmouseout(self, onmouseout): self.onmouseout = onmouseout
    def get_systemLanguage(self): return self.systemLanguage
    def set_systemLanguage(self, systemLanguage): self.systemLanguage = systemLanguage
    def get_onmouseover(self): return self.onmouseover
    def set_onmouseover(self, onmouseover): self.onmouseover = onmouseover
    def get_externalResourcesRequired(self): return self.externalResourcesRequired
    def set_externalResourcesRequired(self, externalResourcesRequired): self.externalResourcesRequired = externalResourcesRequired
    def get_zoomAndPan(self): return self.zoomAndPan
    def set_zoomAndPan(self, zoomAndPan): self.zoomAndPan = zoomAndPan
    def get_class(self): return self.classxx
    def set_class(self, classxx): self.classxx = classxx
    def get_lang(self): return self.lang
    def set_lang(self, lang): self.lang = lang
    def get_onunload(self): return self.onunload
    def set_onunload(self, onunload): self.onunload = onunload
    def get_requiredFeatures(self): return self.requiredFeatures
    def set_requiredFeatures(self, requiredFeatures): self.requiredFeatures = requiredFeatures
    def get_base(self): return self.base
    def set_base(self, base): self.base = base
    def get_y(self): return self.y
    def set_y(self, y): self.y = y
    def get_x(self): return self.x
    def set_x(self, x): self.x = x
    def get_preserveAspectRatio(self): return self.preserveAspectRatio
    def set_preserveAspectRatio(self, preserveAspectRatio): self.preserveAspectRatio = preserveAspectRatio
    def get_contentScriptType(self): return self.contentScriptType
    def set_contentScriptType(self, contentScriptType): self.contentScriptType = contentScriptType
    def export(self, outfile, level, namespace_='svg:', name_='svgType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, self.internalName, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='svgType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, self.internalName))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='svg:', name_='svgType'):
        if self.onmousedown is not None:
            outfile.write(' onmousedown=%s' % (quote_attrib(self.onmousedown), ))
        if self.requiredExtensions is not None:
            outfile.write(' requiredExtensions=%s' % (quote_attrib(self.requiredExtensions), ))
        if self.onerror is not None:
            outfile.write(' onerror=%s' % (quote_attrib(self.onerror), ))
        if self.onfocusout is not None:
            outfile.write(' onfocusout=%s' % (quote_attrib(self.onfocusout), ))
        outfile.write(' height=%s' % (quote_attrib(self.height), ))
        if self.onscroll is not None:
            outfile.write(' onscroll=%s' % (quote_attrib(self.onscroll), ))
        if self.contentStyleType is not None:
            outfile.write(' contentStyleType=%s' % (quote_attrib(self.contentStyleType), ))
        if self.style_attr is not None:
            outfile.write(' style_attr=%s' % (quote_attrib(self.style_attr), ))
        if self.onresize is not None:
            outfile.write(' onresize=%s' % (quote_attrib(self.onresize), ))
        if self.id is not None:
            outfile.write(' id=%s' % (quote_attrib(self.id), ))
        if self.onabort is not None:
            outfile.write(' onabort=%s' % (quote_attrib(self.onabort), ))
        if self.onload is not None:
            outfile.write(' onload=%s' % (quote_attrib(self.onload), ))
        if self.space is not None:
            outfile.write(' space=%s' % (quote_attrib(self.space), ))
        if self.onzoom is not None:
            outfile.write(' onzoom=%s' % (quote_attrib(self.onzoom), ))
        if self.viewBox is not None:
            outfile.write(' viewBox=%s' % (quote_attrib(self.viewBox), ))
        outfile.write(' width=%s' % (quote_attrib(self.width), ))
        if self.onmouseup is not None:
            outfile.write(' onmouseup=%s' % (quote_attrib(self.onmouseup), ))
        if self.onmousemove is not None:
            outfile.write(' onmousemove=%s' % (quote_attrib(self.onmousemove), ))
        if self.onactivate is not None:
            outfile.write(' onactivate=%s' % (quote_attrib(self.onactivate), ))
        if self.onfocusin is not None:
            outfile.write(' onfocusin=%s' % (quote_attrib(self.onfocusin), ))
        if self.onclick is not None:
            outfile.write(' onclick=%s' % (quote_attrib(self.onclick), ))
        if self.onmouseout is not None:
            outfile.write(' onmouseout=%s' % (quote_attrib(self.onmouseout), ))
        if self.systemLanguage is not None:
            outfile.write(' systemLanguage=%s' % (quote_attrib(self.systemLanguage), ))
        if self.onmouseover is not None:
            outfile.write(' onmouseover=%s' % (quote_attrib(self.onmouseover), ))
        if self.externalResourcesRequired is not None:
            outfile.write(' externalResourcesRequired="%s"' % str_lower(str(self.externalResourcesRequired)))
        if self.zoomAndPan is not None:
            outfile.write(' zoomAndPan=%s' % (quote_attrib(self.zoomAndPan), ))
        if self.classxx is not None:
            outfile.write(' class=%s' % (quote_attrib(self.classxx), ))
        if self.lang is not None:
            outfile.write(' lang=%s' % (quote_attrib(self.lang), ))
        if self.onunload is not None:
            outfile.write(' onunload=%s' % (quote_attrib(self.onunload), ))
        if self.requiredFeatures is not None:
            outfile.write(' requiredFeatures=%s' % (quote_attrib(self.requiredFeatures), ))
        if self.base is not None:
            outfile.write(' base=%s' % (quote_attrib(self.base), ))
        if self.y is not None:
            outfile.write(' y=%s' % (quote_attrib(self.y), ))
        if self.x is not None:
            outfile.write(' x=%s' % (quote_attrib(self.x), ))
        if self.preserveAspectRatio is not None:
            outfile.write(' preserveAspectRatio=%s' % (quote_attrib(self.preserveAspectRatio), ))
        if self.contentScriptType is not None:
            outfile.write(' contentScriptType=%s' % (quote_attrib(self.contentScriptType), ))
    def exportChildren(self, outfile, level, namespace_='svg:', name_='svgType'):
        for element_ in self.internalElements:
            element_.export(outfile, level, namespace_, name_='desc')
    def hasContent_(self):
        if (
         len(self.internalElements)>0
            ):
            return True
        else:
            return False
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('onmousedown'):
            self.onmousedown = attrs.get('onmousedown').value
        if attrs.get('requiredExtensions'):
            self.requiredExtensions = attrs.get('requiredExtensions').value
        if attrs.get('onerror'):
            self.onerror = attrs.get('onerror').value
        if attrs.get('onfocusout'):
            self.onfocusout = attrs.get('onfocusout').value
        if attrs.get('height'):
            self.height = attrs.get('height').value
        if attrs.get('onscroll'):
            self.onscroll = attrs.get('onscroll').value
        if attrs.get('contentStyleType'):
            self.contentStyleType = attrs.get('contentStyleType').value
        if attrs.get('style_attr'):
            self.style_attr = attrs.get('style_attr').value
        if attrs.get('onresize'):
            self.onresize = attrs.get('onresize').value
        if attrs.get('id'):
            self.id = attrs.get('id').value
        if attrs.get('onabort'):
            self.onabort = attrs.get('onabort').value
        if attrs.get('onload'):
            self.onload = attrs.get('onload').value
        if attrs.get('space'):
            self.space = attrs.get('space').value
        if attrs.get('onzoom'):
            self.onzoom = attrs.get('onzoom').value
        if attrs.get('viewBox'):
            self.viewBox = attrs.get('viewBox').value
        if attrs.get('width'):
            self.width = attrs.get('width').value
        if attrs.get('onmouseup'):
            self.onmouseup = attrs.get('onmouseup').value
        if attrs.get('onmousemove'):
            self.onmousemove = attrs.get('onmousemove').value
        if attrs.get('onactivate'):
            self.onactivate = attrs.get('onactivate').value
        if attrs.get('onfocusin'):
            self.onfocusin = attrs.get('onfocusin').value
        if attrs.get('onclick'):
            self.onclick = attrs.get('onclick').value
        if attrs.get('onmouseout'):
            self.onmouseout = attrs.get('onmouseout').value
        if attrs.get('systemLanguage'):
            self.systemLanguage = attrs.get('systemLanguage').value
        if attrs.get('onmouseover'):
            self.onmouseover = attrs.get('onmouseover').value
        if attrs.get('externalResourcesRequired'):
            if attrs.get('externalResourcesRequired').value in ('true', '1'):
                self.externalResourcesRequired = True
            elif attrs.get('externalResourcesRequired').value in ('false', '0'):
                self.externalResourcesRequired = False
            else:
                raise ValueError('Bad boolean attribute (externalResourcesRequired)')
        if attrs.get('zoomAndPan'):
            self.zoomAndPan = attrs.get('zoomAndPan').value
        if attrs.get('class'):
            self.classxx = attrs.get('class').value
        if attrs.get('lang'):
            self.lang = attrs.get('lang').value
        if attrs.get('onunload'):
            self.onunload = attrs.get('onunload').value
        if attrs.get('requiredFeatures'):
            self.requiredFeatures = attrs.get('requiredFeatures').value
        if attrs.get('base'):
            self.base = attrs.get('base').value
        if attrs.get('y'):
            self.y = attrs.get('y').value
        if attrs.get('x'):
            self.x = attrs.get('x').value
        if attrs.get('preserveAspectRatio'):
            self.preserveAspectRatio = attrs.get('preserveAspectRatio').value
        if attrs.get('contentScriptType'):
            self.contentScriptType = attrs.get('contentScriptType').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'desc':
            obj_ = descType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'title':
            obj_ = titleType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'metadata':
            obj_ = metadataType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'defs':
            obj_ = defsType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'path':
            obj_ = pathType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'text':
            obj_ = textType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_textType(obj_)    # validate type textType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'rect':
            obj_ = rectType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'circle':
            obj_ = circleType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'ellipse':
            obj_ = ellipseType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'line':
            obj_ = lineType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'polyline':
            obj_ = polylineType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'polygon':
            obj_ = polygonType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'use':
            obj_ = useType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'image':
            obj_ = imageType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'svg':
            obj_ = svgType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_svgType(obj_)    # validate type svgType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'g':
            obj_ = gType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'view':
            obj_ = viewType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_viewType(obj_)    # validate type viewType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'switch':
            obj_ = switchType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'a':
            obj_ = aType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'altGlyphDef':
            obj_ = altGlyphDefType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'script':
            obj_ = scriptType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'style':
            obj_ = styleType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'symbol':
            obj_ = symbolType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'marker':
            obj_ = markerType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_markerType(obj_)    # validate type markerType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'clipPath':
            obj_ = clipPathType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_clipPathType(obj_)    # validate type clipPathType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'mask':
            obj_ = maskType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_maskType(obj_)    # validate type maskType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'linearGradient':
            obj_ = linearGradientType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_linearGradientType(obj_)    # validate type linearGradientType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'radialGradient':
            obj_ = radialGradientType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_radialGradientType(obj_)    # validate type radialGradientType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'pattern':
            obj_ = patternType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_patternType(obj_)    # validate type patternType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'filter':
            obj_ = filterType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_filterType(obj_)    # validate type filterType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'cursor':
            obj_ = cursorType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'font':
            obj_ = fontType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animate':
            obj_ = animateType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'set':
            obj_ = setType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animateMotion':
            obj_ = animateMotionType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animateColor':
            obj_ = animateColorType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animateTransform':
            obj_ = animateTransformType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_animateTransformType(obj_)    # validate type animateTransformType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'color-profile':
            obj_ = color_profile.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'font-face':
            obj_ = font_face.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
# end class svgType


class gType(object):
    subclass = None
    superclass = None
    def __init__(self, requiredExtensions=None, onfocusout=None, onmousedown=None, id=None, onload=None, space=None, transform=None, onmousemove=None, onclick=None, onfocusin=None, onmouseup=None, onmouseout=None, systemLanguage=None, onmouseover=None, externalResourcesRequired=None, classxx=None, lang=None, onactivate=None, requiredFeatures=None, base=None, style_attr=None):
        self.internalName = "g"
        self.requiredExtensions = requiredExtensions
        self.onfocusout = onfocusout
        self.onmousedown = onmousedown
        self.id = id
        self.onload = onload
        self.space = space
        self.transform = transform
        self.onmousemove = onmousemove
        self.onclick = onclick
        self.onfocusin = onfocusin
        self.onmouseup = onmouseup
        self.onmouseout = onmouseout
        self.systemLanguage = systemLanguage
        self.onmouseover = onmouseover
        self.externalResourcesRequired = externalResourcesRequired
        self.classxx = classxx
        self.lang = lang
        self.onactivate = onactivate
        self.requiredFeatures = requiredFeatures
        self.base = base
        self.style_attr = style_attr
        self.internalElements = []
    def factory(*args_, **kwargs_):
        if gType.subclass:
            return gType.subclass(*args_, **kwargs_)
        else:
            return gType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def addElement(self, value): self.internalElements.append(value)
    def validate_textType(self, value):
        # validate type textType
        pass
    def validate_svgType(self, value):
        # validate type svgType
        pass
    def validate_viewType(self, value):
        # validate type viewType
        pass
    def validate_markerType(self, value):
        # validate type markerType
        pass
    def validate_clipPathType(self, value):
        # validate type clipPathType
        pass
    def validate_maskType(self, value):
        # validate type maskType
        pass
    def validate_linearGradientType(self, value):
        # validate type linearGradientType
        pass
    def validate_radialGradientType(self, value):
        # validate type radialGradientType
        pass
    def validate_patternType(self, value):
        # validate type patternType
        pass
    def validate_filterType(self, value):
        # validate type filterType
        pass
    def validate_animateTransformType(self, value):
        # validate type animateTransformType
        pass
    def get_requiredExtensions(self): return self.requiredExtensions
    def set_requiredExtensions(self, requiredExtensions): self.requiredExtensions = requiredExtensions
    def get_onfocusout(self): return self.onfocusout
    def set_onfocusout(self, onfocusout): self.onfocusout = onfocusout
    def get_onmousedown(self): return self.onmousedown
    def set_onmousedown(self, onmousedown): self.onmousedown = onmousedown
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_onload(self): return self.onload
    def set_onload(self, onload): self.onload = onload
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_transform(self): return self.transform
    def set_transform(self, transform): self.transform = transform
    def get_onmousemove(self): return self.onmousemove
    def set_onmousemove(self, onmousemove): self.onmousemove = onmousemove
    def get_onclick(self): return self.onclick
    def set_onclick(self, onclick): self.onclick = onclick
    def get_onfocusin(self): return self.onfocusin
    def set_onfocusin(self, onfocusin): self.onfocusin = onfocusin
    def get_onmouseup(self): return self.onmouseup
    def set_onmouseup(self, onmouseup): self.onmouseup = onmouseup
    def get_onmouseout(self): return self.onmouseout
    def set_onmouseout(self, onmouseout): self.onmouseout = onmouseout
    def get_systemLanguage(self): return self.systemLanguage
    def set_systemLanguage(self, systemLanguage): self.systemLanguage = systemLanguage
    def get_onmouseover(self): return self.onmouseover
    def set_onmouseover(self, onmouseover): self.onmouseover = onmouseover
    def get_externalResourcesRequired(self): return self.externalResourcesRequired
    def set_externalResourcesRequired(self, externalResourcesRequired): self.externalResourcesRequired = externalResourcesRequired
    def get_class(self): return self.classxx
    def set_class(self, classxx): self.classxx = classxx
    def get_lang(self): return self.lang
    def set_lang(self, lang): self.lang = lang
    def get_onactivate(self): return self.onactivate
    def set_onactivate(self, onactivate): self.onactivate = onactivate
    def get_requiredFeatures(self): return self.requiredFeatures
    def set_requiredFeatures(self, requiredFeatures): self.requiredFeatures = requiredFeatures
    def get_base(self): return self.base
    def set_base(self, base): self.base = base
    def get_style_attr(self): return self.style_attr
    def set_style_attr(self, style_attr): self.style_attr = style_attr
    def export(self, outfile, level, namespace_='svg:', name_='gType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, self.internalName, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='gType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, self.internalName))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='svg:', name_='gType'):
        if self.requiredExtensions is not None:
            outfile.write(' requiredExtensions=%s' % (quote_attrib(self.requiredExtensions), ))
        if self.onfocusout is not None:
            outfile.write(' onfocusout=%s' % (quote_attrib(self.onfocusout), ))
        if self.onmousedown is not None:
            outfile.write(' onmousedown=%s' % (quote_attrib(self.onmousedown), ))
        if self.id is not None:
            outfile.write(' id=%s' % (quote_attrib(self.id), ))
        if self.onload is not None:
            outfile.write(' onload=%s' % (quote_attrib(self.onload), ))
        if self.space is not None:
            outfile.write(' space=%s' % (quote_attrib(self.space), ))
        if self.transform is not None:
            outfile.write(' transform=%s' % (quote_attrib(self.transform), ))
        if self.onmousemove is not None:
            outfile.write(' onmousemove=%s' % (quote_attrib(self.onmousemove), ))
        if self.onclick is not None:
            outfile.write(' onclick=%s' % (quote_attrib(self.onclick), ))
        if self.onfocusin is not None:
            outfile.write(' onfocusin=%s' % (quote_attrib(self.onfocusin), ))
        if self.onmouseup is not None:
            outfile.write(' onmouseup=%s' % (quote_attrib(self.onmouseup), ))
        if self.onmouseout is not None:
            outfile.write(' onmouseout=%s' % (quote_attrib(self.onmouseout), ))
        if self.systemLanguage is not None:
            outfile.write(' systemLanguage=%s' % (quote_attrib(self.systemLanguage), ))
        if self.onmouseover is not None:
            outfile.write(' onmouseover=%s' % (quote_attrib(self.onmouseover), ))
        if self.externalResourcesRequired is not None:
            outfile.write(' externalResourcesRequired="%s"' % str_lower(str(self.externalResourcesRequired)))
        if self.classxx is not None:
            outfile.write(' class=%s' % (quote_attrib(self.classxx), ))
        if self.lang is not None:
            outfile.write(' lang=%s' % (quote_attrib(self.lang), ))
        if self.onactivate is not None:
            outfile.write(' onactivate=%s' % (quote_attrib(self.onactivate), ))
        if self.requiredFeatures is not None:
            outfile.write(' requiredFeatures=%s' % (quote_attrib(self.requiredFeatures), ))
        if self.base is not None:
            outfile.write(' base=%s' % (quote_attrib(self.base), ))
        if self.style_attr is not None:
            outfile.write(' style_attr=%s' % (quote_attrib(self.style_attr), ))
    def exportChildren(self, outfile, level, namespace_='svg:', name_='gType'):
        for element_ in self.internalElements:
            element_.export(outfile, level, namespace_, name_='desc')
    def hasContent_(self):
        if (
         len(self.internalElements)>0
            ):
            return True
        else:
            return False
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('requiredExtensions'):
            self.requiredExtensions = attrs.get('requiredExtensions').value
        if attrs.get('onfocusout'):
            self.onfocusout = attrs.get('onfocusout').value
        if attrs.get('onmousedown'):
            self.onmousedown = attrs.get('onmousedown').value
        if attrs.get('id'):
            self.id = attrs.get('id').value
        if attrs.get('onload'):
            self.onload = attrs.get('onload').value
        if attrs.get('space'):
            self.space = attrs.get('space').value
        if attrs.get('transform'):
            self.transform = attrs.get('transform').value
        if attrs.get('onmousemove'):
            self.onmousemove = attrs.get('onmousemove').value
        if attrs.get('onclick'):
            self.onclick = attrs.get('onclick').value
        if attrs.get('onfocusin'):
            self.onfocusin = attrs.get('onfocusin').value
        if attrs.get('onmouseup'):
            self.onmouseup = attrs.get('onmouseup').value
        if attrs.get('onmouseout'):
            self.onmouseout = attrs.get('onmouseout').value
        if attrs.get('systemLanguage'):
            self.systemLanguage = attrs.get('systemLanguage').value
        if attrs.get('onmouseover'):
            self.onmouseover = attrs.get('onmouseover').value
        if attrs.get('externalResourcesRequired'):
            if attrs.get('externalResourcesRequired').value in ('true', '1'):
                self.externalResourcesRequired = True
            elif attrs.get('externalResourcesRequired').value in ('false', '0'):
                self.externalResourcesRequired = False
            else:
                raise ValueError('Bad boolean attribute (externalResourcesRequired)')
        if attrs.get('class'):
            self.classxx = attrs.get('class').value
        if attrs.get('lang'):
            self.lang = attrs.get('lang').value
        if attrs.get('onactivate'):
            self.onactivate = attrs.get('onactivate').value
        if attrs.get('requiredFeatures'):
            self.requiredFeatures = attrs.get('requiredFeatures').value
        if attrs.get('base'):
            self.base = attrs.get('base').value
        if attrs.get('style_attr'):
            self.style_attr = attrs.get('style_attr').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'desc':
            obj_ = descType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'title':
            obj_ = titleType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'metadata':
            obj_ = metadataType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'defs':
            obj_ = defsType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'path':
            obj_ = pathType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'text':
            obj_ = textType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_textType(obj_)    # validate type textType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'rect':
            obj_ = rectType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'circle':
            obj_ = circleType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'ellipse':
            obj_ = ellipseType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'line':
            obj_ = lineType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'polyline':
            obj_ = polylineType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'polygon':
            obj_ = polygonType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'use':
            obj_ = useType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'image':
            obj_ = imageType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'svg':
            obj_ = svgType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_svgType(obj_)    # validate type svgType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'g':
            obj_ = gType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'view':
            obj_ = viewType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_viewType(obj_)    # validate type viewType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'switch':
            obj_ = switchType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'a':
            obj_ = aType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'altGlyphDef':
            obj_ = altGlyphDefType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'script':
            obj_ = scriptType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'style':
            obj_ = styleType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'symbol':
            obj_ = symbolType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'marker':
            obj_ = markerType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_markerType(obj_)    # validate type markerType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'clipPath':
            obj_ = clipPathType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_clipPathType(obj_)    # validate type clipPathType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'mask':
            obj_ = maskType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_maskType(obj_)    # validate type maskType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'linearGradient':
            obj_ = linearGradientType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_linearGradientType(obj_)    # validate type linearGradientType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'radialGradient':
            obj_ = radialGradientType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_radialGradientType(obj_)    # validate type radialGradientType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'pattern':
            obj_ = patternType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_patternType(obj_)    # validate type patternType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'filter':
            obj_ = filterType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_filterType(obj_)    # validate type filterType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'cursor':
            obj_ = cursorType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'font':
            obj_ = fontType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animate':
            obj_ = animateType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'set':
            obj_ = setType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animateMotion':
            obj_ = animateMotionType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animateColor':
            obj_ = animateColorType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animateTransform':
            obj_ = animateTransformType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_animateTransformType(obj_)    # validate type animateTransformType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'color-profile':
            obj_ = color_profile.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'font-face':
            obj_ = font_face.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
# end class gType


class defsType(object):
    subclass = None
    superclass = None
    def __init__(self, requiredExtensions=None, onfocusout=None, onmousedown=None, id=None, onload=None, space=None, transform=None, onmousemove=None, onclick=None, onfocusin=None, onmouseup=None, onmouseout=None, systemLanguage=None, onmouseover=None, externalResourcesRequired=None, classxx=None, lang=None, onactivate=None, requiredFeatures=None, base=None, style_attr=None):
        self.internalName = "defs"
        self.requiredExtensions = requiredExtensions
        self.onfocusout = onfocusout
        self.onmousedown = onmousedown
        self.id = id
        self.onload = onload
        self.space = space
        self.transform = transform
        self.onmousemove = onmousemove
        self.onclick = onclick
        self.onfocusin = onfocusin
        self.onmouseup = onmouseup
        self.onmouseout = onmouseout
        self.systemLanguage = systemLanguage
        self.onmouseover = onmouseover
        self.externalResourcesRequired = externalResourcesRequired
        self.classxx = classxx
        self.lang = lang
        self.onactivate = onactivate
        self.requiredFeatures = requiredFeatures
        self.base = base
        self.style_attr = style_attr
        self.internalElements = []
    def factory(*args_, **kwargs_):
        if defsType.subclass:
            return defsType.subclass(*args_, **kwargs_)
        else:
            return defsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def addElement(self, value): self.internalElements.append(value)
    def validate_textType(self, value):
        # validate type textType
        pass
    def validate_svgType(self, value):
        # validate type svgType
        pass
    def validate_viewType(self, value):
        # validate type viewType
        pass
    def validate_markerType(self, value):
        # validate type markerType
        pass
    def validate_clipPathType(self, value):
        # validate type clipPathType
        pass
    def validate_maskType(self, value):
        # validate type maskType
        pass
    def validate_linearGradientType(self, value):
        # validate type linearGradientType
        pass
    def validate_radialGradientType(self, value):
        # validate type radialGradientType
        pass
    def validate_patternType(self, value):
        # validate type patternType
        pass
    def validate_filterType(self, value):
        # validate type filterType
        pass
    def validate_animateTransformType(self, value):
        # validate type animateTransformType
        pass
    def get_requiredExtensions(self): return self.requiredExtensions
    def set_requiredExtensions(self, requiredExtensions): self.requiredExtensions = requiredExtensions
    def get_onfocusout(self): return self.onfocusout
    def set_onfocusout(self, onfocusout): self.onfocusout = onfocusout
    def get_onmousedown(self): return self.onmousedown
    def set_onmousedown(self, onmousedown): self.onmousedown = onmousedown
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_onload(self): return self.onload
    def set_onload(self, onload): self.onload = onload
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_transform(self): return self.transform
    def set_transform(self, transform): self.transform = transform
    def get_onmousemove(self): return self.onmousemove
    def set_onmousemove(self, onmousemove): self.onmousemove = onmousemove
    def get_onclick(self): return self.onclick
    def set_onclick(self, onclick): self.onclick = onclick
    def get_onfocusin(self): return self.onfocusin
    def set_onfocusin(self, onfocusin): self.onfocusin = onfocusin
    def get_onmouseup(self): return self.onmouseup
    def set_onmouseup(self, onmouseup): self.onmouseup = onmouseup
    def get_onmouseout(self): return self.onmouseout
    def set_onmouseout(self, onmouseout): self.onmouseout = onmouseout
    def get_systemLanguage(self): return self.systemLanguage
    def set_systemLanguage(self, systemLanguage): self.systemLanguage = systemLanguage
    def get_onmouseover(self): return self.onmouseover
    def set_onmouseover(self, onmouseover): self.onmouseover = onmouseover
    def get_externalResourcesRequired(self): return self.externalResourcesRequired
    def set_externalResourcesRequired(self, externalResourcesRequired): self.externalResourcesRequired = externalResourcesRequired
    def get_class(self): return self.classxx
    def set_class(self, classxx): self.classxx = classxx
    def get_lang(self): return self.lang
    def set_lang(self, lang): self.lang = lang
    def get_onactivate(self): return self.onactivate
    def set_onactivate(self, onactivate): self.onactivate = onactivate
    def get_requiredFeatures(self): return self.requiredFeatures
    def set_requiredFeatures(self, requiredFeatures): self.requiredFeatures = requiredFeatures
    def get_base(self): return self.base
    def set_base(self, base): self.base = base
    def get_style_attr(self): return self.style_attr
    def set_style_attr(self, style_attr): self.style_attr = style_attr
    def export(self, outfile, level, namespace_='svg:', name_='defsType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, self.internalName, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='defsType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, self.internalName))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='svg:', name_='defsType'):
        if self.requiredExtensions is not None:
            outfile.write(' requiredExtensions=%s' % (quote_attrib(self.requiredExtensions), ))
        if self.onfocusout is not None:
            outfile.write(' onfocusout=%s' % (quote_attrib(self.onfocusout), ))
        if self.onmousedown is not None:
            outfile.write(' onmousedown=%s' % (quote_attrib(self.onmousedown), ))
        if self.id is not None:
            outfile.write(' id=%s' % (quote_attrib(self.id), ))
        if self.onload is not None:
            outfile.write(' onload=%s' % (quote_attrib(self.onload), ))
        if self.space is not None:
            outfile.write(' space=%s' % (quote_attrib(self.space), ))
        if self.transform is not None:
            outfile.write(' transform=%s' % (quote_attrib(self.transform), ))
        if self.onmousemove is not None:
            outfile.write(' onmousemove=%s' % (quote_attrib(self.onmousemove), ))
        if self.onclick is not None:
            outfile.write(' onclick=%s' % (quote_attrib(self.onclick), ))
        if self.onfocusin is not None:
            outfile.write(' onfocusin=%s' % (quote_attrib(self.onfocusin), ))
        if self.onmouseup is not None:
            outfile.write(' onmouseup=%s' % (quote_attrib(self.onmouseup), ))
        if self.onmouseout is not None:
            outfile.write(' onmouseout=%s' % (quote_attrib(self.onmouseout), ))
        if self.systemLanguage is not None:
            outfile.write(' systemLanguage=%s' % (quote_attrib(self.systemLanguage), ))
        if self.onmouseover is not None:
            outfile.write(' onmouseover=%s' % (quote_attrib(self.onmouseover), ))
        if self.externalResourcesRequired is not None:
            outfile.write(' externalResourcesRequired="%s"' % str_lower(str(self.externalResourcesRequired)))
        if self.classxx is not None:
            outfile.write(' class=%s' % (quote_attrib(self.classxx), ))
        if self.lang is not None:
            outfile.write(' lang=%s' % (quote_attrib(self.lang), ))
        if self.onactivate is not None:
            outfile.write(' onactivate=%s' % (quote_attrib(self.onactivate), ))
        if self.requiredFeatures is not None:
            outfile.write(' requiredFeatures=%s' % (quote_attrib(self.requiredFeatures), ))
        if self.base is not None:
            outfile.write(' base=%s' % (quote_attrib(self.base), ))
        if self.style_attr is not None:
            outfile.write(' style_attr=%s' % (quote_attrib(self.style_attr), ))
    def exportChildren(self, outfile, level, namespace_='svg:', name_='defsType'):
        for element_ in self.internalElements:
            element_.export(outfile, level, namespace_, name_='desc')
    def hasContent_(self):
        if (
         len(self.internalElements)>0
            ):
            return True
        else:
            return False
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('requiredExtensions'):
            self.requiredExtensions = attrs.get('requiredExtensions').value
        if attrs.get('onfocusout'):
            self.onfocusout = attrs.get('onfocusout').value
        if attrs.get('onmousedown'):
            self.onmousedown = attrs.get('onmousedown').value
        if attrs.get('id'):
            self.id = attrs.get('id').value
        if attrs.get('onload'):
            self.onload = attrs.get('onload').value
        if attrs.get('space'):
            self.space = attrs.get('space').value
        if attrs.get('transform'):
            self.transform = attrs.get('transform').value
        if attrs.get('onmousemove'):
            self.onmousemove = attrs.get('onmousemove').value
        if attrs.get('onclick'):
            self.onclick = attrs.get('onclick').value
        if attrs.get('onfocusin'):
            self.onfocusin = attrs.get('onfocusin').value
        if attrs.get('onmouseup'):
            self.onmouseup = attrs.get('onmouseup').value
        if attrs.get('onmouseout'):
            self.onmouseout = attrs.get('onmouseout').value
        if attrs.get('systemLanguage'):
            self.systemLanguage = attrs.get('systemLanguage').value
        if attrs.get('onmouseover'):
            self.onmouseover = attrs.get('onmouseover').value
        if attrs.get('externalResourcesRequired'):
            if attrs.get('externalResourcesRequired').value in ('true', '1'):
                self.externalResourcesRequired = True
            elif attrs.get('externalResourcesRequired').value in ('false', '0'):
                self.externalResourcesRequired = False
            else:
                raise ValueError('Bad boolean attribute (externalResourcesRequired)')
        if attrs.get('class'):
            self.classxx = attrs.get('class').value
        if attrs.get('lang'):
            self.lang = attrs.get('lang').value
        if attrs.get('onactivate'):
            self.onactivate = attrs.get('onactivate').value
        if attrs.get('requiredFeatures'):
            self.requiredFeatures = attrs.get('requiredFeatures').value
        if attrs.get('base'):
            self.base = attrs.get('base').value
        if attrs.get('style_attr'):
            self.style_attr = attrs.get('style_attr').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'desc':
            obj_ = descType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'title':
            obj_ = titleType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'metadata':
            obj_ = metadataType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'defs':
            obj_ = defsType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'path':
            obj_ = pathType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'text':
            obj_ = textType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_textType(obj_)    # validate type textType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'rect':
            obj_ = rectType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'circle':
            obj_ = circleType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'ellipse':
            obj_ = ellipseType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'line':
            obj_ = lineType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'polyline':
            obj_ = polylineType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'polygon':
            obj_ = polygonType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'use':
            obj_ = useType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'image':
            obj_ = imageType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'svg':
            obj_ = svgType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_svgType(obj_)    # validate type svgType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'g':
            obj_ = gType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'view':
            obj_ = viewType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_viewType(obj_)    # validate type viewType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'switch':
            obj_ = switchType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'a':
            obj_ = aType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'altGlyphDef':
            obj_ = altGlyphDefType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'script':
            obj_ = scriptType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'style':
            obj_ = styleType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'symbol':
            obj_ = symbolType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'marker':
            obj_ = markerType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_markerType(obj_)    # validate type markerType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'clipPath':
            obj_ = clipPathType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_clipPathType(obj_)    # validate type clipPathType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'mask':
            obj_ = maskType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_maskType(obj_)    # validate type maskType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'linearGradient':
            obj_ = linearGradientType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_linearGradientType(obj_)    # validate type linearGradientType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'radialGradient':
            obj_ = radialGradientType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_radialGradientType(obj_)    # validate type radialGradientType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'pattern':
            obj_ = patternType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_patternType(obj_)    # validate type patternType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'filter':
            obj_ = filterType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_filterType(obj_)    # validate type filterType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'cursor':
            obj_ = cursorType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'font':
            obj_ = fontType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animate':
            obj_ = animateType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'set':
            obj_ = setType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animateMotion':
            obj_ = animateMotionType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animateColor':
            obj_ = animateColorType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animateTransform':
            obj_ = animateTransformType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_animateTransformType(obj_)    # validate type animateTransformType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'color-profile':
            obj_ = color_profile.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'font-face':
            obj_ = font_face.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
# end class defsType


class descType(object):
    subclass = None
    superclass = None
    def __init__(self, lang=None, style=None, space=None, id=None, content=None, base=None, classxx=None, valueOf_='', mixedclass_=None, content_=None):
        self.internalName = "desc"
        self.lang = lang
        self.style = style
        self.space = space
        self.id = id
        self.content = content
        self.base = base
        self.classxx = classxx
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
    def factory(*args_, **kwargs_):
        if descType.subclass:
            return descType.subclass(*args_, **kwargs_)
        else:
            return descType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_lang(self): return self.lang
    def set_lang(self, lang): self.lang = lang
    def get_style(self): return self.style
    def set_style(self, style): self.style = style
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_content(self): return self.content
    def set_content(self, content): self.content = content
    def get_base(self): return self.base
    def set_base(self, base): self.base = base
    def get_class(self): return self.classxx
    def set_class(self, classxx): self.classxx = classxx
    def getValueOf_(self): return self.valueOf_
    def setValueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='svg:', name_='descType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, self.internalName, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='descType')
        outfile.write('>')
        self.exportChildren(outfile, level + 1, namespace_, name_)
        outfile.write('</%s%s>\n' % (namespace_, self.internalName))
    def exportAttributes(self, outfile, level, namespace_='svg:', name_='descType'):
        if self.lang is not None:
            outfile.write(' lang=%s' % (quote_attrib(self.lang), ))
        if self.style is not None:
            outfile.write(' style=%s' % (quote_attrib(self.style), ))
        if self.space is not None:
            outfile.write(' space=%s' % (quote_attrib(self.space), ))
        if self.id is not None:
            outfile.write(' id=%s' % (quote_attrib(self.id), ))
        if self.content is not None:
            outfile.write(' content=%s' % (quote_attrib(self.content), ))
        if self.base is not None:
            outfile.write(' base=%s' % (quote_attrib(self.base), ))
        if self.classxx is not None:
            outfile.write(' class=%s' % (quote_attrib(self.classxx), ))
    def exportChildren(self, outfile, level, namespace_='svg:', name_='descType'):
        if self.valueOf_.find('![CDATA')>-1:
            value=quote_xml('%s' % self.valueOf_)
            value=value.replace('![CDATA','<![CDATA')
            value=value.replace(']]',']]>')
            outfile.write(value)
        else:
            outfile.write(quote_xml('%s' % self.valueOf_))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        self.valueOf_ = ''
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('lang'):
            self.lang = attrs.get('lang').value
        if attrs.get('style'):
            self.style = attrs.get('style').value
        if attrs.get('space'):
            self.space = attrs.get('space').value
        if attrs.get('id'):
            self.id = attrs.get('id').value
        if attrs.get('content'):
            self.content = attrs.get('content').value
        if attrs.get('base'):
            self.base = attrs.get('base').value
        if attrs.get('class'):
            self.classxx = attrs.get('class').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.TEXT_NODE:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.nodeValue)
            self.content_.append(obj_)
        if child_.nodeType == Node.TEXT_NODE:
            self.valueOf_ += child_.nodeValue
        elif child_.nodeType == Node.CDATA_SECTION_NODE:
            self.valueOf_ += '![CDATA['+child_.nodeValue+']]'
# end class descType


class titleType(object):
    subclass = None
    superclass = None
    def __init__(self, lang=None, style=None, space=None, id=None, content=None, base=None, classxx=None, valueOf_='', mixedclass_=None, content_=None):
        self.internalName = "title"
        self.lang = lang
        self.style = style
        self.space = space
        self.id = id
        self.content = content
        self.base = base
        self.classxx = classxx
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
    def factory(*args_, **kwargs_):
        if titleType.subclass:
            return titleType.subclass(*args_, **kwargs_)
        else:
            return titleType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_lang(self): return self.lang
    def set_lang(self, lang): self.lang = lang
    def get_style(self): return self.style
    def set_style(self, style): self.style = style
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_content(self): return self.content
    def set_content(self, content): self.content = content
    def get_base(self): return self.base
    def set_base(self, base): self.base = base
    def get_class(self): return self.classxx
    def set_class(self, classxx): self.classxx = classxx
    def getValueOf_(self): return self.valueOf_
    def setValueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='svg:', name_='titleType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, self.internalName, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='titleType')
        outfile.write('>')
        self.exportChildren(outfile, level + 1, namespace_, name_)
        outfile.write('</%s%s>\n' % (namespace_, self.internalName))
    def exportAttributes(self, outfile, level, namespace_='svg:', name_='titleType'):
        if self.lang is not None:
            outfile.write(' lang=%s' % (quote_attrib(self.lang), ))
        if self.style is not None:
            outfile.write(' style=%s' % (quote_attrib(self.style), ))
        if self.space is not None:
            outfile.write(' space=%s' % (quote_attrib(self.space), ))
        if self.id is not None:
            outfile.write(' id=%s' % (quote_attrib(self.id), ))
        if self.content is not None:
            outfile.write(' content=%s' % (quote_attrib(self.content), ))
        if self.base is not None:
            outfile.write(' base=%s' % (quote_attrib(self.base), ))
        if self.classxx is not None:
            outfile.write(' class=%s' % (quote_attrib(self.classxx), ))
    def exportChildren(self, outfile, level, namespace_='svg:', name_='titleType'):
        if self.valueOf_.find('![CDATA')>-1:
            value=quote_xml('%s' % self.valueOf_)
            value=value.replace('![CDATA','<![CDATA')
            value=value.replace(']]',']]>')
            outfile.write(value)
        else:
            outfile.write(quote_xml('%s' % self.valueOf_))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        self.valueOf_ = ''
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('lang'):
            self.lang = attrs.get('lang').value
        if attrs.get('style'):
            self.style = attrs.get('style').value
        if attrs.get('space'):
            self.space = attrs.get('space').value
        if attrs.get('id'):
            self.id = attrs.get('id').value
        if attrs.get('content'):
            self.content = attrs.get('content').value
        if attrs.get('base'):
            self.base = attrs.get('base').value
        if attrs.get('class'):
            self.classxx = attrs.get('class').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.TEXT_NODE:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.nodeValue)
            self.content_.append(obj_)
        if child_.nodeType == Node.TEXT_NODE:
            self.valueOf_ += child_.nodeValue
        elif child_.nodeType == Node.CDATA_SECTION_NODE:
            self.valueOf_ += '![CDATA['+child_.nodeValue+']]'
# end class titleType


class symbolType(object):
    subclass = None
    superclass = None
    def __init__(self, lang=None, onload=None, onclick=None, onmouseout=None, space=None, onfocusout=None, onmouseup=None, classxx=None, viewBox=None, base=None, onmousemove=None, onmouseover=None, onactivate=None, onfocusin=None, id=None, preserveAspectRatio=None, onmousedown=None, externalResourcesRequired=None, style_attr=None):
        self.internalName = "symbol"
        self.lang = lang
        self.onload = onload
        self.onclick = onclick
        self.onmouseout = onmouseout
        self.space = space
        self.onfocusout = onfocusout
        self.onmouseup = onmouseup
        self.classxx = classxx
        self.viewBox = viewBox
        self.base = base
        self.onmousemove = onmousemove
        self.onmouseover = onmouseover
        self.onactivate = onactivate
        self.onfocusin = onfocusin
        self.id = id
        self.preserveAspectRatio = preserveAspectRatio
        self.onmousedown = onmousedown
        self.externalResourcesRequired = externalResourcesRequired
        self.style_attr = style_attr
        self.internalElements = []
    def factory(*args_, **kwargs_):
        if symbolType.subclass:
            return symbolType.subclass(*args_, **kwargs_)
        else:
            return symbolType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def addElement(self, value): self.internalElements.append(value)
    def validate_textType(self, value):
        # validate type textType
        pass
    def validate_svgType(self, value):
        # validate type svgType
        pass
    def validate_viewType(self, value):
        # validate type viewType
        pass
    def validate_markerType(self, value):
        # validate type markerType
        pass
    def validate_clipPathType(self, value):
        # validate type clipPathType
        pass
    def validate_maskType(self, value):
        # validate type maskType
        pass
    def validate_linearGradientType(self, value):
        # validate type linearGradientType
        pass
    def validate_radialGradientType(self, value):
        # validate type radialGradientType
        pass
    def validate_patternType(self, value):
        # validate type patternType
        pass
    def validate_filterType(self, value):
        # validate type filterType
        pass
    def validate_animateTransformType(self, value):
        # validate type animateTransformType
        pass
    def get_lang(self): return self.lang
    def set_lang(self, lang): self.lang = lang
    def get_onload(self): return self.onload
    def set_onload(self, onload): self.onload = onload
    def get_onclick(self): return self.onclick
    def set_onclick(self, onclick): self.onclick = onclick
    def get_onmouseout(self): return self.onmouseout
    def set_onmouseout(self, onmouseout): self.onmouseout = onmouseout
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_onfocusout(self): return self.onfocusout
    def set_onfocusout(self, onfocusout): self.onfocusout = onfocusout
    def get_onmouseup(self): return self.onmouseup
    def set_onmouseup(self, onmouseup): self.onmouseup = onmouseup
    def get_class(self): return self.classxx
    def set_class(self, classxx): self.classxx = classxx
    def get_viewBox(self): return self.viewBox
    def set_viewBox(self, viewBox): self.viewBox = viewBox
    def get_base(self): return self.base
    def set_base(self, base): self.base = base
    def get_onmousemove(self): return self.onmousemove
    def set_onmousemove(self, onmousemove): self.onmousemove = onmousemove
    def get_onmouseover(self): return self.onmouseover
    def set_onmouseover(self, onmouseover): self.onmouseover = onmouseover
    def get_onactivate(self): return self.onactivate
    def set_onactivate(self, onactivate): self.onactivate = onactivate
    def get_onfocusin(self): return self.onfocusin
    def set_onfocusin(self, onfocusin): self.onfocusin = onfocusin
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_preserveAspectRatio(self): return self.preserveAspectRatio
    def set_preserveAspectRatio(self, preserveAspectRatio): self.preserveAspectRatio = preserveAspectRatio
    def get_onmousedown(self): return self.onmousedown
    def set_onmousedown(self, onmousedown): self.onmousedown = onmousedown
    def get_externalResourcesRequired(self): return self.externalResourcesRequired
    def set_externalResourcesRequired(self, externalResourcesRequired): self.externalResourcesRequired = externalResourcesRequired
    def get_style_attr(self): return self.style_attr
    def set_style_attr(self, style_attr): self.style_attr = style_attr
    def export(self, outfile, level, namespace_='svg:', name_='symbolType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, self.internalName, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='symbolType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, self.internalName))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='svg:', name_='symbolType'):
        if self.lang is not None:
            outfile.write(' lang=%s' % (quote_attrib(self.lang), ))
        if self.onload is not None:
            outfile.write(' onload=%s' % (quote_attrib(self.onload), ))
        if self.onclick is not None:
            outfile.write(' onclick=%s' % (quote_attrib(self.onclick), ))
        if self.onmouseout is not None:
            outfile.write(' onmouseout=%s' % (quote_attrib(self.onmouseout), ))
        if self.space is not None:
            outfile.write(' space=%s' % (quote_attrib(self.space), ))
        if self.onfocusout is not None:
            outfile.write(' onfocusout=%s' % (quote_attrib(self.onfocusout), ))
        if self.onmouseup is not None:
            outfile.write(' onmouseup=%s' % (quote_attrib(self.onmouseup), ))
        if self.classxx is not None:
            outfile.write(' class=%s' % (quote_attrib(self.classxx), ))
        if self.viewBox is not None:
            outfile.write(' viewBox=%s' % (quote_attrib(self.viewBox), ))
        if self.base is not None:
            outfile.write(' base=%s' % (quote_attrib(self.base), ))
        if self.onmousemove is not None:
            outfile.write(' onmousemove=%s' % (quote_attrib(self.onmousemove), ))
        if self.onmouseover is not None:
            outfile.write(' onmouseover=%s' % (quote_attrib(self.onmouseover), ))
        if self.onactivate is not None:
            outfile.write(' onactivate=%s' % (quote_attrib(self.onactivate), ))
        if self.onfocusin is not None:
            outfile.write(' onfocusin=%s' % (quote_attrib(self.onfocusin), ))
        if self.id is not None:
            outfile.write(' id=%s' % (quote_attrib(self.id), ))
        if self.preserveAspectRatio is not None:
            outfile.write(' preserveAspectRatio=%s' % (quote_attrib(self.preserveAspectRatio), ))
        if self.onmousedown is not None:
            outfile.write(' onmousedown=%s' % (quote_attrib(self.onmousedown), ))
        if self.externalResourcesRequired is not None:
            outfile.write(' externalResourcesRequired="%s"' % str_lower(str(self.externalResourcesRequired)))
        if self.style_attr is not None:
            outfile.write(' style_attr=%s' % (quote_attrib(self.style_attr), ))
    def exportChildren(self, outfile, level, namespace_='svg:', name_='symbolType'):
        for element_ in self.internalElements:
            element_.export(outfile, level, namespace_, name_='desc')
    def hasContent_(self):
        if (
         len(self.internalElements)>0
            ):
            return True
        else:
            return False
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('lang'):
            self.lang = attrs.get('lang').value
        if attrs.get('onload'):
            self.onload = attrs.get('onload').value
        if attrs.get('onclick'):
            self.onclick = attrs.get('onclick').value
        if attrs.get('onmouseout'):
            self.onmouseout = attrs.get('onmouseout').value
        if attrs.get('space'):
            self.space = attrs.get('space').value
        if attrs.get('onfocusout'):
            self.onfocusout = attrs.get('onfocusout').value
        if attrs.get('onmouseup'):
            self.onmouseup = attrs.get('onmouseup').value
        if attrs.get('class'):
            self.classxx = attrs.get('class').value
        if attrs.get('viewBox'):
            self.viewBox = attrs.get('viewBox').value
        if attrs.get('base'):
            self.base = attrs.get('base').value
        if attrs.get('onmousemove'):
            self.onmousemove = attrs.get('onmousemove').value
        if attrs.get('onmouseover'):
            self.onmouseover = attrs.get('onmouseover').value
        if attrs.get('onactivate'):
            self.onactivate = attrs.get('onactivate').value
        if attrs.get('onfocusin'):
            self.onfocusin = attrs.get('onfocusin').value
        if attrs.get('id'):
            self.id = attrs.get('id').value
        if attrs.get('preserveAspectRatio'):
            self.preserveAspectRatio = attrs.get('preserveAspectRatio').value
        if attrs.get('onmousedown'):
            self.onmousedown = attrs.get('onmousedown').value
        if attrs.get('externalResourcesRequired'):
            if attrs.get('externalResourcesRequired').value in ('true', '1'):
                self.externalResourcesRequired = True
            elif attrs.get('externalResourcesRequired').value in ('false', '0'):
                self.externalResourcesRequired = False
            else:
                raise ValueError('Bad boolean attribute (externalResourcesRequired)')
        if attrs.get('style_attr'):
            self.style_attr = attrs.get('style_attr').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'desc':
            obj_ = descType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'title':
            obj_ = titleType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'metadata':
            obj_ = metadataType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'defs':
            obj_ = defsType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'path':
            obj_ = pathType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'text':
            obj_ = textType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_textType(obj_)    # validate type textType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'rect':
            obj_ = rectType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'circle':
            obj_ = circleType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'ellipse':
            obj_ = ellipseType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'line':
            obj_ = lineType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'polyline':
            obj_ = polylineType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'polygon':
            obj_ = polygonType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'use':
            obj_ = useType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'image':
            obj_ = imageType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'svg':
            obj_ = svgType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_svgType(obj_)    # validate type svgType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'g':
            obj_ = gType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'view':
            obj_ = viewType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_viewType(obj_)    # validate type viewType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'switch':
            obj_ = switchType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'a':
            obj_ = aType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'altGlyphDef':
            obj_ = altGlyphDefType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'script':
            obj_ = scriptType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'style':
            obj_ = styleType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'symbol':
            obj_ = symbolType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'marker':
            obj_ = markerType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_markerType(obj_)    # validate type markerType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'clipPath':
            obj_ = clipPathType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_clipPathType(obj_)    # validate type clipPathType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'mask':
            obj_ = maskType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_maskType(obj_)    # validate type maskType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'linearGradient':
            obj_ = linearGradientType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_linearGradientType(obj_)    # validate type linearGradientType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'radialGradient':
            obj_ = radialGradientType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_radialGradientType(obj_)    # validate type radialGradientType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'pattern':
            obj_ = patternType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_patternType(obj_)    # validate type patternType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'filter':
            obj_ = filterType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_filterType(obj_)    # validate type filterType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'cursor':
            obj_ = cursorType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'font':
            obj_ = fontType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animate':
            obj_ = animateType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'set':
            obj_ = setType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animateMotion':
            obj_ = animateMotionType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animateColor':
            obj_ = animateColorType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animateTransform':
            obj_ = animateTransformType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_animateTransformType(obj_)    # validate type animateTransformType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'color-profile':
            obj_ = color_profile.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'font-face':
            obj_ = font_face.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
# end class symbolType


class useType(object):
    subclass = None
    superclass = None
    def __init__(self, show=None, onfocusout=None, actuate=None, height=None, href=None, arcrole=None, id=None, onload=None, style=None, space=None, requiredExtensions=None, transform=None, width=None, onmouseup=None, role=None, onactivate=None, onmousemove=None, type_=None, onfocusin=None, onclick=None, onmouseout=None, base=None, onmouseover=None, externalResourcesRequired=None, onmousedown=None, classxx=None, lang=None, title=None, requiredFeatures=None, systemLanguage=None, y=None, x=None):
        self.internalName = "use"
        self.show = show
        self.onfocusout = onfocusout
        self.actuate = actuate
        self.height = height
        self.href = href
        self.arcrole = arcrole
        self.id = id
        self.onload = onload
        self.style = style
        self.space = space
        self.requiredExtensions = requiredExtensions
        self.transform = transform
        self.width = width
        self.onmouseup = onmouseup
        self.role = role
        self.onactivate = onactivate
        self.onmousemove = onmousemove
        self.type_ = type_
        self.onfocusin = onfocusin
        self.onclick = onclick
        self.onmouseout = onmouseout
        self.base = base
        self.onmouseover = onmouseover
        self.externalResourcesRequired = externalResourcesRequired
        self.onmousedown = onmousedown
        self.classxx = classxx
        self.lang = lang
        self.title = title
        self.requiredFeatures = requiredFeatures
        self.systemLanguage = systemLanguage
        self.y = y
        self.x = x
        self.internalElements = []
    def factory(*args_, **kwargs_):
        if useType.subclass:
            return useType.subclass(*args_, **kwargs_)
        else:
            return useType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def addElement(self, value): self.internalElements.append(value)
    def validate_animateTransformType(self, value):
        # validate type animateTransformType
        pass
    def get_show(self): return self.show
    def set_show(self, show): self.show = show
    def get_onfocusout(self): return self.onfocusout
    def set_onfocusout(self, onfocusout): self.onfocusout = onfocusout
    def get_actuate(self): return self.actuate
    def set_actuate(self, actuate): self.actuate = actuate
    def get_height(self): return self.height
    def set_height(self, height): self.height = height
    def get_href(self): return self.href
    def set_href(self, href): self.href = href
    def get_arcrole(self): return self.arcrole
    def set_arcrole(self, arcrole): self.arcrole = arcrole
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_onload(self): return self.onload
    def set_onload(self, onload): self.onload = onload
    def get_style(self): return self.style
    def set_style(self, style): self.style = style
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_requiredExtensions(self): return self.requiredExtensions
    def set_requiredExtensions(self, requiredExtensions): self.requiredExtensions = requiredExtensions
    def get_transform(self): return self.transform
    def set_transform(self, transform): self.transform = transform
    def get_width(self): return self.width
    def set_width(self, width): self.width = width
    def get_onmouseup(self): return self.onmouseup
    def set_onmouseup(self, onmouseup): self.onmouseup = onmouseup
    def get_role(self): return self.role
    def set_role(self, role): self.role = role
    def get_onactivate(self): return self.onactivate
    def set_onactivate(self, onactivate): self.onactivate = onactivate
    def get_onmousemove(self): return self.onmousemove
    def set_onmousemove(self, onmousemove): self.onmousemove = onmousemove
    def get_type(self): return self.type_
    def set_type(self, type_): self.type_ = type_
    def get_onfocusin(self): return self.onfocusin
    def set_onfocusin(self, onfocusin): self.onfocusin = onfocusin
    def get_onclick(self): return self.onclick
    def set_onclick(self, onclick): self.onclick = onclick
    def get_onmouseout(self): return self.onmouseout
    def set_onmouseout(self, onmouseout): self.onmouseout = onmouseout
    def get_base(self): return self.base
    def set_base(self, base): self.base = base
    def get_onmouseover(self): return self.onmouseover
    def set_onmouseover(self, onmouseover): self.onmouseover = onmouseover
    def get_externalResourcesRequired(self): return self.externalResourcesRequired
    def set_externalResourcesRequired(self, externalResourcesRequired): self.externalResourcesRequired = externalResourcesRequired
    def get_onmousedown(self): return self.onmousedown
    def set_onmousedown(self, onmousedown): self.onmousedown = onmousedown
    def get_class(self): return self.classxx
    def set_class(self, classxx): self.classxx = classxx
    def get_lang(self): return self.lang
    def set_lang(self, lang): self.lang = lang
    def get_title(self): return self.title
    def set_title(self, title): self.title = title
    def get_requiredFeatures(self): return self.requiredFeatures
    def set_requiredFeatures(self, requiredFeatures): self.requiredFeatures = requiredFeatures
    def get_systemLanguage(self): return self.systemLanguage
    def set_systemLanguage(self, systemLanguage): self.systemLanguage = systemLanguage
    def get_y(self): return self.y
    def set_y(self, y): self.y = y
    def get_x(self): return self.x
    def set_x(self, x): self.x = x
    def export(self, outfile, level, namespace_='svg:', name_='useType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, self.internalName, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='useType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, self.internalName))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='svg:', name_='useType'):
        if self.show is not None:
            outfile.write(' show=%s' % (quote_attrib(self.show), ))
        if self.onfocusout is not None:
            outfile.write(' onfocusout=%s' % (quote_attrib(self.onfocusout), ))
        if self.actuate is not None:
            outfile.write(' actuate=%s' % (quote_attrib(self.actuate), ))
        if self.height is not None:
            outfile.write(' height=%s' % (quote_attrib(self.height), ))
        outfile.write(' href=%s' % (quote_attrib(self.href), ))
        if self.arcrole is not None:
            outfile.write(' arcrole=%s' % (quote_attrib(self.arcrole), ))
        if self.id is not None:
            outfile.write(' id=%s' % (quote_attrib(self.id), ))
        if self.onload is not None:
            outfile.write(' onload=%s' % (quote_attrib(self.onload), ))
        if self.style is not None:
            outfile.write(' style=%s' % (quote_attrib(self.style), ))
        if self.space is not None:
            outfile.write(' space=%s' % (quote_attrib(self.space), ))
        if self.requiredExtensions is not None:
            outfile.write(' requiredExtensions=%s' % (quote_attrib(self.requiredExtensions), ))
        if self.transform is not None:
            outfile.write(' transform=%s' % (quote_attrib(self.transform), ))
        if self.width is not None:
            outfile.write(' width=%s' % (quote_attrib(self.width), ))
        if self.onmouseup is not None:
            outfile.write(' onmouseup=%s' % (quote_attrib(self.onmouseup), ))
        if self.role is not None:
            outfile.write(' role=%s' % (quote_attrib(self.role), ))
        if self.onactivate is not None:
            outfile.write(' onactivate=%s' % (quote_attrib(self.onactivate), ))
        if self.onmousemove is not None:
            outfile.write(' onmousemove=%s' % (quote_attrib(self.onmousemove), ))
        if self.type_ is not None:
            outfile.write(' type=%s' % (quote_attrib(self.type_), ))
        if self.onfocusin is not None:
            outfile.write(' onfocusin=%s' % (quote_attrib(self.onfocusin), ))
        if self.onclick is not None:
            outfile.write(' onclick=%s' % (quote_attrib(self.onclick), ))
        if self.onmouseout is not None:
            outfile.write(' onmouseout=%s' % (quote_attrib(self.onmouseout), ))
        if self.base is not None:
            outfile.write(' base=%s' % (quote_attrib(self.base), ))
        if self.onmouseover is not None:
            outfile.write(' onmouseover=%s' % (quote_attrib(self.onmouseover), ))
        if self.externalResourcesRequired is not None:
            outfile.write(' externalResourcesRequired="%s"' % str_lower(str(self.externalResourcesRequired)))
        if self.onmousedown is not None:
            outfile.write(' onmousedown=%s' % (quote_attrib(self.onmousedown), ))
        if self.classxx is not None:
            outfile.write(' class=%s' % (quote_attrib(self.classxx), ))
        if self.lang is not None:
            outfile.write(' lang=%s' % (quote_attrib(self.lang), ))
        if self.title is not None:
            outfile.write(' title=%s' % (quote_attrib(self.title), ))
        if self.requiredFeatures is not None:
            outfile.write(' requiredFeatures=%s' % (quote_attrib(self.requiredFeatures), ))
        if self.systemLanguage is not None:
            outfile.write(' systemLanguage=%s' % (quote_attrib(self.systemLanguage), ))
        if self.y is not None:
            outfile.write(' y=%s' % (quote_attrib(self.y), ))
        if self.x is not None:
            outfile.write(' x=%s' % (quote_attrib(self.x), ))
    def exportChildren(self, outfile, level, namespace_='svg:', name_='useType'):
        for element_ in self.internalElements:
            element_.export(outfile, level, namespace_, name_='animate')
    def hasContent_(self):
        if (
         len(self.internalElements)>0
            ):
            return True
        else:
            return False
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('show'):
            self.show = attrs.get('show').value
        if attrs.get('onfocusout'):
            self.onfocusout = attrs.get('onfocusout').value
        if attrs.get('actuate'):
            self.actuate = attrs.get('actuate').value
        if attrs.get('height'):
            self.height = attrs.get('height').value
        if attrs.get('href'):
            self.href = attrs.get('href').value
        if attrs.get('arcrole'):
            self.arcrole = attrs.get('arcrole').value
        if attrs.get('id'):
            self.id = attrs.get('id').value
        if attrs.get('onload'):
            self.onload = attrs.get('onload').value
        if attrs.get('style'):
            self.style = attrs.get('style').value
        if attrs.get('space'):
            self.space = attrs.get('space').value
        if attrs.get('requiredExtensions'):
            self.requiredExtensions = attrs.get('requiredExtensions').value
        if attrs.get('transform'):
            self.transform = attrs.get('transform').value
        if attrs.get('width'):
            self.width = attrs.get('width').value
        if attrs.get('onmouseup'):
            self.onmouseup = attrs.get('onmouseup').value
        if attrs.get('role'):
            self.role = attrs.get('role').value
        if attrs.get('onactivate'):
            self.onactivate = attrs.get('onactivate').value
        if attrs.get('onmousemove'):
            self.onmousemove = attrs.get('onmousemove').value
        if attrs.get('type'):
            self.type_ = attrs.get('type').value
        if attrs.get('onfocusin'):
            self.onfocusin = attrs.get('onfocusin').value
        if attrs.get('onclick'):
            self.onclick = attrs.get('onclick').value
        if attrs.get('onmouseout'):
            self.onmouseout = attrs.get('onmouseout').value
        if attrs.get('base'):
            self.base = attrs.get('base').value
        if attrs.get('onmouseover'):
            self.onmouseover = attrs.get('onmouseover').value
        if attrs.get('externalResourcesRequired'):
            if attrs.get('externalResourcesRequired').value in ('true', '1'):
                self.externalResourcesRequired = True
            elif attrs.get('externalResourcesRequired').value in ('false', '0'):
                self.externalResourcesRequired = False
            else:
                raise ValueError('Bad boolean attribute (externalResourcesRequired)')
        if attrs.get('onmousedown'):
            self.onmousedown = attrs.get('onmousedown').value
        if attrs.get('class'):
            self.classxx = attrs.get('class').value
        if attrs.get('lang'):
            self.lang = attrs.get('lang').value
        if attrs.get('title'):
            self.title = attrs.get('title').value
        if attrs.get('requiredFeatures'):
            self.requiredFeatures = attrs.get('requiredFeatures').value
        if attrs.get('systemLanguage'):
            self.systemLanguage = attrs.get('systemLanguage').value
        if attrs.get('y'):
            self.y = attrs.get('y').value
        if attrs.get('x'):
            self.x = attrs.get('x').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animate':
            obj_ = animateType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'set':
            obj_ = setType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animateMotion':
            obj_ = animateMotionType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animateColor':
            obj_ = animateColorType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animateTransform':
            obj_ = animateTransformType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_animateTransformType(obj_)    # validate type animateTransformType
# end class useType


class imageType(object):
    subclass = None
    superclass = None
    def __init__(self, text_rendering=None, color_rendering=None, clip=None, show='other', color=None, onfocusout=None, actuate=None, height=None, href=None, onload=None, id=None, cursor=None, style=None, title=None, requiredExtensions=None, transform=None, width=None, onmouseup=None, role=None, onactivate=None, onmousemove=None, type_=None, onfocusin=None, opacity=None, onclick=None, onmouseout=None, clip_path=None, overflow=None, visibility=None, base=None, clip_rule=None, onmouseover=None, image_rendering=None, externalResourcesRequired=None, shape_rendering=None, classxx=None, lang=None, arcrole=None, mask=None, space=None, filter=None, pointer_events=None, requiredFeatures=None, systemLanguage=None, y=None, x=None, display=None, onmousedown=None, color_interpolation=None):
        self.internalName = "image"
        self.text_rendering = text_rendering
        self.color_rendering = color_rendering
        self.clip = clip
        self.show = show
        self.color = color
        self.onfocusout = onfocusout
        self.actuate = actuate
        self.height = height
        self.href = href
        self.onload = onload
        self.id = id
        self.cursor = cursor
        self.style = style
        self.title = title
        self.requiredExtensions = requiredExtensions
        self.transform = transform
        self.width = width
        self.onmouseup = onmouseup
        self.role = role
        self.onactivate = onactivate
        self.onmousemove = onmousemove
        self.type_ = type_
        self.onfocusin = onfocusin
        self.opacity = opacity
        self.onclick = onclick
        self.onmouseout = onmouseout
        self.clip_path = clip_path
        self.overflow = overflow
        self.visibility = visibility
        self.base = base
        self.clip_rule = clip_rule
        self.onmouseover = onmouseover
        self.image_rendering = image_rendering
        self.externalResourcesRequired = externalResourcesRequired
        self.shape_rendering = shape_rendering
        self.classxx = classxx
        self.lang = lang
        self.arcrole = arcrole
        self.mask = mask
        self.space = space
        self.filter = filter
        self.pointer_events = pointer_events
        self.requiredFeatures = requiredFeatures
        self.systemLanguage = systemLanguage
        self.y = y
        self.x = x
        self.display = display
        self.onmousedown = onmousedown
        self.color_interpolation = color_interpolation
        self.internalElements = []
    def factory(*args_, **kwargs_):
        if imageType.subclass:
            return imageType.subclass(*args_, **kwargs_)
        else:
            return imageType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def addElement(self, value): self.internalElements.append(value)
    def validate_animateTransformType(self, value):
        # validate type animateTransformType
        pass
    def get_text_rendering(self): return self.text_rendering
    def set_text_rendering(self, text_rendering): self.text_rendering = text_rendering
    def get_color_rendering(self): return self.color_rendering
    def set_color_rendering(self, color_rendering): self.color_rendering = color_rendering
    def get_clip(self): return self.clip
    def set_clip(self, clip): self.clip = clip
    def get_show(self): return self.show
    def set_show(self, show): self.show = show
    def get_color(self): return self.color
    def set_color(self, color): self.color = color
    def get_onfocusout(self): return self.onfocusout
    def set_onfocusout(self, onfocusout): self.onfocusout = onfocusout
    def get_actuate(self): return self.actuate
    def set_actuate(self, actuate): self.actuate = actuate
    def get_height(self): return self.height
    def set_height(self, height): self.height = height
    def get_href(self): return self.href
    def set_href(self, href): self.href = href
    def get_onload(self): return self.onload
    def set_onload(self, onload): self.onload = onload
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_cursor(self): return self.cursor
    def set_cursor(self, cursor): self.cursor = cursor
    def get_style(self): return self.style
    def set_style(self, style): self.style = style
    def get_title(self): return self.title
    def set_title(self, title): self.title = title
    def get_requiredExtensions(self): return self.requiredExtensions
    def set_requiredExtensions(self, requiredExtensions): self.requiredExtensions = requiredExtensions
    def get_transform(self): return self.transform
    def set_transform(self, transform): self.transform = transform
    def get_width(self): return self.width
    def set_width(self, width): self.width = width
    def get_onmouseup(self): return self.onmouseup
    def set_onmouseup(self, onmouseup): self.onmouseup = onmouseup
    def get_role(self): return self.role
    def set_role(self, role): self.role = role
    def get_onactivate(self): return self.onactivate
    def set_onactivate(self, onactivate): self.onactivate = onactivate
    def get_onmousemove(self): return self.onmousemove
    def set_onmousemove(self, onmousemove): self.onmousemove = onmousemove
    def get_type(self): return self.type_
    def set_type(self, type_): self.type_ = type_
    def get_onfocusin(self): return self.onfocusin
    def set_onfocusin(self, onfocusin): self.onfocusin = onfocusin
    def get_opacity(self): return self.opacity
    def set_opacity(self, opacity): self.opacity = opacity
    def get_onclick(self): return self.onclick
    def set_onclick(self, onclick): self.onclick = onclick
    def get_onmouseout(self): return self.onmouseout
    def set_onmouseout(self, onmouseout): self.onmouseout = onmouseout
    def get_clip_path(self): return self.clip_path
    def set_clip_path(self, clip_path): self.clip_path = clip_path
    def get_overflow(self): return self.overflow
    def set_overflow(self, overflow): self.overflow = overflow
    def get_visibility(self): return self.visibility
    def set_visibility(self, visibility): self.visibility = visibility
    def get_base(self): return self.base
    def set_base(self, base): self.base = base
    def get_clip_rule(self): return self.clip_rule
    def set_clip_rule(self, clip_rule): self.clip_rule = clip_rule
    def get_onmouseover(self): return self.onmouseover
    def set_onmouseover(self, onmouseover): self.onmouseover = onmouseover
    def get_image_rendering(self): return self.image_rendering
    def set_image_rendering(self, image_rendering): self.image_rendering = image_rendering
    def get_externalResourcesRequired(self): return self.externalResourcesRequired
    def set_externalResourcesRequired(self, externalResourcesRequired): self.externalResourcesRequired = externalResourcesRequired
    def get_shape_rendering(self): return self.shape_rendering
    def set_shape_rendering(self, shape_rendering): self.shape_rendering = shape_rendering
    def get_class(self): return self.classxx
    def set_class(self, classxx): self.classxx = classxx
    def get_lang(self): return self.lang
    def set_lang(self, lang): self.lang = lang
    def get_arcrole(self): return self.arcrole
    def set_arcrole(self, arcrole): self.arcrole = arcrole
    def get_mask(self): return self.mask
    def set_mask(self, mask): self.mask = mask
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_filter(self): return self.filter
    def set_filter(self, filter): self.filter = filter
    def get_pointer_events(self): return self.pointer_events
    def set_pointer_events(self, pointer_events): self.pointer_events = pointer_events
    def get_requiredFeatures(self): return self.requiredFeatures
    def set_requiredFeatures(self, requiredFeatures): self.requiredFeatures = requiredFeatures
    def get_systemLanguage(self): return self.systemLanguage
    def set_systemLanguage(self, systemLanguage): self.systemLanguage = systemLanguage
    def get_y(self): return self.y
    def set_y(self, y): self.y = y
    def get_x(self): return self.x
    def set_x(self, x): self.x = x
    def get_display(self): return self.display
    def set_display(self, display): self.display = display
    def get_onmousedown(self): return self.onmousedown
    def set_onmousedown(self, onmousedown): self.onmousedown = onmousedown
    def get_color_interpolation(self): return self.color_interpolation
    def set_color_interpolation(self, color_interpolation): self.color_interpolation = color_interpolation
    def export(self, outfile, level, namespace_='svg:', name_='imageType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, self.internalName, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='imageType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, self.internalName))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='svg:', name_='imageType'):
        if self.text_rendering is not None:
            outfile.write(' text-rendering=%s' % (quote_attrib(self.text_rendering), ))
        if self.color_rendering is not None:
            outfile.write(' color-rendering=%s' % (quote_attrib(self.color_rendering), ))
        if self.clip is not None:
            outfile.write(' clip=%s' % (quote_attrib(self.clip), ))
        if self.show is not None:
            outfile.write(' show=%s' % (quote_attrib(self.show), ))
        if self.color is not None:
            outfile.write(' color=%s' % (quote_attrib(self.color), ))
        if self.onfocusout is not None:
            outfile.write(' onfocusout=%s' % (quote_attrib(self.onfocusout), ))
        if self.actuate is not None:
            outfile.write(' actuate=%s' % (quote_attrib(self.actuate), ))
        outfile.write(' height=%s' % (quote_attrib(self.height), ))
        if self.href is not None:
            outfile.write(' href=%s' % (quote_attrib(self.href), ))
        if self.onload is not None:
            outfile.write(' onload=%s' % (quote_attrib(self.onload), ))
        if self.id is not None:
            outfile.write(' id=%s' % (quote_attrib(self.id), ))
        if self.cursor is not None:
            outfile.write(' cursor=%s' % (quote_attrib(self.cursor), ))
        if self.style is not None:
            outfile.write(' style=%s' % (quote_attrib(self.style), ))
        if self.title is not None:
            outfile.write(' title=%s' % (quote_attrib(self.title), ))
        if self.requiredExtensions is not None:
            outfile.write(' requiredExtensions=%s' % (quote_attrib(self.requiredExtensions), ))
        if self.transform is not None:
            outfile.write(' transform=%s' % (quote_attrib(self.transform), ))
        outfile.write(' width=%s' % (quote_attrib(self.width), ))
        if self.onmouseup is not None:
            outfile.write(' onmouseup=%s' % (quote_attrib(self.onmouseup), ))
        if self.role is not None:
            outfile.write(' role=%s' % (quote_attrib(self.role), ))
        if self.onactivate is not None:
            outfile.write(' onactivate=%s' % (quote_attrib(self.onactivate), ))
        if self.onmousemove is not None:
            outfile.write(' onmousemove=%s' % (quote_attrib(self.onmousemove), ))
        if self.type_ is not None:
            outfile.write(' type=%s' % (quote_attrib(self.type_), ))
        if self.onfocusin is not None:
            outfile.write(' onfocusin=%s' % (quote_attrib(self.onfocusin), ))
        if self.opacity is not None:
            outfile.write(' opacity=%s' % (quote_attrib(self.opacity), ))
        if self.onclick is not None:
            outfile.write(' onclick=%s' % (quote_attrib(self.onclick), ))
        if self.onmouseout is not None:
            outfile.write(' onmouseout=%s' % (quote_attrib(self.onmouseout), ))
        if self.clip_path is not None:
            outfile.write(' clip-path=%s' % (quote_attrib(self.clip_path), ))
        if self.overflow is not None:
            outfile.write(' overflow=%s' % (quote_attrib(self.overflow), ))
        if self.visibility is not None:
            outfile.write(' visibility=%s' % (quote_attrib(self.visibility), ))
        if self.base is not None:
            outfile.write(' base=%s' % (quote_attrib(self.base), ))
        if self.clip_rule is not None:
            outfile.write(' clip-rule=%s' % (quote_attrib(self.clip_rule), ))
        if self.onmouseover is not None:
            outfile.write(' onmouseover=%s' % (quote_attrib(self.onmouseover), ))
        if self.image_rendering is not None:
            outfile.write(' image-rendering=%s' % (quote_attrib(self.image_rendering), ))
        if self.externalResourcesRequired is not None:
            outfile.write(' externalResourcesRequired="%s"' % str_lower(str(self.externalResourcesRequired)))
        if self.shape_rendering is not None:
            outfile.write(' shape-rendering=%s' % (quote_attrib(self.shape_rendering), ))
        if self.classxx is not None:
            outfile.write(' class=%s' % (quote_attrib(self.classxx), ))
        if self.lang is not None:
            outfile.write(' lang=%s' % (quote_attrib(self.lang), ))
        if self.arcrole is not None:
            outfile.write(' arcrole=%s' % (quote_attrib(self.arcrole), ))
        if self.mask is not None:
            outfile.write(' mask=%s' % (quote_attrib(self.mask), ))
        if self.space is not None:
            outfile.write(' space=%s' % (quote_attrib(self.space), ))
        if self.filter is not None:
            outfile.write(' filter=%s' % (quote_attrib(self.filter), ))
        if self.pointer_events is not None:
            outfile.write(' pointer-events=%s' % (quote_attrib(self.pointer_events), ))
        if self.requiredFeatures is not None:
            outfile.write(' requiredFeatures=%s' % (quote_attrib(self.requiredFeatures), ))
        if self.systemLanguage is not None:
            outfile.write(' systemLanguage=%s' % (quote_attrib(self.systemLanguage), ))
        if self.y is not None:
            outfile.write(' y=%s' % (quote_attrib(self.y), ))
        if self.x is not None:
            outfile.write(' x=%s' % (quote_attrib(self.x), ))
        if self.display is not None:
            outfile.write(' display=%s' % (quote_attrib(self.display), ))
        if self.onmousedown is not None:
            outfile.write(' onmousedown=%s' % (quote_attrib(self.onmousedown), ))
        if self.color_interpolation is not None:
            outfile.write(' color-interpolation=%s' % (quote_attrib(self.color_interpolation), ))
    def exportChildren(self, outfile, level, namespace_='svg:', name_='imageType'):
        for element_ in self.internalElements:
            element_.export(outfile, level, namespace_, name_='animate')
    def hasContent_(self):
        if (
         len(self.internalElements)>0
            ):
            return True
        else:
            return False
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('text-rendering'):
            self.text_rendering = attrs.get('text-rendering').value
        if attrs.get('color-rendering'):
            self.color_rendering = attrs.get('color-rendering').value
        if attrs.get('clip'):
            self.clip = attrs.get('clip').value
        if attrs.get('show'):
            self.show = attrs.get('show').value
        if attrs.get('color'):
            self.color = attrs.get('color').value
        if attrs.get('onfocusout'):
            self.onfocusout = attrs.get('onfocusout').value
        if attrs.get('actuate'):
            self.actuate = attrs.get('actuate').value
        if attrs.get('height'):
            self.height = attrs.get('height').value
        if attrs.get('href'):
            self.href = attrs.get('href').value
        if attrs.get('onload'):
            self.onload = attrs.get('onload').value
        if attrs.get('id'):
            self.id = attrs.get('id').value
        if attrs.get('cursor'):
            self.cursor = attrs.get('cursor').value
        if attrs.get('style'):
            self.style = attrs.get('style').value
        if attrs.get('title'):
            self.title = attrs.get('title').value
        if attrs.get('requiredExtensions'):
            self.requiredExtensions = attrs.get('requiredExtensions').value
        if attrs.get('transform'):
            self.transform = attrs.get('transform').value
        if attrs.get('width'):
            self.width = attrs.get('width').value
        if attrs.get('onmouseup'):
            self.onmouseup = attrs.get('onmouseup').value
        if attrs.get('role'):
            self.role = attrs.get('role').value
        if attrs.get('onactivate'):
            self.onactivate = attrs.get('onactivate').value
        if attrs.get('onmousemove'):
            self.onmousemove = attrs.get('onmousemove').value
        if attrs.get('type'):
            self.type_ = attrs.get('type').value
        if attrs.get('onfocusin'):
            self.onfocusin = attrs.get('onfocusin').value
        if attrs.get('opacity'):
            self.opacity = attrs.get('opacity').value
        if attrs.get('onclick'):
            self.onclick = attrs.get('onclick').value
        if attrs.get('onmouseout'):
            self.onmouseout = attrs.get('onmouseout').value
        if attrs.get('clip-path'):
            self.clip_path = attrs.get('clip-path').value
        if attrs.get('overflow'):
            self.overflow = attrs.get('overflow').value
        if attrs.get('visibility'):
            self.visibility = attrs.get('visibility').value
        if attrs.get('base'):
            self.base = attrs.get('base').value
        if attrs.get('clip-rule'):
            self.clip_rule = attrs.get('clip-rule').value
        if attrs.get('onmouseover'):
            self.onmouseover = attrs.get('onmouseover').value
        if attrs.get('image-rendering'):
            self.image_rendering = attrs.get('image-rendering').value
        if attrs.get('externalResourcesRequired'):
            if attrs.get('externalResourcesRequired').value in ('true', '1'):
                self.externalResourcesRequired = True
            elif attrs.get('externalResourcesRequired').value in ('false', '0'):
                self.externalResourcesRequired = False
            else:
                raise ValueError('Bad boolean attribute (externalResourcesRequired)')
        if attrs.get('shape-rendering'):
            self.shape_rendering = attrs.get('shape-rendering').value
        if attrs.get('class'):
            self.classxx = attrs.get('class').value
        if attrs.get('lang'):
            self.lang = attrs.get('lang').value
        if attrs.get('arcrole'):
            self.arcrole = attrs.get('arcrole').value
        if attrs.get('mask'):
            self.mask = attrs.get('mask').value
        if attrs.get('space'):
            self.space = attrs.get('space').value
        if attrs.get('filter'):
            self.filter = attrs.get('filter').value
        if attrs.get('pointer-events'):
            self.pointer_events = attrs.get('pointer-events').value
        if attrs.get('requiredFeatures'):
            self.requiredFeatures = attrs.get('requiredFeatures').value
        if attrs.get('systemLanguage'):
            self.systemLanguage = attrs.get('systemLanguage').value
        if attrs.get('y'):
            self.y = attrs.get('y').value
        if attrs.get('x'):
            self.x = attrs.get('x').value
        if attrs.get('display'):
            self.display = attrs.get('display').value
        if attrs.get('onmousedown'):
            self.onmousedown = attrs.get('onmousedown').value
        if attrs.get('color-interpolation'):
            self.color_interpolation = attrs.get('color-interpolation').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animate':
            obj_ = animateType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'set':
            obj_ = setType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animateMotion':
            obj_ = animateMotionType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animateColor':
            obj_ = animateColorType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animateTransform':
            obj_ = animateTransformType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_animateTransformType(obj_)    # validate type animateTransformType
# end class imageType


class switchType(object):
    subclass = None
    superclass = None
    def __init__(self, lang=None, onload=None, style=None, onclick=None, onmouseout=None, requiredExtensions=None, onfocusout=None, systemLanguage=None, space=None, onmouseup=None, transform=None, classxx=None, requiredFeatures=None, base=None, onmousemove=None, onmouseover=None, onactivate=None, onfocusin=None, externalResourcesRequired=None, onmousedown=None, id=None):
        self.internalName = "switch"
        self.lang = lang
        self.onload = onload
        self.style = style
        self.onclick = onclick
        self.onmouseout = onmouseout
        self.requiredExtensions = requiredExtensions
        self.onfocusout = onfocusout
        self.systemLanguage = systemLanguage
        self.space = space
        self.onmouseup = onmouseup
        self.transform = transform
        self.classxx = classxx
        self.requiredFeatures = requiredFeatures
        self.base = base
        self.onmousemove = onmousemove
        self.onmouseover = onmouseover
        self.onactivate = onactivate
        self.onfocusin = onfocusin
        self.externalResourcesRequired = externalResourcesRequired
        self.onmousedown = onmousedown
        self.id = id
        self.internalElements = []
    def factory(*args_, **kwargs_):
        if switchType.subclass:
            return switchType.subclass(*args_, **kwargs_)
        else:
            return switchType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def addElement(self, value): self.internalElements.append(value)
    def validate_textType(self, value):
        # validate type textType
        pass
    def validate_svgType(self, value):
        # validate type svgType
        pass
    def validate_animateTransformType(self, value):
        # validate type animateTransformType
        pass
    def get_lang(self): return self.lang
    def set_lang(self, lang): self.lang = lang
    def get_onload(self): return self.onload
    def set_onload(self, onload): self.onload = onload
    def get_style(self): return self.style
    def set_style(self, style): self.style = style
    def get_onclick(self): return self.onclick
    def set_onclick(self, onclick): self.onclick = onclick
    def get_onmouseout(self): return self.onmouseout
    def set_onmouseout(self, onmouseout): self.onmouseout = onmouseout
    def get_requiredExtensions(self): return self.requiredExtensions
    def set_requiredExtensions(self, requiredExtensions): self.requiredExtensions = requiredExtensions
    def get_onfocusout(self): return self.onfocusout
    def set_onfocusout(self, onfocusout): self.onfocusout = onfocusout
    def get_systemLanguage(self): return self.systemLanguage
    def set_systemLanguage(self, systemLanguage): self.systemLanguage = systemLanguage
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_onmouseup(self): return self.onmouseup
    def set_onmouseup(self, onmouseup): self.onmouseup = onmouseup
    def get_transform(self): return self.transform
    def set_transform(self, transform): self.transform = transform
    def get_class(self): return self.classxx
    def set_class(self, classxx): self.classxx = classxx
    def get_requiredFeatures(self): return self.requiredFeatures
    def set_requiredFeatures(self, requiredFeatures): self.requiredFeatures = requiredFeatures
    def get_base(self): return self.base
    def set_base(self, base): self.base = base
    def get_onmousemove(self): return self.onmousemove
    def set_onmousemove(self, onmousemove): self.onmousemove = onmousemove
    def get_onmouseover(self): return self.onmouseover
    def set_onmouseover(self, onmouseover): self.onmouseover = onmouseover
    def get_onactivate(self): return self.onactivate
    def set_onactivate(self, onactivate): self.onactivate = onactivate
    def get_onfocusin(self): return self.onfocusin
    def set_onfocusin(self, onfocusin): self.onfocusin = onfocusin
    def get_externalResourcesRequired(self): return self.externalResourcesRequired
    def set_externalResourcesRequired(self, externalResourcesRequired): self.externalResourcesRequired = externalResourcesRequired
    def get_onmousedown(self): return self.onmousedown
    def set_onmousedown(self, onmousedown): self.onmousedown = onmousedown
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='svg:', name_='switchType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, self.internalName, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='switchType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, self.internalName))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='svg:', name_='switchType'):
        if self.lang is not None:
            outfile.write(' lang=%s' % (quote_attrib(self.lang), ))
        if self.onload is not None:
            outfile.write(' onload=%s' % (quote_attrib(self.onload), ))
        if self.style is not None:
            outfile.write(' style=%s' % (quote_attrib(self.style), ))
        if self.onclick is not None:
            outfile.write(' onclick=%s' % (quote_attrib(self.onclick), ))
        if self.onmouseout is not None:
            outfile.write(' onmouseout=%s' % (quote_attrib(self.onmouseout), ))
        if self.requiredExtensions is not None:
            outfile.write(' requiredExtensions=%s' % (quote_attrib(self.requiredExtensions), ))
        if self.onfocusout is not None:
            outfile.write(' onfocusout=%s' % (quote_attrib(self.onfocusout), ))
        if self.systemLanguage is not None:
            outfile.write(' systemLanguage=%s' % (quote_attrib(self.systemLanguage), ))
        if self.space is not None:
            outfile.write(' space=%s' % (quote_attrib(self.space), ))
        if self.onmouseup is not None:
            outfile.write(' onmouseup=%s' % (quote_attrib(self.onmouseup), ))
        if self.transform is not None:
            outfile.write(' transform=%s' % (quote_attrib(self.transform), ))
        if self.classxx is not None:
            outfile.write(' class=%s' % (quote_attrib(self.classxx), ))
        if self.requiredFeatures is not None:
            outfile.write(' requiredFeatures=%s' % (quote_attrib(self.requiredFeatures), ))
        if self.base is not None:
            outfile.write(' base=%s' % (quote_attrib(self.base), ))
        if self.onmousemove is not None:
            outfile.write(' onmousemove=%s' % (quote_attrib(self.onmousemove), ))
        if self.onmouseover is not None:
            outfile.write(' onmouseover=%s' % (quote_attrib(self.onmouseover), ))
        if self.onactivate is not None:
            outfile.write(' onactivate=%s' % (quote_attrib(self.onactivate), ))
        if self.onfocusin is not None:
            outfile.write(' onfocusin=%s' % (quote_attrib(self.onfocusin), ))
        if self.externalResourcesRequired is not None:
            outfile.write(' externalResourcesRequired="%s"' % str_lower(str(self.externalResourcesRequired)))
        if self.onmousedown is not None:
            outfile.write(' onmousedown=%s' % (quote_attrib(self.onmousedown), ))
        if self.id is not None:
            outfile.write(' id=%s' % (quote_attrib(self.id), ))
    def exportChildren(self, outfile, level, namespace_='svg:', name_='switchType'):
        for element_ in self.internalElements:
            element_.export(outfile, level, namespace_, name_='path')
    def hasContent_(self):
        if (
         len(self.internalElements)>0
            ):
            return True
        else:
            return False
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('lang'):
            self.lang = attrs.get('lang').value
        if attrs.get('onload'):
            self.onload = attrs.get('onload').value
        if attrs.get('style'):
            self.style = attrs.get('style').value
        if attrs.get('onclick'):
            self.onclick = attrs.get('onclick').value
        if attrs.get('onmouseout'):
            self.onmouseout = attrs.get('onmouseout').value
        if attrs.get('requiredExtensions'):
            self.requiredExtensions = attrs.get('requiredExtensions').value
        if attrs.get('onfocusout'):
            self.onfocusout = attrs.get('onfocusout').value
        if attrs.get('systemLanguage'):
            self.systemLanguage = attrs.get('systemLanguage').value
        if attrs.get('space'):
            self.space = attrs.get('space').value
        if attrs.get('onmouseup'):
            self.onmouseup = attrs.get('onmouseup').value
        if attrs.get('transform'):
            self.transform = attrs.get('transform').value
        if attrs.get('class'):
            self.classxx = attrs.get('class').value
        if attrs.get('requiredFeatures'):
            self.requiredFeatures = attrs.get('requiredFeatures').value
        if attrs.get('base'):
            self.base = attrs.get('base').value
        if attrs.get('onmousemove'):
            self.onmousemove = attrs.get('onmousemove').value
        if attrs.get('onmouseover'):
            self.onmouseover = attrs.get('onmouseover').value
        if attrs.get('onactivate'):
            self.onactivate = attrs.get('onactivate').value
        if attrs.get('onfocusin'):
            self.onfocusin = attrs.get('onfocusin').value
        if attrs.get('externalResourcesRequired'):
            if attrs.get('externalResourcesRequired').value in ('true', '1'):
                self.externalResourcesRequired = True
            elif attrs.get('externalResourcesRequired').value in ('false', '0'):
                self.externalResourcesRequired = False
            else:
                raise ValueError('Bad boolean attribute (externalResourcesRequired)')
        if attrs.get('onmousedown'):
            self.onmousedown = attrs.get('onmousedown').value
        if attrs.get('id'):
            self.id = attrs.get('id').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'path':
            obj_ = pathType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'text':
            obj_ = textType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_textType(obj_)    # validate type textType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'rect':
            obj_ = rectType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'circle':
            obj_ = circleType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'ellipse':
            obj_ = ellipseType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'line':
            obj_ = lineType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'polyline':
            obj_ = polylineType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'polygon':
            obj_ = polygonType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'use':
            obj_ = useType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'image':
            obj_ = imageType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'svg':
            obj_ = svgType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_svgType(obj_)    # validate type svgType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'g':
            obj_ = gType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'switch':
            obj_ = switchType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'a':
            obj_ = aType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'foreignObject':
            obj_ = foreignObjectType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animate':
            obj_ = animateType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'set':
            obj_ = setType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animateMotion':
            obj_ = animateMotionType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animateColor':
            obj_ = animateColorType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animateTransform':
            obj_ = animateTransformType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_animateTransformType(obj_)    # validate type animateTransformType
# end class switchType


class styleType(object):
    subclass = None
    superclass = None
    def __init__(self, title=None, media=None, space=None, base=None, type_=None, id=None, valueOf_='', mixedclass_=None, content_=None):
        self.internalName = "style"
        self.title = title
        self.media = media
        self.space = space
        self.base = base
        self.type_ = type_
        self.id = id
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
    def factory(*args_, **kwargs_):
        if styleType.subclass:
            return styleType.subclass(*args_, **kwargs_)
        else:
            return styleType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_title(self): return self.title
    def set_title(self, title): self.title = title
    def get_media(self): return self.media
    def set_media(self, media): self.media = media
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_base(self): return self.base
    def set_base(self, base): self.base = base
    def get_type(self): return self.type_
    def set_type(self, type_): self.type_ = type_
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def getValueOf_(self): return self.valueOf_
    def setValueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='svg:', name_='styleType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, self.internalName, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='styleType')
        outfile.write('>')
        self.exportChildren(outfile, level + 1, namespace_, name_)
        outfile.write('</%s%s>\n' % (namespace_, self.internalName))
    def exportAttributes(self, outfile, level, namespace_='svg:', name_='styleType'):
        if self.title is not None:
            outfile.write(' title=%s' % (quote_attrib(self.title), ))
        if self.media is not None:
            outfile.write(' media=%s' % (quote_attrib(self.media), ))
        if self.space is not None:
            outfile.write(' space=%s' % (quote_attrib(self.space), ))
        if self.base is not None:
            outfile.write(' base=%s' % (quote_attrib(self.base), ))
        outfile.write(' type=%s' % (quote_attrib(self.type_), ))
        if self.id is not None:
            outfile.write(' id=%s' % (quote_attrib(self.id), ))
    def exportChildren(self, outfile, level, namespace_='svg:', name_='styleType'):
        if self.valueOf_.find('![CDATA')>-1:
            value=quote_xml('%s' % self.valueOf_)
            value=value.replace('![CDATA','<![CDATA')
            value=value.replace(']]',']]>')
            outfile.write(value)
        else:
            outfile.write(quote_xml('%s' % self.valueOf_))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        self.valueOf_ = ''
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('title'):
            self.title = attrs.get('title').value
        if attrs.get('media'):
            self.media = attrs.get('media').value
        if attrs.get('space'):
            self.space = attrs.get('space').value
        if attrs.get('base'):
            self.base = attrs.get('base').value
        if attrs.get('type'):
            self.type_ = attrs.get('type').value
        if attrs.get('id'):
            self.id = attrs.get('id').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.TEXT_NODE:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.nodeValue)
            self.content_.append(obj_)
        if child_.nodeType == Node.TEXT_NODE:
            self.valueOf_ += child_.nodeValue
        elif child_.nodeType == Node.CDATA_SECTION_NODE:
            self.valueOf_ += '![CDATA['+child_.nodeValue+']]'
# end class styleType


class pathType(object):
    subclass = None
    superclass = None
    def __init__(self, stroke_linejoin=None, text_rendering=None, color_rendering=None, requiredExtensions=None, color=None, marker_start=None, shape_rendering=None, stroke=None, stroke_linecap=None, onload=None, pathLength=None, stroke_width=None, id=None, fill=None, cursor=None, style=None, space=None, fill_opacity=None, transform=None, onmouseup=None, stroke_miterlimit=None, onactivate=None, onfocusout=None, onmousemove=None, marker_mid=None, opacity=None, onclick=None, onmouseout=None, clip_path=None, visibility=None, systemLanguage=None, clip_rule=None, onmouseover=None, image_rendering=None, externalResourcesRequired=None, onmousedown=None, classxx=None, lang=None, marker_end=None, d=None, stroke_opacity=None, fill_rule=None, mask=None, stroke_dashoffset=None, onfocusin=None, filter=None, pointer_events=None, requiredFeatures=None, base=None, stroke_dasharray=None, display=None, color_interpolation=None):
        self.internalName = "path"
        self.stroke_linejoin = stroke_linejoin
        self.text_rendering = text_rendering
        self.color_rendering = color_rendering
        self.requiredExtensions = requiredExtensions
        self.color = color
        self.marker_start = marker_start
        self.shape_rendering = shape_rendering
        self.stroke = stroke
        self.stroke_linecap = stroke_linecap
        self.onload = onload
        self.pathLength = pathLength
        self.stroke_width = stroke_width
        self.id = id
        self.fill = fill
        self.cursor = cursor
        self.style = style
        self.space = space
        self.fill_opacity = fill_opacity
        self.transform = transform
        self.onmouseup = onmouseup
        self.stroke_miterlimit = stroke_miterlimit
        self.onactivate = onactivate
        self.onfocusout = onfocusout
        self.onmousemove = onmousemove
        self.marker_mid = marker_mid
        self.opacity = opacity
        self.onclick = onclick
        self.onmouseout = onmouseout
        self.clip_path = clip_path
        self.visibility = visibility
        self.systemLanguage = systemLanguage
        self.clip_rule = clip_rule
        self.onmouseover = onmouseover
        self.image_rendering = image_rendering
        self.externalResourcesRequired = externalResourcesRequired
        self.onmousedown = onmousedown
        self.classxx = classxx
        self.lang = lang
        self.marker_end = marker_end
        self.d = d
        self.stroke_opacity = stroke_opacity
        self.fill_rule = fill_rule
        self.mask = mask
        self.stroke_dashoffset = stroke_dashoffset
        self.onfocusin = onfocusin
        self.filter = filter
        self.pointer_events = pointer_events
        self.requiredFeatures = requiredFeatures
        self.base = base
        self.stroke_dasharray = stroke_dasharray
        self.display = display
        self.color_interpolation = color_interpolation
        self.internalElements = []
    def factory(*args_, **kwargs_):
        if pathType.subclass:
            return pathType.subclass(*args_, **kwargs_)
        else:
            return pathType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def addElement(self, value): self.internalElements.append(value)
    def validate_animateTransformType(self, value):
        # validate type animateTransformType
        pass
    def get_stroke_linejoin(self): return self.stroke_linejoin
    def set_stroke_linejoin(self, stroke_linejoin): self.stroke_linejoin = stroke_linejoin
    def get_text_rendering(self): return self.text_rendering
    def set_text_rendering(self, text_rendering): self.text_rendering = text_rendering
    def get_color_rendering(self): return self.color_rendering
    def set_color_rendering(self, color_rendering): self.color_rendering = color_rendering
    def get_requiredExtensions(self): return self.requiredExtensions
    def set_requiredExtensions(self, requiredExtensions): self.requiredExtensions = requiredExtensions
    def get_color(self): return self.color
    def set_color(self, color): self.color = color
    def get_marker_start(self): return self.marker_start
    def set_marker_start(self, marker_start): self.marker_start = marker_start
    def get_shape_rendering(self): return self.shape_rendering
    def set_shape_rendering(self, shape_rendering): self.shape_rendering = shape_rendering
    def get_stroke(self): return self.stroke
    def set_stroke(self, stroke): self.stroke = stroke
    def get_stroke_linecap(self): return self.stroke_linecap
    def set_stroke_linecap(self, stroke_linecap): self.stroke_linecap = stroke_linecap
    def get_onload(self): return self.onload
    def set_onload(self, onload): self.onload = onload
    def get_pathLength(self): return self.pathLength
    def set_pathLength(self, pathLength): self.pathLength = pathLength
    def get_stroke_width(self): return self.stroke_width
    def set_stroke_width(self, stroke_width): self.stroke_width = stroke_width
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_fill(self): return self.fill
    def set_fill(self, fill): self.fill = fill
    def get_cursor(self): return self.cursor
    def set_cursor(self, cursor): self.cursor = cursor
    def get_style(self): return self.style
    def set_style(self, style): self.style = style
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_fill_opacity(self): return self.fill_opacity
    def set_fill_opacity(self, fill_opacity): self.fill_opacity = fill_opacity
    def get_transform(self): return self.transform
    def set_transform(self, transform): self.transform = transform
    def get_onmouseup(self): return self.onmouseup
    def set_onmouseup(self, onmouseup): self.onmouseup = onmouseup
    def get_stroke_miterlimit(self): return self.stroke_miterlimit
    def set_stroke_miterlimit(self, stroke_miterlimit): self.stroke_miterlimit = stroke_miterlimit
    def get_onactivate(self): return self.onactivate
    def set_onactivate(self, onactivate): self.onactivate = onactivate
    def get_onfocusout(self): return self.onfocusout
    def set_onfocusout(self, onfocusout): self.onfocusout = onfocusout
    def get_onmousemove(self): return self.onmousemove
    def set_onmousemove(self, onmousemove): self.onmousemove = onmousemove
    def get_marker_mid(self): return self.marker_mid
    def set_marker_mid(self, marker_mid): self.marker_mid = marker_mid
    def get_opacity(self): return self.opacity
    def set_opacity(self, opacity): self.opacity = opacity
    def get_onclick(self): return self.onclick
    def set_onclick(self, onclick): self.onclick = onclick
    def get_onmouseout(self): return self.onmouseout
    def set_onmouseout(self, onmouseout): self.onmouseout = onmouseout
    def get_clip_path(self): return self.clip_path
    def set_clip_path(self, clip_path): self.clip_path = clip_path
    def get_visibility(self): return self.visibility
    def set_visibility(self, visibility): self.visibility = visibility
    def get_systemLanguage(self): return self.systemLanguage
    def set_systemLanguage(self, systemLanguage): self.systemLanguage = systemLanguage
    def get_clip_rule(self): return self.clip_rule
    def set_clip_rule(self, clip_rule): self.clip_rule = clip_rule
    def get_onmouseover(self): return self.onmouseover
    def set_onmouseover(self, onmouseover): self.onmouseover = onmouseover
    def get_image_rendering(self): return self.image_rendering
    def set_image_rendering(self, image_rendering): self.image_rendering = image_rendering
    def get_externalResourcesRequired(self): return self.externalResourcesRequired
    def set_externalResourcesRequired(self, externalResourcesRequired): self.externalResourcesRequired = externalResourcesRequired
    def get_onmousedown(self): return self.onmousedown
    def set_onmousedown(self, onmousedown): self.onmousedown = onmousedown
    def get_class(self): return self.classxx
    def set_class(self, classxx): self.classxx = classxx
    def get_lang(self): return self.lang
    def set_lang(self, lang): self.lang = lang
    def get_marker_end(self): return self.marker_end
    def set_marker_end(self, marker_end): self.marker_end = marker_end
    def get_d(self): return self.d
    def set_d(self, d): self.d = d
    def get_stroke_opacity(self): return self.stroke_opacity
    def set_stroke_opacity(self, stroke_opacity): self.stroke_opacity = stroke_opacity
    def get_fill_rule(self): return self.fill_rule
    def set_fill_rule(self, fill_rule): self.fill_rule = fill_rule
    def get_mask(self): return self.mask
    def set_mask(self, mask): self.mask = mask
    def get_stroke_dashoffset(self): return self.stroke_dashoffset
    def set_stroke_dashoffset(self, stroke_dashoffset): self.stroke_dashoffset = stroke_dashoffset
    def get_onfocusin(self): return self.onfocusin
    def set_onfocusin(self, onfocusin): self.onfocusin = onfocusin
    def get_filter(self): return self.filter
    def set_filter(self, filter): self.filter = filter
    def get_pointer_events(self): return self.pointer_events
    def set_pointer_events(self, pointer_events): self.pointer_events = pointer_events
    def get_requiredFeatures(self): return self.requiredFeatures
    def set_requiredFeatures(self, requiredFeatures): self.requiredFeatures = requiredFeatures
    def get_base(self): return self.base
    def set_base(self, base): self.base = base
    def get_stroke_dasharray(self): return self.stroke_dasharray
    def set_stroke_dasharray(self, stroke_dasharray): self.stroke_dasharray = stroke_dasharray
    def get_display(self): return self.display
    def set_display(self, display): self.display = display
    def get_color_interpolation(self): return self.color_interpolation
    def set_color_interpolation(self, color_interpolation): self.color_interpolation = color_interpolation
    def export(self, outfile, level, namespace_='svg:', name_='pathType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, self.internalName, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='pathType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, self.internalName))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='svg:', name_='pathType'):
        if self.stroke_linejoin is not None:
            outfile.write(' stroke-linejoin=%s' % (quote_attrib(self.stroke_linejoin), ))
        if self.text_rendering is not None:
            outfile.write(' text-rendering=%s' % (quote_attrib(self.text_rendering), ))
        if self.color_rendering is not None:
            outfile.write(' color-rendering=%s' % (quote_attrib(self.color_rendering), ))
        if self.requiredExtensions is not None:
            outfile.write(' requiredExtensions=%s' % (quote_attrib(self.requiredExtensions), ))
        if self.color is not None:
            outfile.write(' color=%s' % (quote_attrib(self.color), ))
        if self.marker_start is not None:
            outfile.write(' marker-start=%s' % (quote_attrib(self.marker_start), ))
        if self.shape_rendering is not None:
            outfile.write(' shape-rendering=%s' % (quote_attrib(self.shape_rendering), ))
        if self.stroke is not None:
            outfile.write(' stroke=%s' % (quote_attrib(self.stroke), ))
        if self.stroke_linecap is not None:
            outfile.write(' stroke-linecap=%s' % (quote_attrib(self.stroke_linecap), ))
        if self.onload is not None:
            outfile.write(' onload=%s' % (quote_attrib(self.onload), ))
        if self.pathLength is not None:
            outfile.write(' pathLength="%e"' % self.pathLength)
        if self.stroke_width is not None:
            outfile.write(' stroke-width=%s' % (quote_attrib(self.stroke_width), ))
        if self.id is not None:
            outfile.write(' id=%s' % (quote_attrib(self.id), ))
        if self.fill is not None:
            outfile.write(' fill=%s' % (quote_attrib(self.fill), ))
        if self.cursor is not None:
            outfile.write(' cursor=%s' % (quote_attrib(self.cursor), ))
        if self.style is not None:
            outfile.write(' style=%s' % (quote_attrib(self.style), ))
        if self.space is not None:
            outfile.write(' space=%s' % (quote_attrib(self.space), ))
        if self.fill_opacity is not None:
            outfile.write(' fill-opacity=%s' % (quote_attrib(self.fill_opacity), ))
        if self.transform is not None:
            outfile.write(' transform=%s' % (quote_attrib(self.transform), ))
        if self.onmouseup is not None:
            outfile.write(' onmouseup=%s' % (quote_attrib(self.onmouseup), ))
        if self.stroke_miterlimit is not None:
            outfile.write(' stroke-miterlimit=%s' % (quote_attrib(self.stroke_miterlimit), ))
        if self.onactivate is not None:
            outfile.write(' onactivate=%s' % (quote_attrib(self.onactivate), ))
        if self.onfocusout is not None:
            outfile.write(' onfocusout=%s' % (quote_attrib(self.onfocusout), ))
        if self.onmousemove is not None:
            outfile.write(' onmousemove=%s' % (quote_attrib(self.onmousemove), ))
        if self.marker_mid is not None:
            outfile.write(' marker-mid=%s' % (quote_attrib(self.marker_mid), ))
        if self.opacity is not None:
            outfile.write(' opacity=%s' % (quote_attrib(self.opacity), ))
        if self.onclick is not None:
            outfile.write(' onclick=%s' % (quote_attrib(self.onclick), ))
        if self.onmouseout is not None:
            outfile.write(' onmouseout=%s' % (quote_attrib(self.onmouseout), ))
        if self.clip_path is not None:
            outfile.write(' clip-path=%s' % (quote_attrib(self.clip_path), ))
        if self.visibility is not None:
            outfile.write(' visibility=%s' % (quote_attrib(self.visibility), ))
        if self.systemLanguage is not None:
            outfile.write(' systemLanguage=%s' % (quote_attrib(self.systemLanguage), ))
        if self.clip_rule is not None:
            outfile.write(' clip-rule=%s' % (quote_attrib(self.clip_rule), ))
        if self.onmouseover is not None:
            outfile.write(' onmouseover=%s' % (quote_attrib(self.onmouseover), ))
        if self.image_rendering is not None:
            outfile.write(' image-rendering=%s' % (quote_attrib(self.image_rendering), ))
        if self.externalResourcesRequired is not None:
            outfile.write(' externalResourcesRequired="%s"' % str_lower(str(self.externalResourcesRequired)))
        if self.onmousedown is not None:
            outfile.write(' onmousedown=%s' % (quote_attrib(self.onmousedown), ))
        if self.classxx is not None:
            outfile.write(' class=%s' % (quote_attrib(self.classxx), ))
        if self.lang is not None:
            outfile.write(' lang=%s' % (quote_attrib(self.lang), ))
        if self.marker_end is not None:
            outfile.write(' marker-end=%s' % (quote_attrib(self.marker_end), ))
        outfile.write(' d=%s' % (quote_attrib(self.d), ))
        if self.stroke_opacity is not None:
            outfile.write(' stroke-opacity=%s' % (quote_attrib(self.stroke_opacity), ))
        if self.fill_rule is not None:
            outfile.write(' fill-rule=%s' % (quote_attrib(self.fill_rule), ))
        if self.mask is not None:
            outfile.write(' mask=%s' % (quote_attrib(self.mask), ))
        if self.stroke_dashoffset is not None:
            outfile.write(' stroke-dashoffset=%s' % (quote_attrib(self.stroke_dashoffset), ))
        if self.onfocusin is not None:
            outfile.write(' onfocusin=%s' % (quote_attrib(self.onfocusin), ))
        if self.filter is not None:
            outfile.write(' filter=%s' % (quote_attrib(self.filter), ))
        if self.pointer_events is not None:
            outfile.write(' pointer-events=%s' % (quote_attrib(self.pointer_events), ))
        if self.requiredFeatures is not None:
            outfile.write(' requiredFeatures=%s' % (quote_attrib(self.requiredFeatures), ))
        if self.base is not None:
            outfile.write(' base=%s' % (quote_attrib(self.base), ))
        if self.stroke_dasharray is not None:
            outfile.write(' stroke-dasharray=%s' % (quote_attrib(self.stroke_dasharray), ))
        if self.display is not None:
            outfile.write(' display=%s' % (quote_attrib(self.display), ))
        if self.color_interpolation is not None:
            outfile.write(' color-interpolation=%s' % (quote_attrib(self.color_interpolation), ))
    def exportChildren(self, outfile, level, namespace_='svg:', name_='pathType'):
        for element_ in self.internalElements:
            element_.export(outfile, level, namespace_, name_='animate')
    def hasContent_(self):
        if (
         len(self.internalElements)>0
            ):
            return True
        else:
            return False
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('stroke-linejoin'):
            self.stroke_linejoin = attrs.get('stroke-linejoin').value
        if attrs.get('text-rendering'):
            self.text_rendering = attrs.get('text-rendering').value
        if attrs.get('color-rendering'):
            self.color_rendering = attrs.get('color-rendering').value
        if attrs.get('requiredExtensions'):
            self.requiredExtensions = attrs.get('requiredExtensions').value
        if attrs.get('color'):
            self.color = attrs.get('color').value
        if attrs.get('marker-start'):
            self.marker_start = attrs.get('marker-start').value
        if attrs.get('shape-rendering'):
            self.shape_rendering = attrs.get('shape-rendering').value
        if attrs.get('stroke'):
            self.stroke = attrs.get('stroke').value
        if attrs.get('stroke-linecap'):
            self.stroke_linecap = attrs.get('stroke-linecap').value
        if attrs.get('onload'):
            self.onload = attrs.get('onload').value
        if attrs.get('pathLength'):
            try:
                self.pathLength = float(attrs.get('pathLength').value)
            except ValueError, exp:
                raise ValueError('Bad float/double attribute (pathLength): %s' % exp)
        if attrs.get('stroke-width'):
            self.stroke_width = attrs.get('stroke-width').value
        if attrs.get('id'):
            self.id = attrs.get('id').value
        if attrs.get('fill'):
            self.fill = attrs.get('fill').value
        if attrs.get('cursor'):
            self.cursor = attrs.get('cursor').value
        if attrs.get('style'):
            self.style = attrs.get('style').value
        if attrs.get('space'):
            self.space = attrs.get('space').value
        if attrs.get('fill-opacity'):
            self.fill_opacity = attrs.get('fill-opacity').value
        if attrs.get('transform'):
            self.transform = attrs.get('transform').value
        if attrs.get('onmouseup'):
            self.onmouseup = attrs.get('onmouseup').value
        if attrs.get('stroke-miterlimit'):
            self.stroke_miterlimit = attrs.get('stroke-miterlimit').value
        if attrs.get('onactivate'):
            self.onactivate = attrs.get('onactivate').value
        if attrs.get('onfocusout'):
            self.onfocusout = attrs.get('onfocusout').value
        if attrs.get('onmousemove'):
            self.onmousemove = attrs.get('onmousemove').value
        if attrs.get('marker-mid'):
            self.marker_mid = attrs.get('marker-mid').value
        if attrs.get('opacity'):
            self.opacity = attrs.get('opacity').value
        if attrs.get('onclick'):
            self.onclick = attrs.get('onclick').value
        if attrs.get('onmouseout'):
            self.onmouseout = attrs.get('onmouseout').value
        if attrs.get('clip-path'):
            self.clip_path = attrs.get('clip-path').value
        if attrs.get('visibility'):
            self.visibility = attrs.get('visibility').value
        if attrs.get('systemLanguage'):
            self.systemLanguage = attrs.get('systemLanguage').value
        if attrs.get('clip-rule'):
            self.clip_rule = attrs.get('clip-rule').value
        if attrs.get('onmouseover'):
            self.onmouseover = attrs.get('onmouseover').value
        if attrs.get('image-rendering'):
            self.image_rendering = attrs.get('image-rendering').value
        if attrs.get('externalResourcesRequired'):
            if attrs.get('externalResourcesRequired').value in ('true', '1'):
                self.externalResourcesRequired = True
            elif attrs.get('externalResourcesRequired').value in ('false', '0'):
                self.externalResourcesRequired = False
            else:
                raise ValueError('Bad boolean attribute (externalResourcesRequired)')
        if attrs.get('onmousedown'):
            self.onmousedown = attrs.get('onmousedown').value
        if attrs.get('class'):
            self.classxx = attrs.get('class').value
        if attrs.get('lang'):
            self.lang = attrs.get('lang').value
        if attrs.get('marker-end'):
            self.marker_end = attrs.get('marker-end').value
        if attrs.get('d'):
            self.d = attrs.get('d').value
        if attrs.get('stroke-opacity'):
            self.stroke_opacity = attrs.get('stroke-opacity').value
        if attrs.get('fill-rule'):
            self.fill_rule = attrs.get('fill-rule').value
        if attrs.get('mask'):
            self.mask = attrs.get('mask').value
        if attrs.get('stroke-dashoffset'):
            self.stroke_dashoffset = attrs.get('stroke-dashoffset').value
        if attrs.get('onfocusin'):
            self.onfocusin = attrs.get('onfocusin').value
        if attrs.get('filter'):
            self.filter = attrs.get('filter').value
        if attrs.get('pointer-events'):
            self.pointer_events = attrs.get('pointer-events').value
        if attrs.get('requiredFeatures'):
            self.requiredFeatures = attrs.get('requiredFeatures').value
        if attrs.get('base'):
            self.base = attrs.get('base').value
        if attrs.get('stroke-dasharray'):
            self.stroke_dasharray = attrs.get('stroke-dasharray').value
        if attrs.get('display'):
            self.display = attrs.get('display').value
        if attrs.get('color-interpolation'):
            self.color_interpolation = attrs.get('color-interpolation').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animate':
            obj_ = animateType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'set':
            obj_ = setType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animateMotion':
            obj_ = animateMotionType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animateColor':
            obj_ = animateColorType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animateTransform':
            obj_ = animateTransformType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_animateTransformType(obj_)    # validate type animateTransformType
# end class pathType


class rectType(object):
    subclass = None
    superclass = None
    def __init__(self, stroke_linejoin=None, text_rendering=None, color_rendering=None, requiredExtensions=None, color=None, onfocusout=None, transform=None, stroke=None, stroke_linecap=None, onload=None, stroke_width=None, id=None, fill=None, cursor=None, style=None, space=None, fill_opacity=None, rx=None, ry=None, shape_rendering=None, width=None, onmouseup=None, stroke_miterlimit=None, onactivate=None, onmousemove=None, onfocusin=None, opacity=None, onclick=None, onmouseout=None, clip_path=None, visibility=None, systemLanguage=None, clip_rule=None, onmouseover=None, image_rendering=None, externalResourcesRequired=None, height=None, classxx=None, lang=None, stroke_opacity=None, fill_rule=None, mask=None, stroke_dashoffset=None, filter=None, pointer_events=None, requiredFeatures=None, base=None, stroke_dasharray=None, y=None, x=None, display=None, onmousedown=None, color_interpolation=None):
        self.internalName = "rect"
        self.stroke_linejoin = stroke_linejoin
        self.text_rendering = text_rendering
        self.color_rendering = color_rendering
        self.requiredExtensions = requiredExtensions
        self.color = color
        self.onfocusout = onfocusout
        self.transform = transform
        self.stroke = stroke
        self.stroke_linecap = stroke_linecap
        self.onload = onload
        self.stroke_width = stroke_width
        self.id = id
        self.fill = fill
        self.cursor = cursor
        self.style = style
        self.space = space
        self.fill_opacity = fill_opacity
        self.rx = rx
        self.ry = ry
        self.shape_rendering = shape_rendering
        self.width = width
        self.onmouseup = onmouseup
        self.stroke_miterlimit = stroke_miterlimit
        self.onactivate = onactivate
        self.onmousemove = onmousemove
        self.onfocusin = onfocusin
        self.opacity = opacity
        self.onclick = onclick
        self.onmouseout = onmouseout
        self.clip_path = clip_path
        self.visibility = visibility
        self.systemLanguage = systemLanguage
        self.clip_rule = clip_rule
        self.onmouseover = onmouseover
        self.image_rendering = image_rendering
        self.externalResourcesRequired = externalResourcesRequired
        self.height = height
        self.classxx = classxx
        self.lang = lang
        self.stroke_opacity = stroke_opacity
        self.fill_rule = fill_rule
        self.mask = mask
        self.stroke_dashoffset = stroke_dashoffset
        self.filter = filter
        self.pointer_events = pointer_events
        self.requiredFeatures = requiredFeatures
        self.base = base
        self.stroke_dasharray = stroke_dasharray
        self.y = y
        self.x = x
        self.display = display
        self.onmousedown = onmousedown
        self.color_interpolation = color_interpolation
        self.internalElements = []
    def factory(*args_, **kwargs_):
        if rectType.subclass:
            return rectType.subclass(*args_, **kwargs_)
        else:
            return rectType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def addElement(self, value): self.internalElements.append(value)
    def validate_animateTransformType(self, value):
        # validate type animateTransformType
        pass
    def get_stroke_linejoin(self): return self.stroke_linejoin
    def set_stroke_linejoin(self, stroke_linejoin): self.stroke_linejoin = stroke_linejoin
    def get_text_rendering(self): return self.text_rendering
    def set_text_rendering(self, text_rendering): self.text_rendering = text_rendering
    def get_color_rendering(self): return self.color_rendering
    def set_color_rendering(self, color_rendering): self.color_rendering = color_rendering
    def get_requiredExtensions(self): return self.requiredExtensions
    def set_requiredExtensions(self, requiredExtensions): self.requiredExtensions = requiredExtensions
    def get_color(self): return self.color
    def set_color(self, color): self.color = color
    def get_onfocusout(self): return self.onfocusout
    def set_onfocusout(self, onfocusout): self.onfocusout = onfocusout
    def get_transform(self): return self.transform
    def set_transform(self, transform): self.transform = transform
    def get_stroke(self): return self.stroke
    def set_stroke(self, stroke): self.stroke = stroke
    def get_stroke_linecap(self): return self.stroke_linecap
    def set_stroke_linecap(self, stroke_linecap): self.stroke_linecap = stroke_linecap
    def get_onload(self): return self.onload
    def set_onload(self, onload): self.onload = onload
    def get_stroke_width(self): return self.stroke_width
    def set_stroke_width(self, stroke_width): self.stroke_width = stroke_width
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_fill(self): return self.fill
    def set_fill(self, fill): self.fill = fill
    def get_cursor(self): return self.cursor
    def set_cursor(self, cursor): self.cursor = cursor
    def get_style(self): return self.style
    def set_style(self, style): self.style = style
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_fill_opacity(self): return self.fill_opacity
    def set_fill_opacity(self, fill_opacity): self.fill_opacity = fill_opacity
    def get_rx(self): return self.rx
    def set_rx(self, rx): self.rx = rx
    def get_ry(self): return self.ry
    def set_ry(self, ry): self.ry = ry
    def get_shape_rendering(self): return self.shape_rendering
    def set_shape_rendering(self, shape_rendering): self.shape_rendering = shape_rendering
    def get_width(self): return self.width
    def set_width(self, width): self.width = width
    def get_onmouseup(self): return self.onmouseup
    def set_onmouseup(self, onmouseup): self.onmouseup = onmouseup
    def get_stroke_miterlimit(self): return self.stroke_miterlimit
    def set_stroke_miterlimit(self, stroke_miterlimit): self.stroke_miterlimit = stroke_miterlimit
    def get_onactivate(self): return self.onactivate
    def set_onactivate(self, onactivate): self.onactivate = onactivate
    def get_onmousemove(self): return self.onmousemove
    def set_onmousemove(self, onmousemove): self.onmousemove = onmousemove
    def get_onfocusin(self): return self.onfocusin
    def set_onfocusin(self, onfocusin): self.onfocusin = onfocusin
    def get_opacity(self): return self.opacity
    def set_opacity(self, opacity): self.opacity = opacity
    def get_onclick(self): return self.onclick
    def set_onclick(self, onclick): self.onclick = onclick
    def get_onmouseout(self): return self.onmouseout
    def set_onmouseout(self, onmouseout): self.onmouseout = onmouseout
    def get_clip_path(self): return self.clip_path
    def set_clip_path(self, clip_path): self.clip_path = clip_path
    def get_visibility(self): return self.visibility
    def set_visibility(self, visibility): self.visibility = visibility
    def get_systemLanguage(self): return self.systemLanguage
    def set_systemLanguage(self, systemLanguage): self.systemLanguage = systemLanguage
    def get_clip_rule(self): return self.clip_rule
    def set_clip_rule(self, clip_rule): self.clip_rule = clip_rule
    def get_onmouseover(self): return self.onmouseover
    def set_onmouseover(self, onmouseover): self.onmouseover = onmouseover
    def get_image_rendering(self): return self.image_rendering
    def set_image_rendering(self, image_rendering): self.image_rendering = image_rendering
    def get_externalResourcesRequired(self): return self.externalResourcesRequired
    def set_externalResourcesRequired(self, externalResourcesRequired): self.externalResourcesRequired = externalResourcesRequired
    def get_height(self): return self.height
    def set_height(self, height): self.height = height
    def get_class(self): return self.classxx
    def set_class(self, classxx): self.classxx = classxx
    def get_lang(self): return self.lang
    def set_lang(self, lang): self.lang = lang
    def get_stroke_opacity(self): return self.stroke_opacity
    def set_stroke_opacity(self, stroke_opacity): self.stroke_opacity = stroke_opacity
    def get_fill_rule(self): return self.fill_rule
    def set_fill_rule(self, fill_rule): self.fill_rule = fill_rule
    def get_mask(self): return self.mask
    def set_mask(self, mask): self.mask = mask
    def get_stroke_dashoffset(self): return self.stroke_dashoffset
    def set_stroke_dashoffset(self, stroke_dashoffset): self.stroke_dashoffset = stroke_dashoffset
    def get_filter(self): return self.filter
    def set_filter(self, filter): self.filter = filter
    def get_pointer_events(self): return self.pointer_events
    def set_pointer_events(self, pointer_events): self.pointer_events = pointer_events
    def get_requiredFeatures(self): return self.requiredFeatures
    def set_requiredFeatures(self, requiredFeatures): self.requiredFeatures = requiredFeatures
    def get_base(self): return self.base
    def set_base(self, base): self.base = base
    def get_stroke_dasharray(self): return self.stroke_dasharray
    def set_stroke_dasharray(self, stroke_dasharray): self.stroke_dasharray = stroke_dasharray
    def get_y(self): return self.y
    def set_y(self, y): self.y = y
    def get_x(self): return self.x
    def set_x(self, x): self.x = x
    def get_display(self): return self.display
    def set_display(self, display): self.display = display
    def get_onmousedown(self): return self.onmousedown
    def set_onmousedown(self, onmousedown): self.onmousedown = onmousedown
    def get_color_interpolation(self): return self.color_interpolation
    def set_color_interpolation(self, color_interpolation): self.color_interpolation = color_interpolation
    def export(self, outfile, level, namespace_='svg:', name_='rectType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, self.internalName, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='rectType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, self.internalName))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='svg:', name_='rectType'):
        if self.stroke_linejoin is not None:
            outfile.write(' stroke-linejoin=%s' % (quote_attrib(self.stroke_linejoin), ))
        if self.text_rendering is not None:
            outfile.write(' text-rendering=%s' % (quote_attrib(self.text_rendering), ))
        if self.color_rendering is not None:
            outfile.write(' color-rendering=%s' % (quote_attrib(self.color_rendering), ))
        if self.requiredExtensions is not None:
            outfile.write(' requiredExtensions=%s' % (quote_attrib(self.requiredExtensions), ))
        if self.color is not None:
            outfile.write(' color=%s' % (quote_attrib(self.color), ))
        if self.onfocusout is not None:
            outfile.write(' onfocusout=%s' % (quote_attrib(self.onfocusout), ))
        if self.transform is not None:
            outfile.write(' transform=%s' % (quote_attrib(self.transform), ))
        if self.stroke is not None:
            outfile.write(' stroke=%s' % (quote_attrib(self.stroke), ))
        if self.stroke_linecap is not None:
            outfile.write(' stroke-linecap=%s' % (quote_attrib(self.stroke_linecap), ))
        if self.onload is not None:
            outfile.write(' onload=%s' % (quote_attrib(self.onload), ))
        if self.stroke_width is not None:
            outfile.write(' stroke-width=%s' % (quote_attrib(self.stroke_width), ))
        if self.id is not None:
            outfile.write(' id=%s' % (quote_attrib(self.id), ))
        if self.fill is not None:
            outfile.write(' fill=%s' % (quote_attrib(self.fill), ))
        if self.cursor is not None:
            outfile.write(' cursor=%s' % (quote_attrib(self.cursor), ))
        if self.style is not None:
            outfile.write(' style=%s' % (quote_attrib(self.style), ))
        if self.space is not None:
            outfile.write(' space=%s' % (quote_attrib(self.space), ))
        if self.fill_opacity is not None:
            outfile.write(' fill-opacity=%s' % (quote_attrib(self.fill_opacity), ))
        if self.rx is not None:
            outfile.write(' rx=%s' % (quote_attrib(self.rx), ))
        if self.ry is not None:
            outfile.write(' ry=%s' % (quote_attrib(self.ry), ))
        if self.shape_rendering is not None:
            outfile.write(' shape-rendering=%s' % (quote_attrib(self.shape_rendering), ))
        outfile.write(' width=%s' % (quote_attrib(self.width), ))
        if self.onmouseup is not None:
            outfile.write(' onmouseup=%s' % (quote_attrib(self.onmouseup), ))
        if self.stroke_miterlimit is not None:
            outfile.write(' stroke-miterlimit=%s' % (quote_attrib(self.stroke_miterlimit), ))
        if self.onactivate is not None:
            outfile.write(' onactivate=%s' % (quote_attrib(self.onactivate), ))
        if self.onmousemove is not None:
            outfile.write(' onmousemove=%s' % (quote_attrib(self.onmousemove), ))
        if self.onfocusin is not None:
            outfile.write(' onfocusin=%s' % (quote_attrib(self.onfocusin), ))
        if self.opacity is not None:
            outfile.write(' opacity=%s' % (quote_attrib(self.opacity), ))
        if self.onclick is not None:
            outfile.write(' onclick=%s' % (quote_attrib(self.onclick), ))
        if self.onmouseout is not None:
            outfile.write(' onmouseout=%s' % (quote_attrib(self.onmouseout), ))
        if self.clip_path is not None:
            outfile.write(' clip-path=%s' % (quote_attrib(self.clip_path), ))
        if self.visibility is not None:
            outfile.write(' visibility=%s' % (quote_attrib(self.visibility), ))
        if self.systemLanguage is not None:
            outfile.write(' systemLanguage=%s' % (quote_attrib(self.systemLanguage), ))
        if self.clip_rule is not None:
            outfile.write(' clip-rule=%s' % (quote_attrib(self.clip_rule), ))
        if self.onmouseover is not None:
            outfile.write(' onmouseover=%s' % (quote_attrib(self.onmouseover), ))
        if self.image_rendering is not None:
            outfile.write(' image-rendering=%s' % (quote_attrib(self.image_rendering), ))
        if self.externalResourcesRequired is not None:
            outfile.write(' externalResourcesRequired="%s"' % str_lower(str(self.externalResourcesRequired)))
        outfile.write(' height=%s' % (quote_attrib(self.height), ))
        if self.classxx is not None:
            outfile.write(' class=%s' % (quote_attrib(self.classxx), ))
        if self.lang is not None:
            outfile.write(' lang=%s' % (quote_attrib(self.lang), ))
        if self.stroke_opacity is not None:
            outfile.write(' stroke-opacity=%s' % (quote_attrib(self.stroke_opacity), ))
        if self.fill_rule is not None:
            outfile.write(' fill-rule=%s' % (quote_attrib(self.fill_rule), ))
        if self.mask is not None:
            outfile.write(' mask=%s' % (quote_attrib(self.mask), ))
        if self.stroke_dashoffset is not None:
            outfile.write(' stroke-dashoffset=%s' % (quote_attrib(self.stroke_dashoffset), ))
        if self.filter is not None:
            outfile.write(' filter=%s' % (quote_attrib(self.filter), ))
        if self.pointer_events is not None:
            outfile.write(' pointer-events=%s' % (quote_attrib(self.pointer_events), ))
        if self.requiredFeatures is not None:
            outfile.write(' requiredFeatures=%s' % (quote_attrib(self.requiredFeatures), ))
        if self.base is not None:
            outfile.write(' base=%s' % (quote_attrib(self.base), ))
        if self.stroke_dasharray is not None:
            outfile.write(' stroke-dasharray=%s' % (quote_attrib(self.stroke_dasharray), ))
        if self.y is not None:
            outfile.write(' y=%s' % (quote_attrib(self.y), ))
        if self.x is not None:
            outfile.write(' x=%s' % (quote_attrib(self.x), ))
        if self.display is not None:
            outfile.write(' display=%s' % (quote_attrib(self.display), ))
        if self.onmousedown is not None:
            outfile.write(' onmousedown=%s' % (quote_attrib(self.onmousedown), ))
        if self.color_interpolation is not None:
            outfile.write(' color-interpolation=%s' % (quote_attrib(self.color_interpolation), ))
    def exportChildren(self, outfile, level, namespace_='svg:', name_='rectType'):
        for element_ in self.internalElements:
            element_.export(outfile, level, namespace_, name_='animate')
    def hasContent_(self):
        if (
         len(self.internalElements)>0
            ):
            return True
        else:
            return False
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('stroke-linejoin'):
            self.stroke_linejoin = attrs.get('stroke-linejoin').value
        if attrs.get('text-rendering'):
            self.text_rendering = attrs.get('text-rendering').value
        if attrs.get('color-rendering'):
            self.color_rendering = attrs.get('color-rendering').value
        if attrs.get('requiredExtensions'):
            self.requiredExtensions = attrs.get('requiredExtensions').value
        if attrs.get('color'):
            self.color = attrs.get('color').value
        if attrs.get('onfocusout'):
            self.onfocusout = attrs.get('onfocusout').value
        if attrs.get('transform'):
            self.transform = attrs.get('transform').value
        if attrs.get('stroke'):
            self.stroke = attrs.get('stroke').value
        if attrs.get('stroke-linecap'):
            self.stroke_linecap = attrs.get('stroke-linecap').value
        if attrs.get('onload'):
            self.onload = attrs.get('onload').value
        if attrs.get('stroke-width'):
            self.stroke_width = attrs.get('stroke-width').value
        if attrs.get('id'):
            self.id = attrs.get('id').value
        if attrs.get('fill'):
            self.fill = attrs.get('fill').value
        if attrs.get('cursor'):
            self.cursor = attrs.get('cursor').value
        if attrs.get('style'):
            self.style = attrs.get('style').value
        if attrs.get('space'):
            self.space = attrs.get('space').value
        if attrs.get('fill-opacity'):
            self.fill_opacity = attrs.get('fill-opacity').value
        if attrs.get('rx'):
            self.rx = attrs.get('rx').value
        if attrs.get('ry'):
            self.ry = attrs.get('ry').value
        if attrs.get('shape-rendering'):
            self.shape_rendering = attrs.get('shape-rendering').value
        if attrs.get('width'):
            self.width = attrs.get('width').value
        if attrs.get('onmouseup'):
            self.onmouseup = attrs.get('onmouseup').value
        if attrs.get('stroke-miterlimit'):
            self.stroke_miterlimit = attrs.get('stroke-miterlimit').value
        if attrs.get('onactivate'):
            self.onactivate = attrs.get('onactivate').value
        if attrs.get('onmousemove'):
            self.onmousemove = attrs.get('onmousemove').value
        if attrs.get('onfocusin'):
            self.onfocusin = attrs.get('onfocusin').value
        if attrs.get('opacity'):
            self.opacity = attrs.get('opacity').value
        if attrs.get('onclick'):
            self.onclick = attrs.get('onclick').value
        if attrs.get('onmouseout'):
            self.onmouseout = attrs.get('onmouseout').value
        if attrs.get('clip-path'):
            self.clip_path = attrs.get('clip-path').value
        if attrs.get('visibility'):
            self.visibility = attrs.get('visibility').value
        if attrs.get('systemLanguage'):
            self.systemLanguage = attrs.get('systemLanguage').value
        if attrs.get('clip-rule'):
            self.clip_rule = attrs.get('clip-rule').value
        if attrs.get('onmouseover'):
            self.onmouseover = attrs.get('onmouseover').value
        if attrs.get('image-rendering'):
            self.image_rendering = attrs.get('image-rendering').value
        if attrs.get('externalResourcesRequired'):
            if attrs.get('externalResourcesRequired').value in ('true', '1'):
                self.externalResourcesRequired = True
            elif attrs.get('externalResourcesRequired').value in ('false', '0'):
                self.externalResourcesRequired = False
            else:
                raise ValueError('Bad boolean attribute (externalResourcesRequired)')
        if attrs.get('height'):
            self.height = attrs.get('height').value
        if attrs.get('class'):
            self.classxx = attrs.get('class').value
        if attrs.get('lang'):
            self.lang = attrs.get('lang').value
        if attrs.get('stroke-opacity'):
            self.stroke_opacity = attrs.get('stroke-opacity').value
        if attrs.get('fill-rule'):
            self.fill_rule = attrs.get('fill-rule').value
        if attrs.get('mask'):
            self.mask = attrs.get('mask').value
        if attrs.get('stroke-dashoffset'):
            self.stroke_dashoffset = attrs.get('stroke-dashoffset').value
        if attrs.get('filter'):
            self.filter = attrs.get('filter').value
        if attrs.get('pointer-events'):
            self.pointer_events = attrs.get('pointer-events').value
        if attrs.get('requiredFeatures'):
            self.requiredFeatures = attrs.get('requiredFeatures').value
        if attrs.get('base'):
            self.base = attrs.get('base').value
        if attrs.get('stroke-dasharray'):
            self.stroke_dasharray = attrs.get('stroke-dasharray').value
        if attrs.get('y'):
            self.y = attrs.get('y').value
        if attrs.get('x'):
            self.x = attrs.get('x').value
        if attrs.get('display'):
            self.display = attrs.get('display').value
        if attrs.get('onmousedown'):
            self.onmousedown = attrs.get('onmousedown').value
        if attrs.get('color-interpolation'):
            self.color_interpolation = attrs.get('color-interpolation').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animate':
            obj_ = animateType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'set':
            obj_ = setType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animateMotion':
            obj_ = animateMotionType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animateColor':
            obj_ = animateColorType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animateTransform':
            obj_ = animateTransformType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_animateTransformType(obj_)    # validate type animateTransformType
# end class rectType


class circleType(object):
    subclass = None
    superclass = None
    def __init__(self, stroke_linejoin=None, text_rendering=None, color_rendering=None, requiredExtensions=None, color=None, onfocusout=None, shape_rendering=None, cy=None, cx=None, onload=None, stroke_width=None, id=None, fill=None, cursor=None, style=None, space=None, fill_opacity=None, transform=None, r=None, stroke_miterlimit=None, onactivate=None, onmousemove=None, onfocusin=None, opacity=None, onclick=None, onmouseout=None, clip_path=None, stroke_linecap=None, visibility=None, systemLanguage=None, clip_rule=None, onmouseover=None, image_rendering=None, externalResourcesRequired=None, onmousedown=None, classxx=None, lang=None, stroke_opacity=None, fill_rule=None, mask=None, stroke_dashoffset=None, stroke=None, filter=None, pointer_events=None, requiredFeatures=None, base=None, stroke_dasharray=None, onmouseup=None, display=None, color_interpolation=None):
        self.internalName = "circle"
        self.stroke_linejoin = stroke_linejoin
        self.text_rendering = text_rendering
        self.color_rendering = color_rendering
        self.requiredExtensions = requiredExtensions
        self.color = color
        self.onfocusout = onfocusout
        self.shape_rendering = shape_rendering
        self.cy = cy
        self.cx = cx
        self.onload = onload
        self.stroke_width = stroke_width
        self.id = id
        self.fill = fill
        self.cursor = cursor
        self.style = style
        self.space = space
        self.fill_opacity = fill_opacity
        self.transform = transform
        self.r = r
        self.stroke_miterlimit = stroke_miterlimit
        self.onactivate = onactivate
        self.onmousemove = onmousemove
        self.onfocusin = onfocusin
        self.opacity = opacity
        self.onclick = onclick
        self.onmouseout = onmouseout
        self.clip_path = clip_path
        self.stroke_linecap = stroke_linecap
        self.visibility = visibility
        self.systemLanguage = systemLanguage
        self.clip_rule = clip_rule
        self.onmouseover = onmouseover
        self.image_rendering = image_rendering
        self.externalResourcesRequired = externalResourcesRequired
        self.onmousedown = onmousedown
        self.classxx = classxx
        self.lang = lang
        self.stroke_opacity = stroke_opacity
        self.fill_rule = fill_rule
        self.mask = mask
        self.stroke_dashoffset = stroke_dashoffset
        self.stroke = stroke
        self.filter = filter
        self.pointer_events = pointer_events
        self.requiredFeatures = requiredFeatures
        self.base = base
        self.stroke_dasharray = stroke_dasharray
        self.onmouseup = onmouseup
        self.display = display
        self.color_interpolation = color_interpolation
        self.internalElements = []
    def factory(*args_, **kwargs_):
        if circleType.subclass:
            return circleType.subclass(*args_, **kwargs_)
        else:
            return circleType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def addElement(self, value): self.internalElements.append(value)
    def validate_animateTransformType(self, value):
        # validate type animateTransformType
        pass
    def get_stroke_linejoin(self): return self.stroke_linejoin
    def set_stroke_linejoin(self, stroke_linejoin): self.stroke_linejoin = stroke_linejoin
    def get_text_rendering(self): return self.text_rendering
    def set_text_rendering(self, text_rendering): self.text_rendering = text_rendering
    def get_color_rendering(self): return self.color_rendering
    def set_color_rendering(self, color_rendering): self.color_rendering = color_rendering
    def get_requiredExtensions(self): return self.requiredExtensions
    def set_requiredExtensions(self, requiredExtensions): self.requiredExtensions = requiredExtensions
    def get_color(self): return self.color
    def set_color(self, color): self.color = color
    def get_onfocusout(self): return self.onfocusout
    def set_onfocusout(self, onfocusout): self.onfocusout = onfocusout
    def get_shape_rendering(self): return self.shape_rendering
    def set_shape_rendering(self, shape_rendering): self.shape_rendering = shape_rendering
    def get_cy(self): return self.cy
    def set_cy(self, cy): self.cy = cy
    def get_cx(self): return self.cx
    def set_cx(self, cx): self.cx = cx
    def get_onload(self): return self.onload
    def set_onload(self, onload): self.onload = onload
    def get_stroke_width(self): return self.stroke_width
    def set_stroke_width(self, stroke_width): self.stroke_width = stroke_width
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_fill(self): return self.fill
    def set_fill(self, fill): self.fill = fill
    def get_cursor(self): return self.cursor
    def set_cursor(self, cursor): self.cursor = cursor
    def get_style(self): return self.style
    def set_style(self, style): self.style = style
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_fill_opacity(self): return self.fill_opacity
    def set_fill_opacity(self, fill_opacity): self.fill_opacity = fill_opacity
    def get_transform(self): return self.transform
    def set_transform(self, transform): self.transform = transform
    def get_r(self): return self.r
    def set_r(self, r): self.r = r
    def get_stroke_miterlimit(self): return self.stroke_miterlimit
    def set_stroke_miterlimit(self, stroke_miterlimit): self.stroke_miterlimit = stroke_miterlimit
    def get_onactivate(self): return self.onactivate
    def set_onactivate(self, onactivate): self.onactivate = onactivate
    def get_onmousemove(self): return self.onmousemove
    def set_onmousemove(self, onmousemove): self.onmousemove = onmousemove
    def get_onfocusin(self): return self.onfocusin
    def set_onfocusin(self, onfocusin): self.onfocusin = onfocusin
    def get_opacity(self): return self.opacity
    def set_opacity(self, opacity): self.opacity = opacity
    def get_onclick(self): return self.onclick
    def set_onclick(self, onclick): self.onclick = onclick
    def get_onmouseout(self): return self.onmouseout
    def set_onmouseout(self, onmouseout): self.onmouseout = onmouseout
    def get_clip_path(self): return self.clip_path
    def set_clip_path(self, clip_path): self.clip_path = clip_path
    def get_stroke_linecap(self): return self.stroke_linecap
    def set_stroke_linecap(self, stroke_linecap): self.stroke_linecap = stroke_linecap
    def get_visibility(self): return self.visibility
    def set_visibility(self, visibility): self.visibility = visibility
    def get_systemLanguage(self): return self.systemLanguage
    def set_systemLanguage(self, systemLanguage): self.systemLanguage = systemLanguage
    def get_clip_rule(self): return self.clip_rule
    def set_clip_rule(self, clip_rule): self.clip_rule = clip_rule
    def get_onmouseover(self): return self.onmouseover
    def set_onmouseover(self, onmouseover): self.onmouseover = onmouseover
    def get_image_rendering(self): return self.image_rendering
    def set_image_rendering(self, image_rendering): self.image_rendering = image_rendering
    def get_externalResourcesRequired(self): return self.externalResourcesRequired
    def set_externalResourcesRequired(self, externalResourcesRequired): self.externalResourcesRequired = externalResourcesRequired
    def get_onmousedown(self): return self.onmousedown
    def set_onmousedown(self, onmousedown): self.onmousedown = onmousedown
    def get_class(self): return self.classxx
    def set_class(self, classxx): self.classxx = classxx
    def get_lang(self): return self.lang
    def set_lang(self, lang): self.lang = lang
    def get_stroke_opacity(self): return self.stroke_opacity
    def set_stroke_opacity(self, stroke_opacity): self.stroke_opacity = stroke_opacity
    def get_fill_rule(self): return self.fill_rule
    def set_fill_rule(self, fill_rule): self.fill_rule = fill_rule
    def get_mask(self): return self.mask
    def set_mask(self, mask): self.mask = mask
    def get_stroke_dashoffset(self): return self.stroke_dashoffset
    def set_stroke_dashoffset(self, stroke_dashoffset): self.stroke_dashoffset = stroke_dashoffset
    def get_stroke(self): return self.stroke
    def set_stroke(self, stroke): self.stroke = stroke
    def get_filter(self): return self.filter
    def set_filter(self, filter): self.filter = filter
    def get_pointer_events(self): return self.pointer_events
    def set_pointer_events(self, pointer_events): self.pointer_events = pointer_events
    def get_requiredFeatures(self): return self.requiredFeatures
    def set_requiredFeatures(self, requiredFeatures): self.requiredFeatures = requiredFeatures
    def get_base(self): return self.base
    def set_base(self, base): self.base = base
    def get_stroke_dasharray(self): return self.stroke_dasharray
    def set_stroke_dasharray(self, stroke_dasharray): self.stroke_dasharray = stroke_dasharray
    def get_onmouseup(self): return self.onmouseup
    def set_onmouseup(self, onmouseup): self.onmouseup = onmouseup
    def get_display(self): return self.display
    def set_display(self, display): self.display = display
    def get_color_interpolation(self): return self.color_interpolation
    def set_color_interpolation(self, color_interpolation): self.color_interpolation = color_interpolation
    def export(self, outfile, level, namespace_='svg:', name_='circleType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, self.internalName, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='circleType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, self.internalName))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='svg:', name_='circleType'):
        if self.stroke_linejoin is not None:
            outfile.write(' stroke-linejoin=%s' % (quote_attrib(self.stroke_linejoin), ))
        if self.text_rendering is not None:
            outfile.write(' text-rendering=%s' % (quote_attrib(self.text_rendering), ))
        if self.color_rendering is not None:
            outfile.write(' color-rendering=%s' % (quote_attrib(self.color_rendering), ))
        if self.requiredExtensions is not None:
            outfile.write(' requiredExtensions=%s' % (quote_attrib(self.requiredExtensions), ))
        if self.color is not None:
            outfile.write(' color=%s' % (quote_attrib(self.color), ))
        if self.onfocusout is not None:
            outfile.write(' onfocusout=%s' % (quote_attrib(self.onfocusout), ))
        if self.shape_rendering is not None:
            outfile.write(' shape-rendering=%s' % (quote_attrib(self.shape_rendering), ))
        if self.cy is not None:
            outfile.write(' cy=%s' % (quote_attrib(self.cy), ))
        if self.cx is not None:
            outfile.write(' cx=%s' % (quote_attrib(self.cx), ))
        if self.onload is not None:
            outfile.write(' onload=%s' % (quote_attrib(self.onload), ))
        if self.stroke_width is not None:
            outfile.write(' stroke-width=%s' % (quote_attrib(self.stroke_width), ))
        if self.id is not None:
            outfile.write(' id=%s' % (quote_attrib(self.id), ))
        if self.fill is not None:
            outfile.write(' fill=%s' % (quote_attrib(self.fill), ))
        if self.cursor is not None:
            outfile.write(' cursor=%s' % (quote_attrib(self.cursor), ))
        if self.style is not None:
            outfile.write(' style=%s' % (quote_attrib(self.style), ))
        if self.space is not None:
            outfile.write(' space=%s' % (quote_attrib(self.space), ))
        if self.fill_opacity is not None:
            outfile.write(' fill-opacity=%s' % (quote_attrib(self.fill_opacity), ))
        if self.transform is not None:
            outfile.write(' transform=%s' % (quote_attrib(self.transform), ))
        outfile.write(' r=%s' % (quote_attrib(self.r), ))
        if self.stroke_miterlimit is not None:
            outfile.write(' stroke-miterlimit=%s' % (quote_attrib(self.stroke_miterlimit), ))
        if self.onactivate is not None:
            outfile.write(' onactivate=%s' % (quote_attrib(self.onactivate), ))
        if self.onmousemove is not None:
            outfile.write(' onmousemove=%s' % (quote_attrib(self.onmousemove), ))
        if self.onfocusin is not None:
            outfile.write(' onfocusin=%s' % (quote_attrib(self.onfocusin), ))
        if self.opacity is not None:
            outfile.write(' opacity=%s' % (quote_attrib(self.opacity), ))
        if self.onclick is not None:
            outfile.write(' onclick=%s' % (quote_attrib(self.onclick), ))
        if self.onmouseout is not None:
            outfile.write(' onmouseout=%s' % (quote_attrib(self.onmouseout), ))
        if self.clip_path is not None:
            outfile.write(' clip-path=%s' % (quote_attrib(self.clip_path), ))
        if self.stroke_linecap is not None:
            outfile.write(' stroke-linecap=%s' % (quote_attrib(self.stroke_linecap), ))
        if self.visibility is not None:
            outfile.write(' visibility=%s' % (quote_attrib(self.visibility), ))
        if self.systemLanguage is not None:
            outfile.write(' systemLanguage=%s' % (quote_attrib(self.systemLanguage), ))
        if self.clip_rule is not None:
            outfile.write(' clip-rule=%s' % (quote_attrib(self.clip_rule), ))
        if self.onmouseover is not None:
            outfile.write(' onmouseover=%s' % (quote_attrib(self.onmouseover), ))
        if self.image_rendering is not None:
            outfile.write(' image-rendering=%s' % (quote_attrib(self.image_rendering), ))
        if self.externalResourcesRequired is not None:
            outfile.write(' externalResourcesRequired="%s"' % str_lower(str(self.externalResourcesRequired)))
        if self.onmousedown is not None:
            outfile.write(' onmousedown=%s' % (quote_attrib(self.onmousedown), ))
        if self.classxx is not None:
            outfile.write(' class=%s' % (quote_attrib(self.classxx), ))
        if self.lang is not None:
            outfile.write(' lang=%s' % (quote_attrib(self.lang), ))
        if self.stroke_opacity is not None:
            outfile.write(' stroke-opacity=%s' % (quote_attrib(self.stroke_opacity), ))
        if self.fill_rule is not None:
            outfile.write(' fill-rule=%s' % (quote_attrib(self.fill_rule), ))
        if self.mask is not None:
            outfile.write(' mask=%s' % (quote_attrib(self.mask), ))
        if self.stroke_dashoffset is not None:
            outfile.write(' stroke-dashoffset=%s' % (quote_attrib(self.stroke_dashoffset), ))
        if self.stroke is not None:
            outfile.write(' stroke=%s' % (quote_attrib(self.stroke), ))
        if self.filter is not None:
            outfile.write(' filter=%s' % (quote_attrib(self.filter), ))
        if self.pointer_events is not None:
            outfile.write(' pointer-events=%s' % (quote_attrib(self.pointer_events), ))
        if self.requiredFeatures is not None:
            outfile.write(' requiredFeatures=%s' % (quote_attrib(self.requiredFeatures), ))
        if self.base is not None:
            outfile.write(' base=%s' % (quote_attrib(self.base), ))
        if self.stroke_dasharray is not None:
            outfile.write(' stroke-dasharray=%s' % (quote_attrib(self.stroke_dasharray), ))
        if self.onmouseup is not None:
            outfile.write(' onmouseup=%s' % (quote_attrib(self.onmouseup), ))
        if self.display is not None:
            outfile.write(' display=%s' % (quote_attrib(self.display), ))
        if self.color_interpolation is not None:
            outfile.write(' color-interpolation=%s' % (quote_attrib(self.color_interpolation), ))
    def exportChildren(self, outfile, level, namespace_='svg:', name_='circleType'):
        for element_ in self.internalElements:
            element_.export(outfile, level, namespace_, name_='animate')
    def hasContent_(self):
        if (
         len(self.internalElements)>0
            ):
            return True
        else:
            return False
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('stroke-linejoin'):
            self.stroke_linejoin = attrs.get('stroke-linejoin').value
        if attrs.get('text-rendering'):
            self.text_rendering = attrs.get('text-rendering').value
        if attrs.get('color-rendering'):
            self.color_rendering = attrs.get('color-rendering').value
        if attrs.get('requiredExtensions'):
            self.requiredExtensions = attrs.get('requiredExtensions').value
        if attrs.get('color'):
            self.color = attrs.get('color').value
        if attrs.get('onfocusout'):
            self.onfocusout = attrs.get('onfocusout').value
        if attrs.get('shape-rendering'):
            self.shape_rendering = attrs.get('shape-rendering').value
        if attrs.get('cy'):
            self.cy = attrs.get('cy').value
        if attrs.get('cx'):
            self.cx = attrs.get('cx').value
        if attrs.get('onload'):
            self.onload = attrs.get('onload').value
        if attrs.get('stroke-width'):
            self.stroke_width = attrs.get('stroke-width').value
        if attrs.get('id'):
            self.id = attrs.get('id').value
        if attrs.get('fill'):
            self.fill = attrs.get('fill').value
        if attrs.get('cursor'):
            self.cursor = attrs.get('cursor').value
        if attrs.get('style'):
            self.style = attrs.get('style').value
        if attrs.get('space'):
            self.space = attrs.get('space').value
        if attrs.get('fill-opacity'):
            self.fill_opacity = attrs.get('fill-opacity').value
        if attrs.get('transform'):
            self.transform = attrs.get('transform').value
        if attrs.get('r'):
            self.r = attrs.get('r').value
        if attrs.get('stroke-miterlimit'):
            self.stroke_miterlimit = attrs.get('stroke-miterlimit').value
        if attrs.get('onactivate'):
            self.onactivate = attrs.get('onactivate').value
        if attrs.get('onmousemove'):
            self.onmousemove = attrs.get('onmousemove').value
        if attrs.get('onfocusin'):
            self.onfocusin = attrs.get('onfocusin').value
        if attrs.get('opacity'):
            self.opacity = attrs.get('opacity').value
        if attrs.get('onclick'):
            self.onclick = attrs.get('onclick').value
        if attrs.get('onmouseout'):
            self.onmouseout = attrs.get('onmouseout').value
        if attrs.get('clip-path'):
            self.clip_path = attrs.get('clip-path').value
        if attrs.get('stroke-linecap'):
            self.stroke_linecap = attrs.get('stroke-linecap').value
        if attrs.get('visibility'):
            self.visibility = attrs.get('visibility').value
        if attrs.get('systemLanguage'):
            self.systemLanguage = attrs.get('systemLanguage').value
        if attrs.get('clip-rule'):
            self.clip_rule = attrs.get('clip-rule').value
        if attrs.get('onmouseover'):
            self.onmouseover = attrs.get('onmouseover').value
        if attrs.get('image-rendering'):
            self.image_rendering = attrs.get('image-rendering').value
        if attrs.get('externalResourcesRequired'):
            if attrs.get('externalResourcesRequired').value in ('true', '1'):
                self.externalResourcesRequired = True
            elif attrs.get('externalResourcesRequired').value in ('false', '0'):
                self.externalResourcesRequired = False
            else:
                raise ValueError('Bad boolean attribute (externalResourcesRequired)')
        if attrs.get('onmousedown'):
            self.onmousedown = attrs.get('onmousedown').value
        if attrs.get('class'):
            self.classxx = attrs.get('class').value
        if attrs.get('lang'):
            self.lang = attrs.get('lang').value
        if attrs.get('stroke-opacity'):
            self.stroke_opacity = attrs.get('stroke-opacity').value
        if attrs.get('fill-rule'):
            self.fill_rule = attrs.get('fill-rule').value
        if attrs.get('mask'):
            self.mask = attrs.get('mask').value
        if attrs.get('stroke-dashoffset'):
            self.stroke_dashoffset = attrs.get('stroke-dashoffset').value
        if attrs.get('stroke'):
            self.stroke = attrs.get('stroke').value
        if attrs.get('filter'):
            self.filter = attrs.get('filter').value
        if attrs.get('pointer-events'):
            self.pointer_events = attrs.get('pointer-events').value
        if attrs.get('requiredFeatures'):
            self.requiredFeatures = attrs.get('requiredFeatures').value
        if attrs.get('base'):
            self.base = attrs.get('base').value
        if attrs.get('stroke-dasharray'):
            self.stroke_dasharray = attrs.get('stroke-dasharray').value
        if attrs.get('onmouseup'):
            self.onmouseup = attrs.get('onmouseup').value
        if attrs.get('display'):
            self.display = attrs.get('display').value
        if attrs.get('color-interpolation'):
            self.color_interpolation = attrs.get('color-interpolation').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animate':
            obj_ = animateType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'set':
            obj_ = setType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animateMotion':
            obj_ = animateMotionType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animateColor':
            obj_ = animateColorType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animateTransform':
            obj_ = animateTransformType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_animateTransformType(obj_)    # validate type animateTransformType
# end class circleType


class ellipseType(object):
    subclass = None
    superclass = None
    def __init__(self, stroke_linejoin=None, text_rendering=None, color_rendering=None, requiredExtensions=None, color=None, onfocusout=None, ry=None, cy=None, cx=None, onload=None, stroke_width=None, id=None, fill=None, cursor=None, style=None, space=None, fill_opacity=None, rx=None, transform=None, onmouseup=None, stroke_miterlimit=None, onactivate=None, onmousemove=None, onfocusin=None, opacity=None, onclick=None, onmouseout=None, clip_path=None, stroke_linecap=None, visibility=None, systemLanguage=None, clip_rule=None, onmouseover=None, image_rendering=None, externalResourcesRequired=None, shape_rendering=None, classxx=None, lang=None, stroke_opacity=None, fill_rule=None, mask=None, stroke_dashoffset=None, stroke=None, filter=None, pointer_events=None, requiredFeatures=None, base=None, stroke_dasharray=None, display=None, onmousedown=None, color_interpolation=None):
        self.internalName = "ellipse"
        self.stroke_linejoin = stroke_linejoin
        self.text_rendering = text_rendering
        self.color_rendering = color_rendering
        self.requiredExtensions = requiredExtensions
        self.color = color
        self.onfocusout = onfocusout
        self.ry = ry
        self.cy = cy
        self.cx = cx
        self.onload = onload
        self.stroke_width = stroke_width
        self.id = id
        self.fill = fill
        self.cursor = cursor
        self.style = style
        self.space = space
        self.fill_opacity = fill_opacity
        self.rx = rx
        self.transform = transform
        self.onmouseup = onmouseup
        self.stroke_miterlimit = stroke_miterlimit
        self.onactivate = onactivate
        self.onmousemove = onmousemove
        self.onfocusin = onfocusin
        self.opacity = opacity
        self.onclick = onclick
        self.onmouseout = onmouseout
        self.clip_path = clip_path
        self.stroke_linecap = stroke_linecap
        self.visibility = visibility
        self.systemLanguage = systemLanguage
        self.clip_rule = clip_rule
        self.onmouseover = onmouseover
        self.image_rendering = image_rendering
        self.externalResourcesRequired = externalResourcesRequired
        self.shape_rendering = shape_rendering
        self.classxx = classxx
        self.lang = lang
        self.stroke_opacity = stroke_opacity
        self.fill_rule = fill_rule
        self.mask = mask
        self.stroke_dashoffset = stroke_dashoffset
        self.stroke = stroke
        self.filter = filter
        self.pointer_events = pointer_events
        self.requiredFeatures = requiredFeatures
        self.base = base
        self.stroke_dasharray = stroke_dasharray
        self.display = display
        self.onmousedown = onmousedown
        self.color_interpolation = color_interpolation
        self.internalElements = []
    def factory(*args_, **kwargs_):
        if ellipseType.subclass:
            return ellipseType.subclass(*args_, **kwargs_)
        else:
            return ellipseType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def addElement(self, value): self.internalElements.append(value)
    def validate_animateTransformType(self, value):
        # validate type animateTransformType
        pass
    def get_stroke_linejoin(self): return self.stroke_linejoin
    def set_stroke_linejoin(self, stroke_linejoin): self.stroke_linejoin = stroke_linejoin
    def get_text_rendering(self): return self.text_rendering
    def set_text_rendering(self, text_rendering): self.text_rendering = text_rendering
    def get_color_rendering(self): return self.color_rendering
    def set_color_rendering(self, color_rendering): self.color_rendering = color_rendering
    def get_requiredExtensions(self): return self.requiredExtensions
    def set_requiredExtensions(self, requiredExtensions): self.requiredExtensions = requiredExtensions
    def get_color(self): return self.color
    def set_color(self, color): self.color = color
    def get_onfocusout(self): return self.onfocusout
    def set_onfocusout(self, onfocusout): self.onfocusout = onfocusout
    def get_ry(self): return self.ry
    def set_ry(self, ry): self.ry = ry
    def get_cy(self): return self.cy
    def set_cy(self, cy): self.cy = cy
    def get_cx(self): return self.cx
    def set_cx(self, cx): self.cx = cx
    def get_onload(self): return self.onload
    def set_onload(self, onload): self.onload = onload
    def get_stroke_width(self): return self.stroke_width
    def set_stroke_width(self, stroke_width): self.stroke_width = stroke_width
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_fill(self): return self.fill
    def set_fill(self, fill): self.fill = fill
    def get_cursor(self): return self.cursor
    def set_cursor(self, cursor): self.cursor = cursor
    def get_style(self): return self.style
    def set_style(self, style): self.style = style
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_fill_opacity(self): return self.fill_opacity
    def set_fill_opacity(self, fill_opacity): self.fill_opacity = fill_opacity
    def get_rx(self): return self.rx
    def set_rx(self, rx): self.rx = rx
    def get_transform(self): return self.transform
    def set_transform(self, transform): self.transform = transform
    def get_onmouseup(self): return self.onmouseup
    def set_onmouseup(self, onmouseup): self.onmouseup = onmouseup
    def get_stroke_miterlimit(self): return self.stroke_miterlimit
    def set_stroke_miterlimit(self, stroke_miterlimit): self.stroke_miterlimit = stroke_miterlimit
    def get_onactivate(self): return self.onactivate
    def set_onactivate(self, onactivate): self.onactivate = onactivate
    def get_onmousemove(self): return self.onmousemove
    def set_onmousemove(self, onmousemove): self.onmousemove = onmousemove
    def get_onfocusin(self): return self.onfocusin
    def set_onfocusin(self, onfocusin): self.onfocusin = onfocusin
    def get_opacity(self): return self.opacity
    def set_opacity(self, opacity): self.opacity = opacity
    def get_onclick(self): return self.onclick
    def set_onclick(self, onclick): self.onclick = onclick
    def get_onmouseout(self): return self.onmouseout
    def set_onmouseout(self, onmouseout): self.onmouseout = onmouseout
    def get_clip_path(self): return self.clip_path
    def set_clip_path(self, clip_path): self.clip_path = clip_path
    def get_stroke_linecap(self): return self.stroke_linecap
    def set_stroke_linecap(self, stroke_linecap): self.stroke_linecap = stroke_linecap
    def get_visibility(self): return self.visibility
    def set_visibility(self, visibility): self.visibility = visibility
    def get_systemLanguage(self): return self.systemLanguage
    def set_systemLanguage(self, systemLanguage): self.systemLanguage = systemLanguage
    def get_clip_rule(self): return self.clip_rule
    def set_clip_rule(self, clip_rule): self.clip_rule = clip_rule
    def get_onmouseover(self): return self.onmouseover
    def set_onmouseover(self, onmouseover): self.onmouseover = onmouseover
    def get_image_rendering(self): return self.image_rendering
    def set_image_rendering(self, image_rendering): self.image_rendering = image_rendering
    def get_externalResourcesRequired(self): return self.externalResourcesRequired
    def set_externalResourcesRequired(self, externalResourcesRequired): self.externalResourcesRequired = externalResourcesRequired
    def get_shape_rendering(self): return self.shape_rendering
    def set_shape_rendering(self, shape_rendering): self.shape_rendering = shape_rendering
    def get_class(self): return self.classxx
    def set_class(self, classxx): self.classxx = classxx
    def get_lang(self): return self.lang
    def set_lang(self, lang): self.lang = lang
    def get_stroke_opacity(self): return self.stroke_opacity
    def set_stroke_opacity(self, stroke_opacity): self.stroke_opacity = stroke_opacity
    def get_fill_rule(self): return self.fill_rule
    def set_fill_rule(self, fill_rule): self.fill_rule = fill_rule
    def get_mask(self): return self.mask
    def set_mask(self, mask): self.mask = mask
    def get_stroke_dashoffset(self): return self.stroke_dashoffset
    def set_stroke_dashoffset(self, stroke_dashoffset): self.stroke_dashoffset = stroke_dashoffset
    def get_stroke(self): return self.stroke
    def set_stroke(self, stroke): self.stroke = stroke
    def get_filter(self): return self.filter
    def set_filter(self, filter): self.filter = filter
    def get_pointer_events(self): return self.pointer_events
    def set_pointer_events(self, pointer_events): self.pointer_events = pointer_events
    def get_requiredFeatures(self): return self.requiredFeatures
    def set_requiredFeatures(self, requiredFeatures): self.requiredFeatures = requiredFeatures
    def get_base(self): return self.base
    def set_base(self, base): self.base = base
    def get_stroke_dasharray(self): return self.stroke_dasharray
    def set_stroke_dasharray(self, stroke_dasharray): self.stroke_dasharray = stroke_dasharray
    def get_display(self): return self.display
    def set_display(self, display): self.display = display
    def get_onmousedown(self): return self.onmousedown
    def set_onmousedown(self, onmousedown): self.onmousedown = onmousedown
    def get_color_interpolation(self): return self.color_interpolation
    def set_color_interpolation(self, color_interpolation): self.color_interpolation = color_interpolation
    def export(self, outfile, level, namespace_='svg:', name_='ellipseType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, self.internalName, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='ellipseType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, self.internalName))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='svg:', name_='ellipseType'):
        if self.stroke_linejoin is not None:
            outfile.write(' stroke-linejoin=%s' % (quote_attrib(self.stroke_linejoin), ))
        if self.text_rendering is not None:
            outfile.write(' text-rendering=%s' % (quote_attrib(self.text_rendering), ))
        if self.color_rendering is not None:
            outfile.write(' color-rendering=%s' % (quote_attrib(self.color_rendering), ))
        if self.requiredExtensions is not None:
            outfile.write(' requiredExtensions=%s' % (quote_attrib(self.requiredExtensions), ))
        if self.color is not None:
            outfile.write(' color=%s' % (quote_attrib(self.color), ))
        if self.onfocusout is not None:
            outfile.write(' onfocusout=%s' % (quote_attrib(self.onfocusout), ))
        outfile.write(' ry=%s' % (quote_attrib(self.ry), ))
        if self.cy is not None:
            outfile.write(' cy=%s' % (quote_attrib(self.cy), ))
        if self.cx is not None:
            outfile.write(' cx=%s' % (quote_attrib(self.cx), ))
        if self.onload is not None:
            outfile.write(' onload=%s' % (quote_attrib(self.onload), ))
        if self.stroke_width is not None:
            outfile.write(' stroke-width=%s' % (quote_attrib(self.stroke_width), ))
        if self.id is not None:
            outfile.write(' id=%s' % (quote_attrib(self.id), ))
        if self.fill is not None:
            outfile.write(' fill=%s' % (quote_attrib(self.fill), ))
        if self.cursor is not None:
            outfile.write(' cursor=%s' % (quote_attrib(self.cursor), ))
        if self.style is not None:
            outfile.write(' style=%s' % (quote_attrib(self.style), ))
        if self.space is not None:
            outfile.write(' space=%s' % (quote_attrib(self.space), ))
        if self.fill_opacity is not None:
            outfile.write(' fill-opacity=%s' % (quote_attrib(self.fill_opacity), ))
        outfile.write(' rx=%s' % (quote_attrib(self.rx), ))
        if self.transform is not None:
            outfile.write(' transform=%s' % (quote_attrib(self.transform), ))
        if self.onmouseup is not None:
            outfile.write(' onmouseup=%s' % (quote_attrib(self.onmouseup), ))
        if self.stroke_miterlimit is not None:
            outfile.write(' stroke-miterlimit=%s' % (quote_attrib(self.stroke_miterlimit), ))
        if self.onactivate is not None:
            outfile.write(' onactivate=%s' % (quote_attrib(self.onactivate), ))
        if self.onmousemove is not None:
            outfile.write(' onmousemove=%s' % (quote_attrib(self.onmousemove), ))
        if self.onfocusin is not None:
            outfile.write(' onfocusin=%s' % (quote_attrib(self.onfocusin), ))
        if self.opacity is not None:
            outfile.write(' opacity=%s' % (quote_attrib(self.opacity), ))
        if self.onclick is not None:
            outfile.write(' onclick=%s' % (quote_attrib(self.onclick), ))
        if self.onmouseout is not None:
            outfile.write(' onmouseout=%s' % (quote_attrib(self.onmouseout), ))
        if self.clip_path is not None:
            outfile.write(' clip-path=%s' % (quote_attrib(self.clip_path), ))
        if self.stroke_linecap is not None:
            outfile.write(' stroke-linecap=%s' % (quote_attrib(self.stroke_linecap), ))
        if self.visibility is not None:
            outfile.write(' visibility=%s' % (quote_attrib(self.visibility), ))
        if self.systemLanguage is not None:
            outfile.write(' systemLanguage=%s' % (quote_attrib(self.systemLanguage), ))
        if self.clip_rule is not None:
            outfile.write(' clip-rule=%s' % (quote_attrib(self.clip_rule), ))
        if self.onmouseover is not None:
            outfile.write(' onmouseover=%s' % (quote_attrib(self.onmouseover), ))
        if self.image_rendering is not None:
            outfile.write(' image-rendering=%s' % (quote_attrib(self.image_rendering), ))
        if self.externalResourcesRequired is not None:
            outfile.write(' externalResourcesRequired="%s"' % str_lower(str(self.externalResourcesRequired)))
        if self.shape_rendering is not None:
            outfile.write(' shape-rendering=%s' % (quote_attrib(self.shape_rendering), ))
        if self.classxx is not None:
            outfile.write(' class=%s' % (quote_attrib(self.classxx), ))
        if self.lang is not None:
            outfile.write(' lang=%s' % (quote_attrib(self.lang), ))
        if self.stroke_opacity is not None:
            outfile.write(' stroke-opacity=%s' % (quote_attrib(self.stroke_opacity), ))
        if self.fill_rule is not None:
            outfile.write(' fill-rule=%s' % (quote_attrib(self.fill_rule), ))
        if self.mask is not None:
            outfile.write(' mask=%s' % (quote_attrib(self.mask), ))
        if self.stroke_dashoffset is not None:
            outfile.write(' stroke-dashoffset=%s' % (quote_attrib(self.stroke_dashoffset), ))
        if self.stroke is not None:
            outfile.write(' stroke=%s' % (quote_attrib(self.stroke), ))
        if self.filter is not None:
            outfile.write(' filter=%s' % (quote_attrib(self.filter), ))
        if self.pointer_events is not None:
            outfile.write(' pointer-events=%s' % (quote_attrib(self.pointer_events), ))
        if self.requiredFeatures is not None:
            outfile.write(' requiredFeatures=%s' % (quote_attrib(self.requiredFeatures), ))
        if self.base is not None:
            outfile.write(' base=%s' % (quote_attrib(self.base), ))
        if self.stroke_dasharray is not None:
            outfile.write(' stroke-dasharray=%s' % (quote_attrib(self.stroke_dasharray), ))
        if self.display is not None:
            outfile.write(' display=%s' % (quote_attrib(self.display), ))
        if self.onmousedown is not None:
            outfile.write(' onmousedown=%s' % (quote_attrib(self.onmousedown), ))
        if self.color_interpolation is not None:
            outfile.write(' color-interpolation=%s' % (quote_attrib(self.color_interpolation), ))
    def exportChildren(self, outfile, level, namespace_='svg:', name_='ellipseType'):
        for element_ in self.internalElements:
            element_.export(outfile, level, namespace_, name_='animate')
    def hasContent_(self):
        if (
         len(self.internalElements)>0
            ):
            return True
        else:
            return False
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('stroke-linejoin'):
            self.stroke_linejoin = attrs.get('stroke-linejoin').value
        if attrs.get('text-rendering'):
            self.text_rendering = attrs.get('text-rendering').value
        if attrs.get('color-rendering'):
            self.color_rendering = attrs.get('color-rendering').value
        if attrs.get('requiredExtensions'):
            self.requiredExtensions = attrs.get('requiredExtensions').value
        if attrs.get('color'):
            self.color = attrs.get('color').value
        if attrs.get('onfocusout'):
            self.onfocusout = attrs.get('onfocusout').value
        if attrs.get('ry'):
            self.ry = attrs.get('ry').value
        if attrs.get('cy'):
            self.cy = attrs.get('cy').value
        if attrs.get('cx'):
            self.cx = attrs.get('cx').value
        if attrs.get('onload'):
            self.onload = attrs.get('onload').value
        if attrs.get('stroke-width'):
            self.stroke_width = attrs.get('stroke-width').value
        if attrs.get('id'):
            self.id = attrs.get('id').value
        if attrs.get('fill'):
            self.fill = attrs.get('fill').value
        if attrs.get('cursor'):
            self.cursor = attrs.get('cursor').value
        if attrs.get('style'):
            self.style = attrs.get('style').value
        if attrs.get('space'):
            self.space = attrs.get('space').value
        if attrs.get('fill-opacity'):
            self.fill_opacity = attrs.get('fill-opacity').value
        if attrs.get('rx'):
            self.rx = attrs.get('rx').value
        if attrs.get('transform'):
            self.transform = attrs.get('transform').value
        if attrs.get('onmouseup'):
            self.onmouseup = attrs.get('onmouseup').value
        if attrs.get('stroke-miterlimit'):
            self.stroke_miterlimit = attrs.get('stroke-miterlimit').value
        if attrs.get('onactivate'):
            self.onactivate = attrs.get('onactivate').value
        if attrs.get('onmousemove'):
            self.onmousemove = attrs.get('onmousemove').value
        if attrs.get('onfocusin'):
            self.onfocusin = attrs.get('onfocusin').value
        if attrs.get('opacity'):
            self.opacity = attrs.get('opacity').value
        if attrs.get('onclick'):
            self.onclick = attrs.get('onclick').value
        if attrs.get('onmouseout'):
            self.onmouseout = attrs.get('onmouseout').value
        if attrs.get('clip-path'):
            self.clip_path = attrs.get('clip-path').value
        if attrs.get('stroke-linecap'):
            self.stroke_linecap = attrs.get('stroke-linecap').value
        if attrs.get('visibility'):
            self.visibility = attrs.get('visibility').value
        if attrs.get('systemLanguage'):
            self.systemLanguage = attrs.get('systemLanguage').value
        if attrs.get('clip-rule'):
            self.clip_rule = attrs.get('clip-rule').value
        if attrs.get('onmouseover'):
            self.onmouseover = attrs.get('onmouseover').value
        if attrs.get('image-rendering'):
            self.image_rendering = attrs.get('image-rendering').value
        if attrs.get('externalResourcesRequired'):
            if attrs.get('externalResourcesRequired').value in ('true', '1'):
                self.externalResourcesRequired = True
            elif attrs.get('externalResourcesRequired').value in ('false', '0'):
                self.externalResourcesRequired = False
            else:
                raise ValueError('Bad boolean attribute (externalResourcesRequired)')
        if attrs.get('shape-rendering'):
            self.shape_rendering = attrs.get('shape-rendering').value
        if attrs.get('class'):
            self.classxx = attrs.get('class').value
        if attrs.get('lang'):
            self.lang = attrs.get('lang').value
        if attrs.get('stroke-opacity'):
            self.stroke_opacity = attrs.get('stroke-opacity').value
        if attrs.get('fill-rule'):
            self.fill_rule = attrs.get('fill-rule').value
        if attrs.get('mask'):
            self.mask = attrs.get('mask').value
        if attrs.get('stroke-dashoffset'):
            self.stroke_dashoffset = attrs.get('stroke-dashoffset').value
        if attrs.get('stroke'):
            self.stroke = attrs.get('stroke').value
        if attrs.get('filter'):
            self.filter = attrs.get('filter').value
        if attrs.get('pointer-events'):
            self.pointer_events = attrs.get('pointer-events').value
        if attrs.get('requiredFeatures'):
            self.requiredFeatures = attrs.get('requiredFeatures').value
        if attrs.get('base'):
            self.base = attrs.get('base').value
        if attrs.get('stroke-dasharray'):
            self.stroke_dasharray = attrs.get('stroke-dasharray').value
        if attrs.get('display'):
            self.display = attrs.get('display').value
        if attrs.get('onmousedown'):
            self.onmousedown = attrs.get('onmousedown').value
        if attrs.get('color-interpolation'):
            self.color_interpolation = attrs.get('color-interpolation').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animate':
            obj_ = animateType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'set':
            obj_ = setType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animateMotion':
            obj_ = animateMotionType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animateColor':
            obj_ = animateColorType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animateTransform':
            obj_ = animateTransformType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_animateTransformType(obj_)    # validate type animateTransformType
# end class ellipseType


class lineType(object):
    subclass = None
    superclass = None
    def __init__(self, stroke_linejoin=None, text_rendering=None, color_rendering=None, requiredExtensions=None, color=None, marker_start=None, shape_rendering=None, stroke=None, stroke_linecap=None, onload=None, y1=None, y2=None, id=None, fill=None, cursor=None, style=None, stroke_width=None, space=None, fill_opacity=None, transform=None, onmouseup=None, stroke_miterlimit=None, onactivate=None, onfocusout=None, onmousemove=None, marker_mid=None, opacity=None, onclick=None, onmouseout=None, clip_path=None, visibility=None, systemLanguage=None, clip_rule=None, onmouseover=None, image_rendering=None, x2=None, externalResourcesRequired=None, x1=None, classxx=None, lang=None, marker_end=None, stroke_opacity=None, fill_rule=None, mask=None, stroke_dashoffset=None, onfocusin=None, filter=None, pointer_events=None, requiredFeatures=None, base=None, stroke_dasharray=None, display=None, onmousedown=None, color_interpolation=None):
        self.internalName = "line"
        self.stroke_linejoin = stroke_linejoin
        self.text_rendering = text_rendering
        self.color_rendering = color_rendering
        self.requiredExtensions = requiredExtensions
        self.color = color
        self.marker_start = marker_start
        self.shape_rendering = shape_rendering
        self.stroke = stroke
        self.stroke_linecap = stroke_linecap
        self.onload = onload
        self.y1 = y1
        self.y2 = y2
        self.id = id
        self.fill = fill
        self.cursor = cursor
        self.style = style
        self.stroke_width = stroke_width
        self.space = space
        self.fill_opacity = fill_opacity
        self.transform = transform
        self.onmouseup = onmouseup
        self.stroke_miterlimit = stroke_miterlimit
        self.onactivate = onactivate
        self.onfocusout = onfocusout
        self.onmousemove = onmousemove
        self.marker_mid = marker_mid
        self.opacity = opacity
        self.onclick = onclick
        self.onmouseout = onmouseout
        self.clip_path = clip_path
        self.visibility = visibility
        self.systemLanguage = systemLanguage
        self.clip_rule = clip_rule
        self.onmouseover = onmouseover
        self.image_rendering = image_rendering
        self.x2 = x2
        self.externalResourcesRequired = externalResourcesRequired
        self.x1 = x1
        self.classxx = classxx
        self.lang = lang
        self.marker_end = marker_end
        self.stroke_opacity = stroke_opacity
        self.fill_rule = fill_rule
        self.mask = mask
        self.stroke_dashoffset = stroke_dashoffset
        self.onfocusin = onfocusin
        self.filter = filter
        self.pointer_events = pointer_events
        self.requiredFeatures = requiredFeatures
        self.base = base
        self.stroke_dasharray = stroke_dasharray
        self.display = display
        self.onmousedown = onmousedown
        self.color_interpolation = color_interpolation
        self.internalElements = []
    def factory(*args_, **kwargs_):
        if lineType.subclass:
            return lineType.subclass(*args_, **kwargs_)
        else:
            return lineType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def addElement(self, value): self.internalElements.append(value)
    def validate_animateTransformType(self, value):
        # validate type animateTransformType
        pass
    def get_stroke_linejoin(self): return self.stroke_linejoin
    def set_stroke_linejoin(self, stroke_linejoin): self.stroke_linejoin = stroke_linejoin
    def get_text_rendering(self): return self.text_rendering
    def set_text_rendering(self, text_rendering): self.text_rendering = text_rendering
    def get_color_rendering(self): return self.color_rendering
    def set_color_rendering(self, color_rendering): self.color_rendering = color_rendering
    def get_requiredExtensions(self): return self.requiredExtensions
    def set_requiredExtensions(self, requiredExtensions): self.requiredExtensions = requiredExtensions
    def get_color(self): return self.color
    def set_color(self, color): self.color = color
    def get_marker_start(self): return self.marker_start
    def set_marker_start(self, marker_start): self.marker_start = marker_start
    def get_shape_rendering(self): return self.shape_rendering
    def set_shape_rendering(self, shape_rendering): self.shape_rendering = shape_rendering
    def get_stroke(self): return self.stroke
    def set_stroke(self, stroke): self.stroke = stroke
    def get_stroke_linecap(self): return self.stroke_linecap
    def set_stroke_linecap(self, stroke_linecap): self.stroke_linecap = stroke_linecap
    def get_onload(self): return self.onload
    def set_onload(self, onload): self.onload = onload
    def get_y1(self): return self.y1
    def set_y1(self, y1): self.y1 = y1
    def get_y2(self): return self.y2
    def set_y2(self, y2): self.y2 = y2
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_fill(self): return self.fill
    def set_fill(self, fill): self.fill = fill
    def get_cursor(self): return self.cursor
    def set_cursor(self, cursor): self.cursor = cursor
    def get_style(self): return self.style
    def set_style(self, style): self.style = style
    def get_stroke_width(self): return self.stroke_width
    def set_stroke_width(self, stroke_width): self.stroke_width = stroke_width
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_fill_opacity(self): return self.fill_opacity
    def set_fill_opacity(self, fill_opacity): self.fill_opacity = fill_opacity
    def get_transform(self): return self.transform
    def set_transform(self, transform): self.transform = transform
    def get_onmouseup(self): return self.onmouseup
    def set_onmouseup(self, onmouseup): self.onmouseup = onmouseup
    def get_stroke_miterlimit(self): return self.stroke_miterlimit
    def set_stroke_miterlimit(self, stroke_miterlimit): self.stroke_miterlimit = stroke_miterlimit
    def get_onactivate(self): return self.onactivate
    def set_onactivate(self, onactivate): self.onactivate = onactivate
    def get_onfocusout(self): return self.onfocusout
    def set_onfocusout(self, onfocusout): self.onfocusout = onfocusout
    def get_onmousemove(self): return self.onmousemove
    def set_onmousemove(self, onmousemove): self.onmousemove = onmousemove
    def get_marker_mid(self): return self.marker_mid
    def set_marker_mid(self, marker_mid): self.marker_mid = marker_mid
    def get_opacity(self): return self.opacity
    def set_opacity(self, opacity): self.opacity = opacity
    def get_onclick(self): return self.onclick
    def set_onclick(self, onclick): self.onclick = onclick
    def get_onmouseout(self): return self.onmouseout
    def set_onmouseout(self, onmouseout): self.onmouseout = onmouseout
    def get_clip_path(self): return self.clip_path
    def set_clip_path(self, clip_path): self.clip_path = clip_path
    def get_visibility(self): return self.visibility
    def set_visibility(self, visibility): self.visibility = visibility
    def get_systemLanguage(self): return self.systemLanguage
    def set_systemLanguage(self, systemLanguage): self.systemLanguage = systemLanguage
    def get_clip_rule(self): return self.clip_rule
    def set_clip_rule(self, clip_rule): self.clip_rule = clip_rule
    def get_onmouseover(self): return self.onmouseover
    def set_onmouseover(self, onmouseover): self.onmouseover = onmouseover
    def get_image_rendering(self): return self.image_rendering
    def set_image_rendering(self, image_rendering): self.image_rendering = image_rendering
    def get_x2(self): return self.x2
    def set_x2(self, x2): self.x2 = x2
    def get_externalResourcesRequired(self): return self.externalResourcesRequired
    def set_externalResourcesRequired(self, externalResourcesRequired): self.externalResourcesRequired = externalResourcesRequired
    def get_x1(self): return self.x1
    def set_x1(self, x1): self.x1 = x1
    def get_class(self): return self.classxx
    def set_class(self, classxx): self.classxx = classxx
    def get_lang(self): return self.lang
    def set_lang(self, lang): self.lang = lang
    def get_marker_end(self): return self.marker_end
    def set_marker_end(self, marker_end): self.marker_end = marker_end
    def get_stroke_opacity(self): return self.stroke_opacity
    def set_stroke_opacity(self, stroke_opacity): self.stroke_opacity = stroke_opacity
    def get_fill_rule(self): return self.fill_rule
    def set_fill_rule(self, fill_rule): self.fill_rule = fill_rule
    def get_mask(self): return self.mask
    def set_mask(self, mask): self.mask = mask
    def get_stroke_dashoffset(self): return self.stroke_dashoffset
    def set_stroke_dashoffset(self, stroke_dashoffset): self.stroke_dashoffset = stroke_dashoffset
    def get_onfocusin(self): return self.onfocusin
    def set_onfocusin(self, onfocusin): self.onfocusin = onfocusin
    def get_filter(self): return self.filter
    def set_filter(self, filter): self.filter = filter
    def get_pointer_events(self): return self.pointer_events
    def set_pointer_events(self, pointer_events): self.pointer_events = pointer_events
    def get_requiredFeatures(self): return self.requiredFeatures
    def set_requiredFeatures(self, requiredFeatures): self.requiredFeatures = requiredFeatures
    def get_base(self): return self.base
    def set_base(self, base): self.base = base
    def get_stroke_dasharray(self): return self.stroke_dasharray
    def set_stroke_dasharray(self, stroke_dasharray): self.stroke_dasharray = stroke_dasharray
    def get_display(self): return self.display
    def set_display(self, display): self.display = display
    def get_onmousedown(self): return self.onmousedown
    def set_onmousedown(self, onmousedown): self.onmousedown = onmousedown
    def get_color_interpolation(self): return self.color_interpolation
    def set_color_interpolation(self, color_interpolation): self.color_interpolation = color_interpolation
    def export(self, outfile, level, namespace_='svg:', name_='lineType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, self.internalName, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='lineType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, self.internalName))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='svg:', name_='lineType'):
        if self.stroke_linejoin is not None:
            outfile.write(' stroke-linejoin=%s' % (quote_attrib(self.stroke_linejoin), ))
        if self.text_rendering is not None:
            outfile.write(' text-rendering=%s' % (quote_attrib(self.text_rendering), ))
        if self.color_rendering is not None:
            outfile.write(' color-rendering=%s' % (quote_attrib(self.color_rendering), ))
        if self.requiredExtensions is not None:
            outfile.write(' requiredExtensions=%s' % (quote_attrib(self.requiredExtensions), ))
        if self.color is not None:
            outfile.write(' color=%s' % (quote_attrib(self.color), ))
        if self.marker_start is not None:
            outfile.write(' marker-start=%s' % (quote_attrib(self.marker_start), ))
        if self.shape_rendering is not None:
            outfile.write(' shape-rendering=%s' % (quote_attrib(self.shape_rendering), ))
        if self.stroke is not None:
            outfile.write(' stroke=%s' % (quote_attrib(self.stroke), ))
        if self.stroke_linecap is not None:
            outfile.write(' stroke-linecap=%s' % (quote_attrib(self.stroke_linecap), ))
        if self.onload is not None:
            outfile.write(' onload=%s' % (quote_attrib(self.onload), ))
        if self.y1 is not None:
            outfile.write(' y1=%s' % (quote_attrib(self.y1), ))
        if self.y2 is not None:
            outfile.write(' y2=%s' % (quote_attrib(self.y2), ))
        if self.id is not None:
            outfile.write(' id=%s' % (quote_attrib(self.id), ))
        if self.fill is not None:
            outfile.write(' fill=%s' % (quote_attrib(self.fill), ))
        if self.cursor is not None:
            outfile.write(' cursor=%s' % (quote_attrib(self.cursor), ))
        if self.style is not None:
            outfile.write(' style=%s' % (quote_attrib(self.style), ))
        if self.stroke_width is not None:
            outfile.write(' stroke-width=%s' % (quote_attrib(self.stroke_width), ))
        if self.space is not None:
            outfile.write(' space=%s' % (quote_attrib(self.space), ))
        if self.fill_opacity is not None:
            outfile.write(' fill-opacity=%s' % (quote_attrib(self.fill_opacity), ))
        if self.transform is not None:
            outfile.write(' transform=%s' % (quote_attrib(self.transform), ))
        if self.onmouseup is not None:
            outfile.write(' onmouseup=%s' % (quote_attrib(self.onmouseup), ))
        if self.stroke_miterlimit is not None:
            outfile.write(' stroke-miterlimit=%s' % (quote_attrib(self.stroke_miterlimit), ))
        if self.onactivate is not None:
            outfile.write(' onactivate=%s' % (quote_attrib(self.onactivate), ))
        if self.onfocusout is not None:
            outfile.write(' onfocusout=%s' % (quote_attrib(self.onfocusout), ))
        if self.onmousemove is not None:
            outfile.write(' onmousemove=%s' % (quote_attrib(self.onmousemove), ))
        if self.marker_mid is not None:
            outfile.write(' marker-mid=%s' % (quote_attrib(self.marker_mid), ))
        if self.opacity is not None:
            outfile.write(' opacity=%s' % (quote_attrib(self.opacity), ))
        if self.onclick is not None:
            outfile.write(' onclick=%s' % (quote_attrib(self.onclick), ))
        if self.onmouseout is not None:
            outfile.write(' onmouseout=%s' % (quote_attrib(self.onmouseout), ))
        if self.clip_path is not None:
            outfile.write(' clip-path=%s' % (quote_attrib(self.clip_path), ))
        if self.visibility is not None:
            outfile.write(' visibility=%s' % (quote_attrib(self.visibility), ))
        if self.systemLanguage is not None:
            outfile.write(' systemLanguage=%s' % (quote_attrib(self.systemLanguage), ))
        if self.clip_rule is not None:
            outfile.write(' clip-rule=%s' % (quote_attrib(self.clip_rule), ))
        if self.onmouseover is not None:
            outfile.write(' onmouseover=%s' % (quote_attrib(self.onmouseover), ))
        if self.image_rendering is not None:
            outfile.write(' image-rendering=%s' % (quote_attrib(self.image_rendering), ))
        if self.x2 is not None:
            outfile.write(' x2=%s' % (quote_attrib(self.x2), ))
        if self.externalResourcesRequired is not None:
            outfile.write(' externalResourcesRequired="%s"' % str_lower(str(self.externalResourcesRequired)))
        if self.x1 is not None:
            outfile.write(' x1=%s' % (quote_attrib(self.x1), ))
        if self.classxx is not None:
            outfile.write(' class=%s' % (quote_attrib(self.classxx), ))
        if self.lang is not None:
            outfile.write(' lang=%s' % (quote_attrib(self.lang), ))
        if self.marker_end is not None:
            outfile.write(' marker-end=%s' % (quote_attrib(self.marker_end), ))
        if self.stroke_opacity is not None:
            outfile.write(' stroke-opacity=%s' % (quote_attrib(self.stroke_opacity), ))
        if self.fill_rule is not None:
            outfile.write(' fill-rule=%s' % (quote_attrib(self.fill_rule), ))
        if self.mask is not None:
            outfile.write(' mask=%s' % (quote_attrib(self.mask), ))
        if self.stroke_dashoffset is not None:
            outfile.write(' stroke-dashoffset=%s' % (quote_attrib(self.stroke_dashoffset), ))
        if self.onfocusin is not None:
            outfile.write(' onfocusin=%s' % (quote_attrib(self.onfocusin), ))
        if self.filter is not None:
            outfile.write(' filter=%s' % (quote_attrib(self.filter), ))
        if self.pointer_events is not None:
            outfile.write(' pointer-events=%s' % (quote_attrib(self.pointer_events), ))
        if self.requiredFeatures is not None:
            outfile.write(' requiredFeatures=%s' % (quote_attrib(self.requiredFeatures), ))
        if self.base is not None:
            outfile.write(' base=%s' % (quote_attrib(self.base), ))
        if self.stroke_dasharray is not None:
            outfile.write(' stroke-dasharray=%s' % (quote_attrib(self.stroke_dasharray), ))
        if self.display is not None:
            outfile.write(' display=%s' % (quote_attrib(self.display), ))
        if self.onmousedown is not None:
            outfile.write(' onmousedown=%s' % (quote_attrib(self.onmousedown), ))
        if self.color_interpolation is not None:
            outfile.write(' color-interpolation=%s' % (quote_attrib(self.color_interpolation), ))
    def exportChildren(self, outfile, level, namespace_='svg:', name_='lineType'):
        for element_ in self.internalElements:
            element_.export(outfile, level, namespace_, name_='animate')
    def hasContent_(self):
        if (
         len(self.internalElements)>0
            ):
            return True
        else:
            return False
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('stroke-linejoin'):
            self.stroke_linejoin = attrs.get('stroke-linejoin').value
        if attrs.get('text-rendering'):
            self.text_rendering = attrs.get('text-rendering').value
        if attrs.get('color-rendering'):
            self.color_rendering = attrs.get('color-rendering').value
        if attrs.get('requiredExtensions'):
            self.requiredExtensions = attrs.get('requiredExtensions').value
        if attrs.get('color'):
            self.color = attrs.get('color').value
        if attrs.get('marker-start'):
            self.marker_start = attrs.get('marker-start').value
        if attrs.get('shape-rendering'):
            self.shape_rendering = attrs.get('shape-rendering').value
        if attrs.get('stroke'):
            self.stroke = attrs.get('stroke').value
        if attrs.get('stroke-linecap'):
            self.stroke_linecap = attrs.get('stroke-linecap').value
        if attrs.get('onload'):
            self.onload = attrs.get('onload').value
        if attrs.get('y1'):
            self.y1 = attrs.get('y1').value
        if attrs.get('y2'):
            self.y2 = attrs.get('y2').value
        if attrs.get('id'):
            self.id = attrs.get('id').value
        if attrs.get('fill'):
            self.fill = attrs.get('fill').value
        if attrs.get('cursor'):
            self.cursor = attrs.get('cursor').value
        if attrs.get('style'):
            self.style = attrs.get('style').value
        if attrs.get('stroke-width'):
            self.stroke_width = attrs.get('stroke-width').value
        if attrs.get('space'):
            self.space = attrs.get('space').value
        if attrs.get('fill-opacity'):
            self.fill_opacity = attrs.get('fill-opacity').value
        if attrs.get('transform'):
            self.transform = attrs.get('transform').value
        if attrs.get('onmouseup'):
            self.onmouseup = attrs.get('onmouseup').value
        if attrs.get('stroke-miterlimit'):
            self.stroke_miterlimit = attrs.get('stroke-miterlimit').value
        if attrs.get('onactivate'):
            self.onactivate = attrs.get('onactivate').value
        if attrs.get('onfocusout'):
            self.onfocusout = attrs.get('onfocusout').value
        if attrs.get('onmousemove'):
            self.onmousemove = attrs.get('onmousemove').value
        if attrs.get('marker-mid'):
            self.marker_mid = attrs.get('marker-mid').value
        if attrs.get('opacity'):
            self.opacity = attrs.get('opacity').value
        if attrs.get('onclick'):
            self.onclick = attrs.get('onclick').value
        if attrs.get('onmouseout'):
            self.onmouseout = attrs.get('onmouseout').value
        if attrs.get('clip-path'):
            self.clip_path = attrs.get('clip-path').value
        if attrs.get('visibility'):
            self.visibility = attrs.get('visibility').value
        if attrs.get('systemLanguage'):
            self.systemLanguage = attrs.get('systemLanguage').value
        if attrs.get('clip-rule'):
            self.clip_rule = attrs.get('clip-rule').value
        if attrs.get('onmouseover'):
            self.onmouseover = attrs.get('onmouseover').value
        if attrs.get('image-rendering'):
            self.image_rendering = attrs.get('image-rendering').value
        if attrs.get('x2'):
            self.x2 = attrs.get('x2').value
        if attrs.get('externalResourcesRequired'):
            if attrs.get('externalResourcesRequired').value in ('true', '1'):
                self.externalResourcesRequired = True
            elif attrs.get('externalResourcesRequired').value in ('false', '0'):
                self.externalResourcesRequired = False
            else:
                raise ValueError('Bad boolean attribute (externalResourcesRequired)')
        if attrs.get('x1'):
            self.x1 = attrs.get('x1').value
        if attrs.get('class'):
            self.classxx = attrs.get('class').value
        if attrs.get('lang'):
            self.lang = attrs.get('lang').value
        if attrs.get('marker-end'):
            self.marker_end = attrs.get('marker-end').value
        if attrs.get('stroke-opacity'):
            self.stroke_opacity = attrs.get('stroke-opacity').value
        if attrs.get('fill-rule'):
            self.fill_rule = attrs.get('fill-rule').value
        if attrs.get('mask'):
            self.mask = attrs.get('mask').value
        if attrs.get('stroke-dashoffset'):
            self.stroke_dashoffset = attrs.get('stroke-dashoffset').value
        if attrs.get('onfocusin'):
            self.onfocusin = attrs.get('onfocusin').value
        if attrs.get('filter'):
            self.filter = attrs.get('filter').value
        if attrs.get('pointer-events'):
            self.pointer_events = attrs.get('pointer-events').value
        if attrs.get('requiredFeatures'):
            self.requiredFeatures = attrs.get('requiredFeatures').value
        if attrs.get('base'):
            self.base = attrs.get('base').value
        if attrs.get('stroke-dasharray'):
            self.stroke_dasharray = attrs.get('stroke-dasharray').value
        if attrs.get('display'):
            self.display = attrs.get('display').value
        if attrs.get('onmousedown'):
            self.onmousedown = attrs.get('onmousedown').value
        if attrs.get('color-interpolation'):
            self.color_interpolation = attrs.get('color-interpolation').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animate':
            obj_ = animateType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'set':
            obj_ = setType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animateMotion':
            obj_ = animateMotionType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animateColor':
            obj_ = animateColorType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animateTransform':
            obj_ = animateTransformType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_animateTransformType(obj_)    # validate type animateTransformType
# end class lineType


class polylineType(object):
    subclass = None
    superclass = None
    def __init__(self, stroke_linejoin=None, text_rendering=None, color_rendering=None, requiredExtensions=None, color=None, marker_start=None, shape_rendering=None, stroke=None, stroke_linecap=None, onload=None, stroke_width=None, id=None, fill=None, cursor=None, style=None, space=None, fill_opacity=None, transform=None, onmouseup=None, stroke_miterlimit=None, onactivate=None, onfocusout=None, onmousemove=None, marker_mid=None, opacity=None, onclick=None, onmouseout=None, clip_path=None, visibility=None, systemLanguage=None, clip_rule=None, onmouseover=None, base=None, image_rendering=None, externalResourcesRequired=None, onmousedown=None, classxx=None, lang=None, marker_end=None, stroke_opacity=None, fill_rule=None, mask=None, stroke_dashoffset=None, onfocusin=None, filter=None, pointer_events=None, requiredFeatures=None, points=None, stroke_dasharray=None, display=None, color_interpolation=None):
        self.internalName = "polyline"
        self.stroke_linejoin = stroke_linejoin
        self.text_rendering = text_rendering
        self.color_rendering = color_rendering
        self.requiredExtensions = requiredExtensions
        self.color = color
        self.marker_start = marker_start
        self.shape_rendering = shape_rendering
        self.stroke = stroke
        self.stroke_linecap = stroke_linecap
        self.onload = onload
        self.stroke_width = stroke_width
        self.id = id
        self.fill = fill
        self.cursor = cursor
        self.style = style
        self.space = space
        self.fill_opacity = fill_opacity
        self.transform = transform
        self.onmouseup = onmouseup
        self.stroke_miterlimit = stroke_miterlimit
        self.onactivate = onactivate
        self.onfocusout = onfocusout
        self.onmousemove = onmousemove
        self.marker_mid = marker_mid
        self.opacity = opacity
        self.onclick = onclick
        self.onmouseout = onmouseout
        self.clip_path = clip_path
        self.visibility = visibility
        self.systemLanguage = systemLanguage
        self.clip_rule = clip_rule
        self.onmouseover = onmouseover
        self.base = base
        self.image_rendering = image_rendering
        self.externalResourcesRequired = externalResourcesRequired
        self.onmousedown = onmousedown
        self.classxx = classxx
        self.lang = lang
        self.marker_end = marker_end
        self.stroke_opacity = stroke_opacity
        self.fill_rule = fill_rule
        self.mask = mask
        self.stroke_dashoffset = stroke_dashoffset
        self.onfocusin = onfocusin
        self.filter = filter
        self.pointer_events = pointer_events
        self.requiredFeatures = requiredFeatures
        self.points = points
        self.stroke_dasharray = stroke_dasharray
        self.display = display
        self.color_interpolation = color_interpolation
        self.internalElements = []
    def factory(*args_, **kwargs_):
        if polylineType.subclass:
            return polylineType.subclass(*args_, **kwargs_)
        else:
            return polylineType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def addElement(self, value): self.internalElements.append(value)
    def validate_animateTransformType(self, value):
        # validate type animateTransformType
        pass
    def get_stroke_linejoin(self): return self.stroke_linejoin
    def set_stroke_linejoin(self, stroke_linejoin): self.stroke_linejoin = stroke_linejoin
    def get_text_rendering(self): return self.text_rendering
    def set_text_rendering(self, text_rendering): self.text_rendering = text_rendering
    def get_color_rendering(self): return self.color_rendering
    def set_color_rendering(self, color_rendering): self.color_rendering = color_rendering
    def get_requiredExtensions(self): return self.requiredExtensions
    def set_requiredExtensions(self, requiredExtensions): self.requiredExtensions = requiredExtensions
    def get_color(self): return self.color
    def set_color(self, color): self.color = color
    def get_marker_start(self): return self.marker_start
    def set_marker_start(self, marker_start): self.marker_start = marker_start
    def get_shape_rendering(self): return self.shape_rendering
    def set_shape_rendering(self, shape_rendering): self.shape_rendering = shape_rendering
    def get_stroke(self): return self.stroke
    def set_stroke(self, stroke): self.stroke = stroke
    def get_stroke_linecap(self): return self.stroke_linecap
    def set_stroke_linecap(self, stroke_linecap): self.stroke_linecap = stroke_linecap
    def get_onload(self): return self.onload
    def set_onload(self, onload): self.onload = onload
    def get_stroke_width(self): return self.stroke_width
    def set_stroke_width(self, stroke_width): self.stroke_width = stroke_width
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_fill(self): return self.fill
    def set_fill(self, fill): self.fill = fill
    def get_cursor(self): return self.cursor
    def set_cursor(self, cursor): self.cursor = cursor
    def get_style(self): return self.style
    def set_style(self, style): self.style = style
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_fill_opacity(self): return self.fill_opacity
    def set_fill_opacity(self, fill_opacity): self.fill_opacity = fill_opacity
    def get_transform(self): return self.transform
    def set_transform(self, transform): self.transform = transform
    def get_onmouseup(self): return self.onmouseup
    def set_onmouseup(self, onmouseup): self.onmouseup = onmouseup
    def get_stroke_miterlimit(self): return self.stroke_miterlimit
    def set_stroke_miterlimit(self, stroke_miterlimit): self.stroke_miterlimit = stroke_miterlimit
    def get_onactivate(self): return self.onactivate
    def set_onactivate(self, onactivate): self.onactivate = onactivate
    def get_onfocusout(self): return self.onfocusout
    def set_onfocusout(self, onfocusout): self.onfocusout = onfocusout
    def get_onmousemove(self): return self.onmousemove
    def set_onmousemove(self, onmousemove): self.onmousemove = onmousemove
    def get_marker_mid(self): return self.marker_mid
    def set_marker_mid(self, marker_mid): self.marker_mid = marker_mid
    def get_opacity(self): return self.opacity
    def set_opacity(self, opacity): self.opacity = opacity
    def get_onclick(self): return self.onclick
    def set_onclick(self, onclick): self.onclick = onclick
    def get_onmouseout(self): return self.onmouseout
    def set_onmouseout(self, onmouseout): self.onmouseout = onmouseout
    def get_clip_path(self): return self.clip_path
    def set_clip_path(self, clip_path): self.clip_path = clip_path
    def get_visibility(self): return self.visibility
    def set_visibility(self, visibility): self.visibility = visibility
    def get_systemLanguage(self): return self.systemLanguage
    def set_systemLanguage(self, systemLanguage): self.systemLanguage = systemLanguage
    def get_clip_rule(self): return self.clip_rule
    def set_clip_rule(self, clip_rule): self.clip_rule = clip_rule
    def get_onmouseover(self): return self.onmouseover
    def set_onmouseover(self, onmouseover): self.onmouseover = onmouseover
    def get_base(self): return self.base
    def set_base(self, base): self.base = base
    def get_image_rendering(self): return self.image_rendering
    def set_image_rendering(self, image_rendering): self.image_rendering = image_rendering
    def get_externalResourcesRequired(self): return self.externalResourcesRequired
    def set_externalResourcesRequired(self, externalResourcesRequired): self.externalResourcesRequired = externalResourcesRequired
    def get_onmousedown(self): return self.onmousedown
    def set_onmousedown(self, onmousedown): self.onmousedown = onmousedown
    def get_class(self): return self.classxx
    def set_class(self, classxx): self.classxx = classxx
    def get_lang(self): return self.lang
    def set_lang(self, lang): self.lang = lang
    def get_marker_end(self): return self.marker_end
    def set_marker_end(self, marker_end): self.marker_end = marker_end
    def get_stroke_opacity(self): return self.stroke_opacity
    def set_stroke_opacity(self, stroke_opacity): self.stroke_opacity = stroke_opacity
    def get_fill_rule(self): return self.fill_rule
    def set_fill_rule(self, fill_rule): self.fill_rule = fill_rule
    def get_mask(self): return self.mask
    def set_mask(self, mask): self.mask = mask
    def get_stroke_dashoffset(self): return self.stroke_dashoffset
    def set_stroke_dashoffset(self, stroke_dashoffset): self.stroke_dashoffset = stroke_dashoffset
    def get_onfocusin(self): return self.onfocusin
    def set_onfocusin(self, onfocusin): self.onfocusin = onfocusin
    def get_filter(self): return self.filter
    def set_filter(self, filter): self.filter = filter
    def get_pointer_events(self): return self.pointer_events
    def set_pointer_events(self, pointer_events): self.pointer_events = pointer_events
    def get_requiredFeatures(self): return self.requiredFeatures
    def set_requiredFeatures(self, requiredFeatures): self.requiredFeatures = requiredFeatures
    def get_points(self): return self.points
    def set_points(self, points): self.points = points
    def get_stroke_dasharray(self): return self.stroke_dasharray
    def set_stroke_dasharray(self, stroke_dasharray): self.stroke_dasharray = stroke_dasharray
    def get_display(self): return self.display
    def set_display(self, display): self.display = display
    def get_color_interpolation(self): return self.color_interpolation
    def set_color_interpolation(self, color_interpolation): self.color_interpolation = color_interpolation
    def export(self, outfile, level, namespace_='svg:', name_='polylineType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, self.internalName, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='polylineType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, self.internalName))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='svg:', name_='polylineType'):
        if self.stroke_linejoin is not None:
            outfile.write(' stroke-linejoin=%s' % (quote_attrib(self.stroke_linejoin), ))
        if self.text_rendering is not None:
            outfile.write(' text-rendering=%s' % (quote_attrib(self.text_rendering), ))
        if self.color_rendering is not None:
            outfile.write(' color-rendering=%s' % (quote_attrib(self.color_rendering), ))
        if self.requiredExtensions is not None:
            outfile.write(' requiredExtensions=%s' % (quote_attrib(self.requiredExtensions), ))
        if self.color is not None:
            outfile.write(' color=%s' % (quote_attrib(self.color), ))
        if self.marker_start is not None:
            outfile.write(' marker-start=%s' % (quote_attrib(self.marker_start), ))
        if self.shape_rendering is not None:
            outfile.write(' shape-rendering=%s' % (quote_attrib(self.shape_rendering), ))
        if self.stroke is not None:
            outfile.write(' stroke=%s' % (quote_attrib(self.stroke), ))
        if self.stroke_linecap is not None:
            outfile.write(' stroke-linecap=%s' % (quote_attrib(self.stroke_linecap), ))
        if self.onload is not None:
            outfile.write(' onload=%s' % (quote_attrib(self.onload), ))
        if self.stroke_width is not None:
            outfile.write(' stroke-width=%s' % (quote_attrib(self.stroke_width), ))
        if self.id is not None:
            outfile.write(' id=%s' % (quote_attrib(self.id), ))
        if self.fill is not None:
            outfile.write(' fill=%s' % (quote_attrib(self.fill), ))
        if self.cursor is not None:
            outfile.write(' cursor=%s' % (quote_attrib(self.cursor), ))
        if self.style is not None:
            outfile.write(' style=%s' % (quote_attrib(self.style), ))
        if self.space is not None:
            outfile.write(' space=%s' % (quote_attrib(self.space), ))
        if self.fill_opacity is not None:
            outfile.write(' fill-opacity=%s' % (quote_attrib(self.fill_opacity), ))
        if self.transform is not None:
            outfile.write(' transform=%s' % (quote_attrib(self.transform), ))
        if self.onmouseup is not None:
            outfile.write(' onmouseup=%s' % (quote_attrib(self.onmouseup), ))
        if self.stroke_miterlimit is not None:
            outfile.write(' stroke-miterlimit=%s' % (quote_attrib(self.stroke_miterlimit), ))
        if self.onactivate is not None:
            outfile.write(' onactivate=%s' % (quote_attrib(self.onactivate), ))
        if self.onfocusout is not None:
            outfile.write(' onfocusout=%s' % (quote_attrib(self.onfocusout), ))
        if self.onmousemove is not None:
            outfile.write(' onmousemove=%s' % (quote_attrib(self.onmousemove), ))
        if self.marker_mid is not None:
            outfile.write(' marker-mid=%s' % (quote_attrib(self.marker_mid), ))
        if self.opacity is not None:
            outfile.write(' opacity=%s' % (quote_attrib(self.opacity), ))
        if self.onclick is not None:
            outfile.write(' onclick=%s' % (quote_attrib(self.onclick), ))
        if self.onmouseout is not None:
            outfile.write(' onmouseout=%s' % (quote_attrib(self.onmouseout), ))
        if self.clip_path is not None:
            outfile.write(' clip-path=%s' % (quote_attrib(self.clip_path), ))
        if self.visibility is not None:
            outfile.write(' visibility=%s' % (quote_attrib(self.visibility), ))
        if self.systemLanguage is not None:
            outfile.write(' systemLanguage=%s' % (quote_attrib(self.systemLanguage), ))
        if self.clip_rule is not None:
            outfile.write(' clip-rule=%s' % (quote_attrib(self.clip_rule), ))
        if self.onmouseover is not None:
            outfile.write(' onmouseover=%s' % (quote_attrib(self.onmouseover), ))
        if self.base is not None:
            outfile.write(' base=%s' % (quote_attrib(self.base), ))
        if self.image_rendering is not None:
            outfile.write(' image-rendering=%s' % (quote_attrib(self.image_rendering), ))
        if self.externalResourcesRequired is not None:
            outfile.write(' externalResourcesRequired="%s"' % str_lower(str(self.externalResourcesRequired)))
        if self.onmousedown is not None:
            outfile.write(' onmousedown=%s' % (quote_attrib(self.onmousedown), ))
        if self.classxx is not None:
            outfile.write(' class=%s' % (quote_attrib(self.classxx), ))
        if self.lang is not None:
            outfile.write(' lang=%s' % (quote_attrib(self.lang), ))
        if self.marker_end is not None:
            outfile.write(' marker-end=%s' % (quote_attrib(self.marker_end), ))
        if self.stroke_opacity is not None:
            outfile.write(' stroke-opacity=%s' % (quote_attrib(self.stroke_opacity), ))
        if self.fill_rule is not None:
            outfile.write(' fill-rule=%s' % (quote_attrib(self.fill_rule), ))
        if self.mask is not None:
            outfile.write(' mask=%s' % (quote_attrib(self.mask), ))
        if self.stroke_dashoffset is not None:
            outfile.write(' stroke-dashoffset=%s' % (quote_attrib(self.stroke_dashoffset), ))
        if self.onfocusin is not None:
            outfile.write(' onfocusin=%s' % (quote_attrib(self.onfocusin), ))
        if self.filter is not None:
            outfile.write(' filter=%s' % (quote_attrib(self.filter), ))
        if self.pointer_events is not None:
            outfile.write(' pointer-events=%s' % (quote_attrib(self.pointer_events), ))
        if self.requiredFeatures is not None:
            outfile.write(' requiredFeatures=%s' % (quote_attrib(self.requiredFeatures), ))
        outfile.write(' points=%s' % (quote_attrib(self.points), ))
        if self.stroke_dasharray is not None:
            outfile.write(' stroke-dasharray=%s' % (quote_attrib(self.stroke_dasharray), ))
        if self.display is not None:
            outfile.write(' display=%s' % (quote_attrib(self.display), ))
        if self.color_interpolation is not None:
            outfile.write(' color-interpolation=%s' % (quote_attrib(self.color_interpolation), ))
    def exportChildren(self, outfile, level, namespace_='svg:', name_='polylineType'):
        for element_ in self.internalElements:
            element_.export(outfile, level, namespace_, name_='animate')
    def hasContent_(self):
        if (
         len(self.internalElements)>0
            ):
            return True
        else:
            return False
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('stroke-linejoin'):
            self.stroke_linejoin = attrs.get('stroke-linejoin').value
        if attrs.get('text-rendering'):
            self.text_rendering = attrs.get('text-rendering').value
        if attrs.get('color-rendering'):
            self.color_rendering = attrs.get('color-rendering').value
        if attrs.get('requiredExtensions'):
            self.requiredExtensions = attrs.get('requiredExtensions').value
        if attrs.get('color'):
            self.color = attrs.get('color').value
        if attrs.get('marker-start'):
            self.marker_start = attrs.get('marker-start').value
        if attrs.get('shape-rendering'):
            self.shape_rendering = attrs.get('shape-rendering').value
        if attrs.get('stroke'):
            self.stroke = attrs.get('stroke').value
        if attrs.get('stroke-linecap'):
            self.stroke_linecap = attrs.get('stroke-linecap').value
        if attrs.get('onload'):
            self.onload = attrs.get('onload').value
        if attrs.get('stroke-width'):
            self.stroke_width = attrs.get('stroke-width').value
        if attrs.get('id'):
            self.id = attrs.get('id').value
        if attrs.get('fill'):
            self.fill = attrs.get('fill').value
        if attrs.get('cursor'):
            self.cursor = attrs.get('cursor').value
        if attrs.get('style'):
            self.style = attrs.get('style').value
        if attrs.get('space'):
            self.space = attrs.get('space').value
        if attrs.get('fill-opacity'):
            self.fill_opacity = attrs.get('fill-opacity').value
        if attrs.get('transform'):
            self.transform = attrs.get('transform').value
        if attrs.get('onmouseup'):
            self.onmouseup = attrs.get('onmouseup').value
        if attrs.get('stroke-miterlimit'):
            self.stroke_miterlimit = attrs.get('stroke-miterlimit').value
        if attrs.get('onactivate'):
            self.onactivate = attrs.get('onactivate').value
        if attrs.get('onfocusout'):
            self.onfocusout = attrs.get('onfocusout').value
        if attrs.get('onmousemove'):
            self.onmousemove = attrs.get('onmousemove').value
        if attrs.get('marker-mid'):
            self.marker_mid = attrs.get('marker-mid').value
        if attrs.get('opacity'):
            self.opacity = attrs.get('opacity').value
        if attrs.get('onclick'):
            self.onclick = attrs.get('onclick').value
        if attrs.get('onmouseout'):
            self.onmouseout = attrs.get('onmouseout').value
        if attrs.get('clip-path'):
            self.clip_path = attrs.get('clip-path').value
        if attrs.get('visibility'):
            self.visibility = attrs.get('visibility').value
        if attrs.get('systemLanguage'):
            self.systemLanguage = attrs.get('systemLanguage').value
        if attrs.get('clip-rule'):
            self.clip_rule = attrs.get('clip-rule').value
        if attrs.get('onmouseover'):
            self.onmouseover = attrs.get('onmouseover').value
        if attrs.get('base'):
            self.base = attrs.get('base').value
        if attrs.get('image-rendering'):
            self.image_rendering = attrs.get('image-rendering').value
        if attrs.get('externalResourcesRequired'):
            if attrs.get('externalResourcesRequired').value in ('true', '1'):
                self.externalResourcesRequired = True
            elif attrs.get('externalResourcesRequired').value in ('false', '0'):
                self.externalResourcesRequired = False
            else:
                raise ValueError('Bad boolean attribute (externalResourcesRequired)')
        if attrs.get('onmousedown'):
            self.onmousedown = attrs.get('onmousedown').value
        if attrs.get('class'):
            self.classxx = attrs.get('class').value
        if attrs.get('lang'):
            self.lang = attrs.get('lang').value
        if attrs.get('marker-end'):
            self.marker_end = attrs.get('marker-end').value
        if attrs.get('stroke-opacity'):
            self.stroke_opacity = attrs.get('stroke-opacity').value
        if attrs.get('fill-rule'):
            self.fill_rule = attrs.get('fill-rule').value
        if attrs.get('mask'):
            self.mask = attrs.get('mask').value
        if attrs.get('stroke-dashoffset'):
            self.stroke_dashoffset = attrs.get('stroke-dashoffset').value
        if attrs.get('onfocusin'):
            self.onfocusin = attrs.get('onfocusin').value
        if attrs.get('filter'):
            self.filter = attrs.get('filter').value
        if attrs.get('pointer-events'):
            self.pointer_events = attrs.get('pointer-events').value
        if attrs.get('requiredFeatures'):
            self.requiredFeatures = attrs.get('requiredFeatures').value
        if attrs.get('points'):
            self.points = attrs.get('points').value
        if attrs.get('stroke-dasharray'):
            self.stroke_dasharray = attrs.get('stroke-dasharray').value
        if attrs.get('display'):
            self.display = attrs.get('display').value
        if attrs.get('color-interpolation'):
            self.color_interpolation = attrs.get('color-interpolation').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animate':
            obj_ = animateType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'set':
            obj_ = setType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animateMotion':
            obj_ = animateMotionType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animateColor':
            obj_ = animateColorType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animateTransform':
            obj_ = animateTransformType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_animateTransformType(obj_)    # validate type animateTransformType
# end class polylineType


class polygonType(object):
    subclass = None
    superclass = None
    def __init__(self, stroke_linejoin=None, text_rendering=None, color_rendering=None, requiredExtensions=None, color=None, marker_start=None, shape_rendering=None, stroke=None, stroke_linecap=None, onload=None, stroke_width=None, id=None, fill=None, cursor=None, style=None, space=None, fill_opacity=None, transform=None, onmouseup=None, stroke_miterlimit=None, onactivate=None, onfocusout=None, onmousemove=None, marker_mid=None, opacity=None, onclick=None, onmouseout=None, clip_path=None, visibility=None, systemLanguage=None, clip_rule=None, onmouseover=None, base=None, image_rendering=None, externalResourcesRequired=None, onmousedown=None, classxx=None, lang=None, marker_end=None, stroke_opacity=None, fill_rule=None, mask=None, stroke_dashoffset=None, onfocusin=None, filter=None, pointer_events=None, requiredFeatures=None, points=None, stroke_dasharray=None, display=None, color_interpolation=None):
        self.internalName = "polygon"
        self.stroke_linejoin = stroke_linejoin
        self.text_rendering = text_rendering
        self.color_rendering = color_rendering
        self.requiredExtensions = requiredExtensions
        self.color = color
        self.marker_start = marker_start
        self.shape_rendering = shape_rendering
        self.stroke = stroke
        self.stroke_linecap = stroke_linecap
        self.onload = onload
        self.stroke_width = stroke_width
        self.id = id
        self.fill = fill
        self.cursor = cursor
        self.style = style
        self.space = space
        self.fill_opacity = fill_opacity
        self.transform = transform
        self.onmouseup = onmouseup
        self.stroke_miterlimit = stroke_miterlimit
        self.onactivate = onactivate
        self.onfocusout = onfocusout
        self.onmousemove = onmousemove
        self.marker_mid = marker_mid
        self.opacity = opacity
        self.onclick = onclick
        self.onmouseout = onmouseout
        self.clip_path = clip_path
        self.visibility = visibility
        self.systemLanguage = systemLanguage
        self.clip_rule = clip_rule
        self.onmouseover = onmouseover
        self.base = base
        self.image_rendering = image_rendering
        self.externalResourcesRequired = externalResourcesRequired
        self.onmousedown = onmousedown
        self.classxx = classxx
        self.lang = lang
        self.marker_end = marker_end
        self.stroke_opacity = stroke_opacity
        self.fill_rule = fill_rule
        self.mask = mask
        self.stroke_dashoffset = stroke_dashoffset
        self.onfocusin = onfocusin
        self.filter = filter
        self.pointer_events = pointer_events
        self.requiredFeatures = requiredFeatures
        self.points = points
        self.stroke_dasharray = stroke_dasharray
        self.display = display
        self.color_interpolation = color_interpolation
        self.internalElements = []
    def factory(*args_, **kwargs_):
        if polygonType.subclass:
            return polygonType.subclass(*args_, **kwargs_)
        else:
            return polygonType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def addElement(self, value): self.internalElements.append(value)
    def validate_animateTransformType(self, value):
        # validate type animateTransformType
        pass
    def get_stroke_linejoin(self): return self.stroke_linejoin
    def set_stroke_linejoin(self, stroke_linejoin): self.stroke_linejoin = stroke_linejoin
    def get_text_rendering(self): return self.text_rendering
    def set_text_rendering(self, text_rendering): self.text_rendering = text_rendering
    def get_color_rendering(self): return self.color_rendering
    def set_color_rendering(self, color_rendering): self.color_rendering = color_rendering
    def get_requiredExtensions(self): return self.requiredExtensions
    def set_requiredExtensions(self, requiredExtensions): self.requiredExtensions = requiredExtensions
    def get_color(self): return self.color
    def set_color(self, color): self.color = color
    def get_marker_start(self): return self.marker_start
    def set_marker_start(self, marker_start): self.marker_start = marker_start
    def get_shape_rendering(self): return self.shape_rendering
    def set_shape_rendering(self, shape_rendering): self.shape_rendering = shape_rendering
    def get_stroke(self): return self.stroke
    def set_stroke(self, stroke): self.stroke = stroke
    def get_stroke_linecap(self): return self.stroke_linecap
    def set_stroke_linecap(self, stroke_linecap): self.stroke_linecap = stroke_linecap
    def get_onload(self): return self.onload
    def set_onload(self, onload): self.onload = onload
    def get_stroke_width(self): return self.stroke_width
    def set_stroke_width(self, stroke_width): self.stroke_width = stroke_width
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_fill(self): return self.fill
    def set_fill(self, fill): self.fill = fill
    def get_cursor(self): return self.cursor
    def set_cursor(self, cursor): self.cursor = cursor
    def get_style(self): return self.style
    def set_style(self, style): self.style = style
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_fill_opacity(self): return self.fill_opacity
    def set_fill_opacity(self, fill_opacity): self.fill_opacity = fill_opacity
    def get_transform(self): return self.transform
    def set_transform(self, transform): self.transform = transform
    def get_onmouseup(self): return self.onmouseup
    def set_onmouseup(self, onmouseup): self.onmouseup = onmouseup
    def get_stroke_miterlimit(self): return self.stroke_miterlimit
    def set_stroke_miterlimit(self, stroke_miterlimit): self.stroke_miterlimit = stroke_miterlimit
    def get_onactivate(self): return self.onactivate
    def set_onactivate(self, onactivate): self.onactivate = onactivate
    def get_onfocusout(self): return self.onfocusout
    def set_onfocusout(self, onfocusout): self.onfocusout = onfocusout
    def get_onmousemove(self): return self.onmousemove
    def set_onmousemove(self, onmousemove): self.onmousemove = onmousemove
    def get_marker_mid(self): return self.marker_mid
    def set_marker_mid(self, marker_mid): self.marker_mid = marker_mid
    def get_opacity(self): return self.opacity
    def set_opacity(self, opacity): self.opacity = opacity
    def get_onclick(self): return self.onclick
    def set_onclick(self, onclick): self.onclick = onclick
    def get_onmouseout(self): return self.onmouseout
    def set_onmouseout(self, onmouseout): self.onmouseout = onmouseout
    def get_clip_path(self): return self.clip_path
    def set_clip_path(self, clip_path): self.clip_path = clip_path
    def get_visibility(self): return self.visibility
    def set_visibility(self, visibility): self.visibility = visibility
    def get_systemLanguage(self): return self.systemLanguage
    def set_systemLanguage(self, systemLanguage): self.systemLanguage = systemLanguage
    def get_clip_rule(self): return self.clip_rule
    def set_clip_rule(self, clip_rule): self.clip_rule = clip_rule
    def get_onmouseover(self): return self.onmouseover
    def set_onmouseover(self, onmouseover): self.onmouseover = onmouseover
    def get_base(self): return self.base
    def set_base(self, base): self.base = base
    def get_image_rendering(self): return self.image_rendering
    def set_image_rendering(self, image_rendering): self.image_rendering = image_rendering
    def get_externalResourcesRequired(self): return self.externalResourcesRequired
    def set_externalResourcesRequired(self, externalResourcesRequired): self.externalResourcesRequired = externalResourcesRequired
    def get_onmousedown(self): return self.onmousedown
    def set_onmousedown(self, onmousedown): self.onmousedown = onmousedown
    def get_class(self): return self.classxx
    def set_class(self, classxx): self.classxx = classxx
    def get_lang(self): return self.lang
    def set_lang(self, lang): self.lang = lang
    def get_marker_end(self): return self.marker_end
    def set_marker_end(self, marker_end): self.marker_end = marker_end
    def get_stroke_opacity(self): return self.stroke_opacity
    def set_stroke_opacity(self, stroke_opacity): self.stroke_opacity = stroke_opacity
    def get_fill_rule(self): return self.fill_rule
    def set_fill_rule(self, fill_rule): self.fill_rule = fill_rule
    def get_mask(self): return self.mask
    def set_mask(self, mask): self.mask = mask
    def get_stroke_dashoffset(self): return self.stroke_dashoffset
    def set_stroke_dashoffset(self, stroke_dashoffset): self.stroke_dashoffset = stroke_dashoffset
    def get_onfocusin(self): return self.onfocusin
    def set_onfocusin(self, onfocusin): self.onfocusin = onfocusin
    def get_filter(self): return self.filter
    def set_filter(self, filter): self.filter = filter
    def get_pointer_events(self): return self.pointer_events
    def set_pointer_events(self, pointer_events): self.pointer_events = pointer_events
    def get_requiredFeatures(self): return self.requiredFeatures
    def set_requiredFeatures(self, requiredFeatures): self.requiredFeatures = requiredFeatures
    def get_points(self): return self.points
    def set_points(self, points): self.points = points
    def get_stroke_dasharray(self): return self.stroke_dasharray
    def set_stroke_dasharray(self, stroke_dasharray): self.stroke_dasharray = stroke_dasharray
    def get_display(self): return self.display
    def set_display(self, display): self.display = display
    def get_color_interpolation(self): return self.color_interpolation
    def set_color_interpolation(self, color_interpolation): self.color_interpolation = color_interpolation
    def export(self, outfile, level, namespace_='svg:', name_='polygonType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, self.internalName, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='polygonType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, self.internalName))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='svg:', name_='polygonType'):
        if self.stroke_linejoin is not None:
            outfile.write(' stroke-linejoin=%s' % (quote_attrib(self.stroke_linejoin), ))
        if self.text_rendering is not None:
            outfile.write(' text-rendering=%s' % (quote_attrib(self.text_rendering), ))
        if self.color_rendering is not None:
            outfile.write(' color-rendering=%s' % (quote_attrib(self.color_rendering), ))
        if self.requiredExtensions is not None:
            outfile.write(' requiredExtensions=%s' % (quote_attrib(self.requiredExtensions), ))
        if self.color is not None:
            outfile.write(' color=%s' % (quote_attrib(self.color), ))
        if self.marker_start is not None:
            outfile.write(' marker-start=%s' % (quote_attrib(self.marker_start), ))
        if self.shape_rendering is not None:
            outfile.write(' shape-rendering=%s' % (quote_attrib(self.shape_rendering), ))
        if self.stroke is not None:
            outfile.write(' stroke=%s' % (quote_attrib(self.stroke), ))
        if self.stroke_linecap is not None:
            outfile.write(' stroke-linecap=%s' % (quote_attrib(self.stroke_linecap), ))
        if self.onload is not None:
            outfile.write(' onload=%s' % (quote_attrib(self.onload), ))
        if self.stroke_width is not None:
            outfile.write(' stroke-width=%s' % (quote_attrib(self.stroke_width), ))
        if self.id is not None:
            outfile.write(' id=%s' % (quote_attrib(self.id), ))
        if self.fill is not None:
            outfile.write(' fill=%s' % (quote_attrib(self.fill), ))
        if self.cursor is not None:
            outfile.write(' cursor=%s' % (quote_attrib(self.cursor), ))
        if self.style is not None:
            outfile.write(' style=%s' % (quote_attrib(self.style), ))
        if self.space is not None:
            outfile.write(' space=%s' % (quote_attrib(self.space), ))
        if self.fill_opacity is not None:
            outfile.write(' fill-opacity=%s' % (quote_attrib(self.fill_opacity), ))
        if self.transform is not None:
            outfile.write(' transform=%s' % (quote_attrib(self.transform), ))
        if self.onmouseup is not None:
            outfile.write(' onmouseup=%s' % (quote_attrib(self.onmouseup), ))
        if self.stroke_miterlimit is not None:
            outfile.write(' stroke-miterlimit=%s' % (quote_attrib(self.stroke_miterlimit), ))
        if self.onactivate is not None:
            outfile.write(' onactivate=%s' % (quote_attrib(self.onactivate), ))
        if self.onfocusout is not None:
            outfile.write(' onfocusout=%s' % (quote_attrib(self.onfocusout), ))
        if self.onmousemove is not None:
            outfile.write(' onmousemove=%s' % (quote_attrib(self.onmousemove), ))
        if self.marker_mid is not None:
            outfile.write(' marker-mid=%s' % (quote_attrib(self.marker_mid), ))
        if self.opacity is not None:
            outfile.write(' opacity=%s' % (quote_attrib(self.opacity), ))
        if self.onclick is not None:
            outfile.write(' onclick=%s' % (quote_attrib(self.onclick), ))
        if self.onmouseout is not None:
            outfile.write(' onmouseout=%s' % (quote_attrib(self.onmouseout), ))
        if self.clip_path is not None:
            outfile.write(' clip-path=%s' % (quote_attrib(self.clip_path), ))
        if self.visibility is not None:
            outfile.write(' visibility=%s' % (quote_attrib(self.visibility), ))
        if self.systemLanguage is not None:
            outfile.write(' systemLanguage=%s' % (quote_attrib(self.systemLanguage), ))
        if self.clip_rule is not None:
            outfile.write(' clip-rule=%s' % (quote_attrib(self.clip_rule), ))
        if self.onmouseover is not None:
            outfile.write(' onmouseover=%s' % (quote_attrib(self.onmouseover), ))
        if self.base is not None:
            outfile.write(' base=%s' % (quote_attrib(self.base), ))
        if self.image_rendering is not None:
            outfile.write(' image-rendering=%s' % (quote_attrib(self.image_rendering), ))
        if self.externalResourcesRequired is not None:
            outfile.write(' externalResourcesRequired="%s"' % str_lower(str(self.externalResourcesRequired)))
        if self.onmousedown is not None:
            outfile.write(' onmousedown=%s' % (quote_attrib(self.onmousedown), ))
        if self.classxx is not None:
            outfile.write(' class=%s' % (quote_attrib(self.classxx), ))
        if self.lang is not None:
            outfile.write(' lang=%s' % (quote_attrib(self.lang), ))
        if self.marker_end is not None:
            outfile.write(' marker-end=%s' % (quote_attrib(self.marker_end), ))
        if self.stroke_opacity is not None:
            outfile.write(' stroke-opacity=%s' % (quote_attrib(self.stroke_opacity), ))
        if self.fill_rule is not None:
            outfile.write(' fill-rule=%s' % (quote_attrib(self.fill_rule), ))
        if self.mask is not None:
            outfile.write(' mask=%s' % (quote_attrib(self.mask), ))
        if self.stroke_dashoffset is not None:
            outfile.write(' stroke-dashoffset=%s' % (quote_attrib(self.stroke_dashoffset), ))
        if self.onfocusin is not None:
            outfile.write(' onfocusin=%s' % (quote_attrib(self.onfocusin), ))
        if self.filter is not None:
            outfile.write(' filter=%s' % (quote_attrib(self.filter), ))
        if self.pointer_events is not None:
            outfile.write(' pointer-events=%s' % (quote_attrib(self.pointer_events), ))
        if self.requiredFeatures is not None:
            outfile.write(' requiredFeatures=%s' % (quote_attrib(self.requiredFeatures), ))
        outfile.write(' points=%s' % (quote_attrib(self.points), ))
        if self.stroke_dasharray is not None:
            outfile.write(' stroke-dasharray=%s' % (quote_attrib(self.stroke_dasharray), ))
        if self.display is not None:
            outfile.write(' display=%s' % (quote_attrib(self.display), ))
        if self.color_interpolation is not None:
            outfile.write(' color-interpolation=%s' % (quote_attrib(self.color_interpolation), ))
    def exportChildren(self, outfile, level, namespace_='svg:', name_='polygonType'):
        for element_ in self.internalElements:
            element_.export(outfile, level, namespace_, name_='animate')
    def hasContent_(self):
        if (
         len(self.internalElements)>0
            ):
            return True
        else:
            return False
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('stroke-linejoin'):
            self.stroke_linejoin = attrs.get('stroke-linejoin').value
        if attrs.get('text-rendering'):
            self.text_rendering = attrs.get('text-rendering').value
        if attrs.get('color-rendering'):
            self.color_rendering = attrs.get('color-rendering').value
        if attrs.get('requiredExtensions'):
            self.requiredExtensions = attrs.get('requiredExtensions').value
        if attrs.get('color'):
            self.color = attrs.get('color').value
        if attrs.get('marker-start'):
            self.marker_start = attrs.get('marker-start').value
        if attrs.get('shape-rendering'):
            self.shape_rendering = attrs.get('shape-rendering').value
        if attrs.get('stroke'):
            self.stroke = attrs.get('stroke').value
        if attrs.get('stroke-linecap'):
            self.stroke_linecap = attrs.get('stroke-linecap').value
        if attrs.get('onload'):
            self.onload = attrs.get('onload').value
        if attrs.get('stroke-width'):
            self.stroke_width = attrs.get('stroke-width').value
        if attrs.get('id'):
            self.id = attrs.get('id').value
        if attrs.get('fill'):
            self.fill = attrs.get('fill').value
        if attrs.get('cursor'):
            self.cursor = attrs.get('cursor').value
        if attrs.get('style'):
            self.style = attrs.get('style').value
        if attrs.get('space'):
            self.space = attrs.get('space').value
        if attrs.get('fill-opacity'):
            self.fill_opacity = attrs.get('fill-opacity').value
        if attrs.get('transform'):
            self.transform = attrs.get('transform').value
        if attrs.get('onmouseup'):
            self.onmouseup = attrs.get('onmouseup').value
        if attrs.get('stroke-miterlimit'):
            self.stroke_miterlimit = attrs.get('stroke-miterlimit').value
        if attrs.get('onactivate'):
            self.onactivate = attrs.get('onactivate').value
        if attrs.get('onfocusout'):
            self.onfocusout = attrs.get('onfocusout').value
        if attrs.get('onmousemove'):
            self.onmousemove = attrs.get('onmousemove').value
        if attrs.get('marker-mid'):
            self.marker_mid = attrs.get('marker-mid').value
        if attrs.get('opacity'):
            self.opacity = attrs.get('opacity').value
        if attrs.get('onclick'):
            self.onclick = attrs.get('onclick').value
        if attrs.get('onmouseout'):
            self.onmouseout = attrs.get('onmouseout').value
        if attrs.get('clip-path'):
            self.clip_path = attrs.get('clip-path').value
        if attrs.get('visibility'):
            self.visibility = attrs.get('visibility').value
        if attrs.get('systemLanguage'):
            self.systemLanguage = attrs.get('systemLanguage').value
        if attrs.get('clip-rule'):
            self.clip_rule = attrs.get('clip-rule').value
        if attrs.get('onmouseover'):
            self.onmouseover = attrs.get('onmouseover').value
        if attrs.get('base'):
            self.base = attrs.get('base').value
        if attrs.get('image-rendering'):
            self.image_rendering = attrs.get('image-rendering').value
        if attrs.get('externalResourcesRequired'):
            if attrs.get('externalResourcesRequired').value in ('true', '1'):
                self.externalResourcesRequired = True
            elif attrs.get('externalResourcesRequired').value in ('false', '0'):
                self.externalResourcesRequired = False
            else:
                raise ValueError('Bad boolean attribute (externalResourcesRequired)')
        if attrs.get('onmousedown'):
            self.onmousedown = attrs.get('onmousedown').value
        if attrs.get('class'):
            self.classxx = attrs.get('class').value
        if attrs.get('lang'):
            self.lang = attrs.get('lang').value
        if attrs.get('marker-end'):
            self.marker_end = attrs.get('marker-end').value
        if attrs.get('stroke-opacity'):
            self.stroke_opacity = attrs.get('stroke-opacity').value
        if attrs.get('fill-rule'):
            self.fill_rule = attrs.get('fill-rule').value
        if attrs.get('mask'):
            self.mask = attrs.get('mask').value
        if attrs.get('stroke-dashoffset'):
            self.stroke_dashoffset = attrs.get('stroke-dashoffset').value
        if attrs.get('onfocusin'):
            self.onfocusin = attrs.get('onfocusin').value
        if attrs.get('filter'):
            self.filter = attrs.get('filter').value
        if attrs.get('pointer-events'):
            self.pointer_events = attrs.get('pointer-events').value
        if attrs.get('requiredFeatures'):
            self.requiredFeatures = attrs.get('requiredFeatures').value
        if attrs.get('points'):
            self.points = attrs.get('points').value
        if attrs.get('stroke-dasharray'):
            self.stroke_dasharray = attrs.get('stroke-dasharray').value
        if attrs.get('display'):
            self.display = attrs.get('display').value
        if attrs.get('color-interpolation'):
            self.color_interpolation = attrs.get('color-interpolation').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animate':
            obj_ = animateType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'set':
            obj_ = setType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animateMotion':
            obj_ = animateMotionType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animateColor':
            obj_ = animateColorType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animateTransform':
            obj_ = animateTransformType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_animateTransformType(obj_)    # validate type animateTransformType
# end class polygonType


class textType(object):
    subclass = None
    superclass = None
    def __init__(self, stroke_linejoin=None, font_size=None, text_rendering=None, color_rendering=None, requiredExtensions=None, color=None, onfocusout=None, letter_spacing=None, shape_rendering=None, word_spacing=None, stroke=None, stroke_linecap=None, onload=None, baseline_shift=None, stroke_width=None, id=None, fill=None, cursor=None, style=None, space=None, fill_opacity=None, transform=None, lengthAdjust=None, font_stretch=None, stroke_miterlimit=None, onactivate=None, font_variant=None, font_style=None, glyph_orientation_horizontal=None, font_weight=None, onfocusin=None, opacity=None, direction=None, onmousemove=None, onclick=None, onmouseout=None, clip_path=None, alignment_baseline=None, glyph_orientation_vertical=None, visibility=None, unicode_bidi=None, base=None, clip_rule=None, dominant_baseline=None, onmouseover=None, image_rendering=None, externalResourcesRequired=None, font_family=None, classxx=None, lang=None, writing_mode=None, stroke_opacity=None, textLength=None, font_size_adjust=None, fill_rule=None, mask=None, stroke_dashoffset=None, text_anchor=None, text_decoration=None, filter=None, pointer_events=None, requiredFeatures=None, systemLanguage=None, stroke_dasharray=None, onmouseup=None, y=None, x=None, display=None, onmousedown=None, color_interpolation=None, mixedclass_=None, content_=None):
        self.internalName = "text"
        self.stroke_linejoin = stroke_linejoin
        self.font_size = font_size
        self.text_rendering = text_rendering
        self.color_rendering = color_rendering
        self.requiredExtensions = requiredExtensions
        self.color = color
        self.onfocusout = onfocusout
        self.letter_spacing = letter_spacing
        self.shape_rendering = shape_rendering
        self.word_spacing = word_spacing
        self.stroke = stroke
        self.stroke_linecap = stroke_linecap
        self.onload = onload
        self.baseline_shift = baseline_shift
        self.stroke_width = stroke_width
        self.id = id
        self.fill = fill
        self.cursor = cursor
        self.style = style
        self.space = space
        self.fill_opacity = fill_opacity
        self.transform = transform
        self.lengthAdjust = lengthAdjust
        self.font_stretch = font_stretch
        self.stroke_miterlimit = stroke_miterlimit
        self.onactivate = onactivate
        self.font_variant = font_variant
        self.font_style = font_style
        self.glyph_orientation_horizontal = glyph_orientation_horizontal
        self.font_weight = font_weight
        self.onfocusin = onfocusin
        self.opacity = opacity
        self.direction = direction
        self.onmousemove = onmousemove
        self.onclick = onclick
        self.onmouseout = onmouseout
        self.clip_path = clip_path
        self.alignment_baseline = alignment_baseline
        self.glyph_orientation_vertical = glyph_orientation_vertical
        self.visibility = visibility
        self.unicode_bidi = unicode_bidi
        self.base = base
        self.clip_rule = clip_rule
        self.dominant_baseline = dominant_baseline
        self.onmouseover = onmouseover
        self.image_rendering = image_rendering
        self.externalResourcesRequired = externalResourcesRequired
        self.font_family = font_family
        self.classxx = classxx
        self.lang = lang
        self.writing_mode = writing_mode
        self.stroke_opacity = stroke_opacity
        self.textLength = textLength
        self.font_size_adjust = font_size_adjust
        self.fill_rule = fill_rule
        self.mask = mask
        self.stroke_dashoffset = stroke_dashoffset
        self.text_anchor = text_anchor
        self.text_decoration = text_decoration
        self.filter = filter
        self.pointer_events = pointer_events
        self.requiredFeatures = requiredFeatures
        self.systemLanguage = systemLanguage
        self.stroke_dasharray = stroke_dasharray
        self.onmouseup = onmouseup
        self.y = y
        self.x = x
        self.display = display
        self.onmousedown = onmousedown
        self.color_interpolation = color_interpolation
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
    def factory(*args_, **kwargs_):
        if textType.subclass:
            return textType.subclass(*args_, **kwargs_)
        else:
            return textType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def addElement(self, value): self.internalElements.append(value)
    def validate_tspanType(self, value):
        # validate type tspanType
        pass
    def validate_trefType(self, value):
        # validate type trefType
        pass
    def validate_textPathType(self, value):
        # validate type textPathType
        pass
    def validate_animateTransformType(self, value):
        # validate type animateTransformType
        pass
    def get_stroke_linejoin(self): return self.stroke_linejoin
    def set_stroke_linejoin(self, stroke_linejoin): self.stroke_linejoin = stroke_linejoin
    def get_font_size(self): return self.font_size
    def set_font_size(self, font_size): self.font_size = font_size
    def get_text_rendering(self): return self.text_rendering
    def set_text_rendering(self, text_rendering): self.text_rendering = text_rendering
    def get_color_rendering(self): return self.color_rendering
    def set_color_rendering(self, color_rendering): self.color_rendering = color_rendering
    def get_requiredExtensions(self): return self.requiredExtensions
    def set_requiredExtensions(self, requiredExtensions): self.requiredExtensions = requiredExtensions
    def get_color(self): return self.color
    def set_color(self, color): self.color = color
    def get_onfocusout(self): return self.onfocusout
    def set_onfocusout(self, onfocusout): self.onfocusout = onfocusout
    def get_letter_spacing(self): return self.letter_spacing
    def set_letter_spacing(self, letter_spacing): self.letter_spacing = letter_spacing
    def get_shape_rendering(self): return self.shape_rendering
    def set_shape_rendering(self, shape_rendering): self.shape_rendering = shape_rendering
    def get_word_spacing(self): return self.word_spacing
    def set_word_spacing(self, word_spacing): self.word_spacing = word_spacing
    def get_stroke(self): return self.stroke
    def set_stroke(self, stroke): self.stroke = stroke
    def get_stroke_linecap(self): return self.stroke_linecap
    def set_stroke_linecap(self, stroke_linecap): self.stroke_linecap = stroke_linecap
    def get_onload(self): return self.onload
    def set_onload(self, onload): self.onload = onload
    def get_baseline_shift(self): return self.baseline_shift
    def set_baseline_shift(self, baseline_shift): self.baseline_shift = baseline_shift
    def get_stroke_width(self): return self.stroke_width
    def set_stroke_width(self, stroke_width): self.stroke_width = stroke_width
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_fill(self): return self.fill
    def set_fill(self, fill): self.fill = fill
    def get_cursor(self): return self.cursor
    def set_cursor(self, cursor): self.cursor = cursor
    def get_style(self): return self.style
    def set_style(self, style): self.style = style
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_fill_opacity(self): return self.fill_opacity
    def set_fill_opacity(self, fill_opacity): self.fill_opacity = fill_opacity
    def get_transform(self): return self.transform
    def set_transform(self, transform): self.transform = transform
    def get_lengthAdjust(self): return self.lengthAdjust
    def set_lengthAdjust(self, lengthAdjust): self.lengthAdjust = lengthAdjust
    def get_font_stretch(self): return self.font_stretch
    def set_font_stretch(self, font_stretch): self.font_stretch = font_stretch
    def get_stroke_miterlimit(self): return self.stroke_miterlimit
    def set_stroke_miterlimit(self, stroke_miterlimit): self.stroke_miterlimit = stroke_miterlimit
    def get_onactivate(self): return self.onactivate
    def set_onactivate(self, onactivate): self.onactivate = onactivate
    def get_font_variant(self): return self.font_variant
    def set_font_variant(self, font_variant): self.font_variant = font_variant
    def get_font_style(self): return self.font_style
    def set_font_style(self, font_style): self.font_style = font_style
    def get_glyph_orientation_horizontal(self): return self.glyph_orientation_horizontal
    def set_glyph_orientation_horizontal(self, glyph_orientation_horizontal): self.glyph_orientation_horizontal = glyph_orientation_horizontal
    def get_font_weight(self): return self.font_weight
    def set_font_weight(self, font_weight): self.font_weight = font_weight
    def get_onfocusin(self): return self.onfocusin
    def set_onfocusin(self, onfocusin): self.onfocusin = onfocusin
    def get_opacity(self): return self.opacity
    def set_opacity(self, opacity): self.opacity = opacity
    def get_direction(self): return self.direction
    def set_direction(self, direction): self.direction = direction
    def get_onmousemove(self): return self.onmousemove
    def set_onmousemove(self, onmousemove): self.onmousemove = onmousemove
    def get_onclick(self): return self.onclick
    def set_onclick(self, onclick): self.onclick = onclick
    def get_onmouseout(self): return self.onmouseout
    def set_onmouseout(self, onmouseout): self.onmouseout = onmouseout
    def get_clip_path(self): return self.clip_path
    def set_clip_path(self, clip_path): self.clip_path = clip_path
    def get_alignment_baseline(self): return self.alignment_baseline
    def set_alignment_baseline(self, alignment_baseline): self.alignment_baseline = alignment_baseline
    def get_glyph_orientation_vertical(self): return self.glyph_orientation_vertical
    def set_glyph_orientation_vertical(self, glyph_orientation_vertical): self.glyph_orientation_vertical = glyph_orientation_vertical
    def get_visibility(self): return self.visibility
    def set_visibility(self, visibility): self.visibility = visibility
    def get_unicode_bidi(self): return self.unicode_bidi
    def set_unicode_bidi(self, unicode_bidi): self.unicode_bidi = unicode_bidi
    def get_base(self): return self.base
    def set_base(self, base): self.base = base
    def get_clip_rule(self): return self.clip_rule
    def set_clip_rule(self, clip_rule): self.clip_rule = clip_rule
    def get_dominant_baseline(self): return self.dominant_baseline
    def set_dominant_baseline(self, dominant_baseline): self.dominant_baseline = dominant_baseline
    def get_onmouseover(self): return self.onmouseover
    def set_onmouseover(self, onmouseover): self.onmouseover = onmouseover
    def get_image_rendering(self): return self.image_rendering
    def set_image_rendering(self, image_rendering): self.image_rendering = image_rendering
    def get_externalResourcesRequired(self): return self.externalResourcesRequired
    def set_externalResourcesRequired(self, externalResourcesRequired): self.externalResourcesRequired = externalResourcesRequired
    def get_font_family(self): return self.font_family
    def set_font_family(self, font_family): self.font_family = font_family
    def get_class(self): return self.classxx
    def set_class(self, classxx): self.classxx = classxx
    def get_lang(self): return self.lang
    def set_lang(self, lang): self.lang = lang
    def get_writing_mode(self): return self.writing_mode
    def set_writing_mode(self, writing_mode): self.writing_mode = writing_mode
    def get_stroke_opacity(self): return self.stroke_opacity
    def set_stroke_opacity(self, stroke_opacity): self.stroke_opacity = stroke_opacity
    def get_textLength(self): return self.textLength
    def set_textLength(self, textLength): self.textLength = textLength
    def get_font_size_adjust(self): return self.font_size_adjust
    def set_font_size_adjust(self, font_size_adjust): self.font_size_adjust = font_size_adjust
    def get_fill_rule(self): return self.fill_rule
    def set_fill_rule(self, fill_rule): self.fill_rule = fill_rule
    def get_mask(self): return self.mask
    def set_mask(self, mask): self.mask = mask
    def get_stroke_dashoffset(self): return self.stroke_dashoffset
    def set_stroke_dashoffset(self, stroke_dashoffset): self.stroke_dashoffset = stroke_dashoffset
    def get_text_anchor(self): return self.text_anchor
    def set_text_anchor(self, text_anchor): self.text_anchor = text_anchor
    def get_text_decoration(self): return self.text_decoration
    def set_text_decoration(self, text_decoration): self.text_decoration = text_decoration
    def get_filter(self): return self.filter
    def set_filter(self, filter): self.filter = filter
    def get_pointer_events(self): return self.pointer_events
    def set_pointer_events(self, pointer_events): self.pointer_events = pointer_events
    def get_requiredFeatures(self): return self.requiredFeatures
    def set_requiredFeatures(self, requiredFeatures): self.requiredFeatures = requiredFeatures
    def get_systemLanguage(self): return self.systemLanguage
    def set_systemLanguage(self, systemLanguage): self.systemLanguage = systemLanguage
    def get_stroke_dasharray(self): return self.stroke_dasharray
    def set_stroke_dasharray(self, stroke_dasharray): self.stroke_dasharray = stroke_dasharray
    def get_onmouseup(self): return self.onmouseup
    def set_onmouseup(self, onmouseup): self.onmouseup = onmouseup
    def get_y(self): return self.y
    def set_y(self, y): self.y = y
    def get_x(self): return self.x
    def set_x(self, x): self.x = x
    def get_display(self): return self.display
    def set_display(self, display): self.display = display
    def get_onmousedown(self): return self.onmousedown
    def set_onmousedown(self, onmousedown): self.onmousedown = onmousedown
    def get_color_interpolation(self): return self.color_interpolation
    def set_color_interpolation(self, color_interpolation): self.color_interpolation = color_interpolation
    def export(self, outfile, level, namespace_='svg:', name_='textType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, self.internalName, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='textType')
        outfile.write('>')
        self.exportChildren(outfile, level + 1, namespace_, name_)
        outfile.write('</%s%s>\n' % (namespace_, self.internalName))
    def exportAttributes(self, outfile, level, namespace_='svg:', name_='textType'):
        if self.stroke_linejoin is not None:
            outfile.write(' stroke-linejoin=%s' % (quote_attrib(self.stroke_linejoin), ))
        if self.font_size is not None:
            outfile.write(' font-size=%s' % (quote_attrib(self.font_size), ))
        if self.text_rendering is not None:
            outfile.write(' text-rendering=%s' % (quote_attrib(self.text_rendering), ))
        if self.color_rendering is not None:
            outfile.write(' color-rendering=%s' % (quote_attrib(self.color_rendering), ))
        if self.requiredExtensions is not None:
            outfile.write(' requiredExtensions=%s' % (quote_attrib(self.requiredExtensions), ))
        if self.color is not None:
            outfile.write(' color=%s' % (quote_attrib(self.color), ))
        if self.onfocusout is not None:
            outfile.write(' onfocusout=%s' % (quote_attrib(self.onfocusout), ))
        if self.letter_spacing is not None:
            outfile.write(' letter-spacing=%s' % (quote_attrib(self.letter_spacing), ))
        if self.shape_rendering is not None:
            outfile.write(' shape-rendering=%s' % (quote_attrib(self.shape_rendering), ))
        if self.word_spacing is not None:
            outfile.write(' word-spacing=%s' % (quote_attrib(self.word_spacing), ))
        if self.stroke is not None:
            outfile.write(' stroke=%s' % (quote_attrib(self.stroke), ))
        if self.stroke_linecap is not None:
            outfile.write(' stroke-linecap=%s' % (quote_attrib(self.stroke_linecap), ))
        if self.onload is not None:
            outfile.write(' onload=%s' % (quote_attrib(self.onload), ))
        if self.baseline_shift is not None:
            outfile.write(' baseline-shift=%s' % (quote_attrib(self.baseline_shift), ))
        if self.stroke_width is not None:
            outfile.write(' stroke-width=%s' % (quote_attrib(self.stroke_width), ))
        if self.id is not None:
            outfile.write(' id=%s' % (quote_attrib(self.id), ))
        if self.fill is not None:
            outfile.write(' fill=%s' % (quote_attrib(self.fill), ))
        if self.cursor is not None:
            outfile.write(' cursor=%s' % (quote_attrib(self.cursor), ))
        if self.style is not None:
            outfile.write(' style=%s' % (quote_attrib(self.style), ))
        if self.space is not None:
            outfile.write(' space=%s' % (quote_attrib(self.space), ))
        if self.fill_opacity is not None:
            outfile.write(' fill-opacity=%s' % (quote_attrib(self.fill_opacity), ))
        if self.transform is not None:
            outfile.write(' transform=%s' % (quote_attrib(self.transform), ))
        if self.lengthAdjust is not None:
            outfile.write(' lengthAdjust=%s' % (quote_attrib(self.lengthAdjust), ))
        if self.font_stretch is not None:
            outfile.write(' font-stretch=%s' % (quote_attrib(self.font_stretch), ))
        if self.stroke_miterlimit is not None:
            outfile.write(' stroke-miterlimit=%s' % (quote_attrib(self.stroke_miterlimit), ))
        if self.onactivate is not None:
            outfile.write(' onactivate=%s' % (quote_attrib(self.onactivate), ))
        if self.font_variant is not None:
            outfile.write(' font-variant=%s' % (quote_attrib(self.font_variant), ))
        if self.font_style is not None:
            outfile.write(' font-style=%s' % (quote_attrib(self.font_style), ))
        if self.glyph_orientation_horizontal is not None:
            outfile.write(' glyph-orientation-horizontal=%s' % (quote_attrib(self.glyph_orientation_horizontal), ))
        if self.font_weight is not None:
            outfile.write(' font-weight=%s' % (quote_attrib(self.font_weight), ))
        if self.onfocusin is not None:
            outfile.write(' onfocusin=%s' % (quote_attrib(self.onfocusin), ))
        if self.opacity is not None:
            outfile.write(' opacity=%s' % (quote_attrib(self.opacity), ))
        if self.direction is not None:
            outfile.write(' direction=%s' % (quote_attrib(self.direction), ))
        if self.onmousemove is not None:
            outfile.write(' onmousemove=%s' % (quote_attrib(self.onmousemove), ))
        if self.onclick is not None:
            outfile.write(' onclick=%s' % (quote_attrib(self.onclick), ))
        if self.onmouseout is not None:
            outfile.write(' onmouseout=%s' % (quote_attrib(self.onmouseout), ))
        if self.clip_path is not None:
            outfile.write(' clip-path=%s' % (quote_attrib(self.clip_path), ))
        if self.alignment_baseline is not None:
            outfile.write(' alignment-baseline=%s' % (quote_attrib(self.alignment_baseline), ))
        if self.glyph_orientation_vertical is not None:
            outfile.write(' glyph-orientation-vertical=%s' % (quote_attrib(self.glyph_orientation_vertical), ))
        if self.visibility is not None:
            outfile.write(' visibility=%s' % (quote_attrib(self.visibility), ))
        if self.unicode_bidi is not None:
            outfile.write(' unicode-bidi=%s' % (quote_attrib(self.unicode_bidi), ))
        if self.base is not None:
            outfile.write(' base=%s' % (quote_attrib(self.base), ))
        if self.clip_rule is not None:
            outfile.write(' clip-rule=%s' % (quote_attrib(self.clip_rule), ))
        if self.dominant_baseline is not None:
            outfile.write(' dominant-baseline=%s' % (quote_attrib(self.dominant_baseline), ))
        if self.onmouseover is not None:
            outfile.write(' onmouseover=%s' % (quote_attrib(self.onmouseover), ))
        if self.image_rendering is not None:
            outfile.write(' image-rendering=%s' % (quote_attrib(self.image_rendering), ))
        if self.externalResourcesRequired is not None:
            outfile.write(' externalResourcesRequired="%s"' % str_lower(str(self.externalResourcesRequired)))
        if self.font_family is not None:
            outfile.write(' font-family=%s' % (quote_attrib(self.font_family), ))
        if self.classxx is not None:
            outfile.write(' class=%s' % (quote_attrib(self.classxx), ))
        if self.lang is not None:
            outfile.write(' lang=%s' % (quote_attrib(self.lang), ))
        if self.writing_mode is not None:
            outfile.write(' writing-mode=%s' % (quote_attrib(self.writing_mode), ))
        if self.stroke_opacity is not None:
            outfile.write(' stroke-opacity=%s' % (quote_attrib(self.stroke_opacity), ))
        if self.textLength is not None:
            outfile.write(' textLength=%s' % (quote_attrib(self.textLength), ))
        if self.font_size_adjust is not None:
            outfile.write(' font-size-adjust=%s' % (quote_attrib(self.font_size_adjust), ))
        if self.fill_rule is not None:
            outfile.write(' fill-rule=%s' % (quote_attrib(self.fill_rule), ))
        if self.mask is not None:
            outfile.write(' mask=%s' % (quote_attrib(self.mask), ))
        if self.stroke_dashoffset is not None:
            outfile.write(' stroke-dashoffset=%s' % (quote_attrib(self.stroke_dashoffset), ))
        if self.text_anchor is not None:
            outfile.write(' text-anchor=%s' % (quote_attrib(self.text_anchor), ))
        if self.text_decoration is not None:
            outfile.write(' text-decoration=%s' % (quote_attrib(self.text_decoration), ))
        if self.filter is not None:
            outfile.write(' filter=%s' % (quote_attrib(self.filter), ))
        if self.pointer_events is not None:
            outfile.write(' pointer-events=%s' % (quote_attrib(self.pointer_events), ))
        if self.requiredFeatures is not None:
            outfile.write(' requiredFeatures=%s' % (quote_attrib(self.requiredFeatures), ))
        if self.systemLanguage is not None:
            outfile.write(' systemLanguage=%s' % (quote_attrib(self.systemLanguage), ))
        if self.stroke_dasharray is not None:
            outfile.write(' stroke-dasharray=%s' % (quote_attrib(self.stroke_dasharray), ))
        if self.onmouseup is not None:
            outfile.write(' onmouseup=%s' % (quote_attrib(self.onmouseup), ))
        if self.y is not None:
            outfile.write(' y=%s' % (quote_attrib(self.y), ))
        if self.x is not None:
            outfile.write(' x=%s' % (quote_attrib(self.x), ))
        if self.display is not None:
            outfile.write(' display=%s' % (quote_attrib(self.display), ))
        if self.onmousedown is not None:
            outfile.write(' onmousedown=%s' % (quote_attrib(self.onmousedown), ))
        if self.color_interpolation is not None:
            outfile.write(' color-interpolation=%s' % (quote_attrib(self.color_interpolation), ))
    def exportChildren(self, outfile, level, namespace_='svg:', name_='textType'):
        for item_ in self.content_:
            item_.export(outfile, level, item_.name, namespace_)
    def hasContent_(self):
        if (
         len(self.internalElements)>0
            ):
            return True
        else:
            return False
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('stroke-linejoin'):
            self.stroke_linejoin = attrs.get('stroke-linejoin').value
        if attrs.get('font-size'):
            self.font_size = attrs.get('font-size').value
        if attrs.get('text-rendering'):
            self.text_rendering = attrs.get('text-rendering').value
        if attrs.get('color-rendering'):
            self.color_rendering = attrs.get('color-rendering').value
        if attrs.get('requiredExtensions'):
            self.requiredExtensions = attrs.get('requiredExtensions').value
        if attrs.get('color'):
            self.color = attrs.get('color').value
        if attrs.get('onfocusout'):
            self.onfocusout = attrs.get('onfocusout').value
        if attrs.get('letter-spacing'):
            self.letter_spacing = attrs.get('letter-spacing').value
        if attrs.get('shape-rendering'):
            self.shape_rendering = attrs.get('shape-rendering').value
        if attrs.get('word-spacing'):
            self.word_spacing = attrs.get('word-spacing').value
        if attrs.get('stroke'):
            self.stroke = attrs.get('stroke').value
        if attrs.get('stroke-linecap'):
            self.stroke_linecap = attrs.get('stroke-linecap').value
        if attrs.get('onload'):
            self.onload = attrs.get('onload').value
        if attrs.get('baseline-shift'):
            self.baseline_shift = attrs.get('baseline-shift').value
        if attrs.get('stroke-width'):
            self.stroke_width = attrs.get('stroke-width').value
        if attrs.get('id'):
            self.id = attrs.get('id').value
        if attrs.get('fill'):
            self.fill = attrs.get('fill').value
        if attrs.get('cursor'):
            self.cursor = attrs.get('cursor').value
        if attrs.get('style'):
            self.style = attrs.get('style').value
        if attrs.get('space'):
            self.space = attrs.get('space').value
        if attrs.get('fill-opacity'):
            self.fill_opacity = attrs.get('fill-opacity').value
        if attrs.get('transform'):
            self.transform = attrs.get('transform').value
        if attrs.get('lengthAdjust'):
            self.lengthAdjust = attrs.get('lengthAdjust').value
        if attrs.get('font-stretch'):
            self.font_stretch = attrs.get('font-stretch').value
        if attrs.get('stroke-miterlimit'):
            self.stroke_miterlimit = attrs.get('stroke-miterlimit').value
        if attrs.get('onactivate'):
            self.onactivate = attrs.get('onactivate').value
        if attrs.get('font-variant'):
            self.font_variant = attrs.get('font-variant').value
        if attrs.get('font-style'):
            self.font_style = attrs.get('font-style').value
        if attrs.get('glyph-orientation-horizontal'):
            self.glyph_orientation_horizontal = attrs.get('glyph-orientation-horizontal').value
        if attrs.get('font-weight'):
            self.font_weight = attrs.get('font-weight').value
        if attrs.get('onfocusin'):
            self.onfocusin = attrs.get('onfocusin').value
        if attrs.get('opacity'):
            self.opacity = attrs.get('opacity').value
        if attrs.get('direction'):
            self.direction = attrs.get('direction').value
        if attrs.get('onmousemove'):
            self.onmousemove = attrs.get('onmousemove').value
        if attrs.get('onclick'):
            self.onclick = attrs.get('onclick').value
        if attrs.get('onmouseout'):
            self.onmouseout = attrs.get('onmouseout').value
        if attrs.get('clip-path'):
            self.clip_path = attrs.get('clip-path').value
        if attrs.get('alignment-baseline'):
            self.alignment_baseline = attrs.get('alignment-baseline').value
        if attrs.get('glyph-orientation-vertical'):
            self.glyph_orientation_vertical = attrs.get('glyph-orientation-vertical').value
        if attrs.get('visibility'):
            self.visibility = attrs.get('visibility').value
        if attrs.get('unicode-bidi'):
            self.unicode_bidi = attrs.get('unicode-bidi').value
        if attrs.get('base'):
            self.base = attrs.get('base').value
        if attrs.get('clip-rule'):
            self.clip_rule = attrs.get('clip-rule').value
        if attrs.get('dominant-baseline'):
            self.dominant_baseline = attrs.get('dominant-baseline').value
        if attrs.get('onmouseover'):
            self.onmouseover = attrs.get('onmouseover').value
        if attrs.get('image-rendering'):
            self.image_rendering = attrs.get('image-rendering').value
        if attrs.get('externalResourcesRequired'):
            if attrs.get('externalResourcesRequired').value in ('true', '1'):
                self.externalResourcesRequired = True
            elif attrs.get('externalResourcesRequired').value in ('false', '0'):
                self.externalResourcesRequired = False
            else:
                raise ValueError('Bad boolean attribute (externalResourcesRequired)')
        if attrs.get('font-family'):
            self.font_family = attrs.get('font-family').value
        if attrs.get('class'):
            self.classxx = attrs.get('class').value
        if attrs.get('lang'):
            self.lang = attrs.get('lang').value
        if attrs.get('writing-mode'):
            self.writing_mode = attrs.get('writing-mode').value
        if attrs.get('stroke-opacity'):
            self.stroke_opacity = attrs.get('stroke-opacity').value
        if attrs.get('textLength'):
            self.textLength = attrs.get('textLength').value
        if attrs.get('font-size-adjust'):
            self.font_size_adjust = attrs.get('font-size-adjust').value
        if attrs.get('fill-rule'):
            self.fill_rule = attrs.get('fill-rule').value
        if attrs.get('mask'):
            self.mask = attrs.get('mask').value
        if attrs.get('stroke-dashoffset'):
            self.stroke_dashoffset = attrs.get('stroke-dashoffset').value
        if attrs.get('text-anchor'):
            self.text_anchor = attrs.get('text-anchor').value
        if attrs.get('text-decoration'):
            self.text_decoration = attrs.get('text-decoration').value
        if attrs.get('filter'):
            self.filter = attrs.get('filter').value
        if attrs.get('pointer-events'):
            self.pointer_events = attrs.get('pointer-events').value
        if attrs.get('requiredFeatures'):
            self.requiredFeatures = attrs.get('requiredFeatures').value
        if attrs.get('systemLanguage'):
            self.systemLanguage = attrs.get('systemLanguage').value
        if attrs.get('stroke-dasharray'):
            self.stroke_dasharray = attrs.get('stroke-dasharray').value
        if attrs.get('onmouseup'):
            self.onmouseup = attrs.get('onmouseup').value
        if attrs.get('y'):
            self.y = attrs.get('y').value
        if attrs.get('x'):
            self.x = attrs.get('x').value
        if attrs.get('display'):
            self.display = attrs.get('display').value
        if attrs.get('onmousedown'):
            self.onmousedown = attrs.get('onmousedown').value
        if attrs.get('color-interpolation'):
            self.color_interpolation = attrs.get('color-interpolation').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'desc':
            childobj_ = descType.factory()
            childobj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'desc', childobj_)
            self.content_.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'title':
            childobj_ = titleType.factory()
            childobj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'title', childobj_)
            self.content_.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'metadata':
            childobj_ = metadataType.factory()
            childobj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'metadata', childobj_)
            self.content_.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'tspan':
            childobj_ = tspanType.factory()
            childobj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'tspan', childobj_)
            self.content_.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'tref':
            childobj_ = trefType.factory()
            childobj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'tref', childobj_)
            self.content_.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'textPath':
            childobj_ = textPathType.factory()
            childobj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'textPath', childobj_)
            self.content_.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'altGlyph':
            childobj_ = altGlyphType.factory()
            childobj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'altGlyph', childobj_)
            self.content_.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'a':
            childobj_ = aType.factory()
            childobj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'a', childobj_)
            self.content_.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animate':
            childobj_ = animateType.factory()
            childobj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'animate', childobj_)
            self.content_.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'set':
            childobj_ = setType.factory()
            childobj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'set', childobj_)
            self.content_.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animateMotion':
            childobj_ = animateMotionType.factory()
            childobj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'animateMotion', childobj_)
            self.content_.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animateColor':
            childobj_ = animateColorType.factory()
            childobj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'animateColor', childobj_)
            self.content_.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animateTransform':
            childobj_ = animateTransformType.factory()
            childobj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'animateTransform', childobj_)
            self.content_.append(obj_)
        elif child_.nodeType == Node.TEXT_NODE:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.nodeValue)
            self.content_.append(obj_)
# end class textType


class tspanType(object):
    subclass = None
    superclass = None
    def __init__(self, stroke_linejoin=None, font_size=None, text_rendering=None, color_rendering=None, requiredExtensions=None, color=None, onfocusout=None, image_rendering=None, letter_spacing=None, shape_rendering=None, word_spacing=None, stroke=None, stroke_linecap=None, onload=None, baseline_shift=None, stroke_width=None, id=None, fill=None, onmouseover=None, cursor=None, style=None, space=None, fill_opacity=None, lengthAdjust=None, font_stretch=None, stroke_miterlimit=None, onactivate=None, font_variant=None, font_style=None, glyph_orientation_horizontal=None, font_weight=None, onfocusin=None, opacity=None, direction=None, onmousemove=None, onclick=None, onmouseout=None, clip_path=None, alignment_baseline=None, glyph_orientation_vertical=None, visibility=None, unicode_bidi=None, base=None, clip_rule=None, dominant_baseline=None, dx=None, dy=None, externalResourcesRequired=None, font_family=None, classxx=None, lang=None, rotate=None, stroke_opacity=None, textLength=None, font_size_adjust=None, fill_rule=None, mask=None, stroke_dashoffset=None, text_anchor=None, text_decoration=None, filter=None, pointer_events=None, requiredFeatures=None, systemLanguage=None, stroke_dasharray=None, onmouseup=None, y=None, x=None, display=None, onmousedown=None, color_interpolation=None, mixedclass_=None, content_=None):
        self.internalName = "tspan"
        self.stroke_linejoin = stroke_linejoin
        self.font_size = font_size
        self.text_rendering = text_rendering
        self.color_rendering = color_rendering
        self.requiredExtensions = requiredExtensions
        self.color = color
        self.onfocusout = onfocusout
        self.image_rendering = image_rendering
        self.letter_spacing = letter_spacing
        self.shape_rendering = shape_rendering
        self.word_spacing = word_spacing
        self.stroke = stroke
        self.stroke_linecap = stroke_linecap
        self.onload = onload
        self.baseline_shift = baseline_shift
        self.stroke_width = stroke_width
        self.id = id
        self.fill = fill
        self.onmouseover = onmouseover
        self.cursor = cursor
        self.style = style
        self.space = space
        self.fill_opacity = fill_opacity
        self.lengthAdjust = lengthAdjust
        self.font_stretch = font_stretch
        self.stroke_miterlimit = stroke_miterlimit
        self.onactivate = onactivate
        self.font_variant = font_variant
        self.font_style = font_style
        self.glyph_orientation_horizontal = glyph_orientation_horizontal
        self.font_weight = font_weight
        self.onfocusin = onfocusin
        self.opacity = opacity
        self.direction = direction
        self.onmousemove = onmousemove
        self.onclick = onclick
        self.onmouseout = onmouseout
        self.clip_path = clip_path
        self.alignment_baseline = alignment_baseline
        self.glyph_orientation_vertical = glyph_orientation_vertical
        self.visibility = visibility
        self.unicode_bidi = unicode_bidi
        self.base = base
        self.clip_rule = clip_rule
        self.dominant_baseline = dominant_baseline
        self.dx = dx
        self.dy = dy
        self.externalResourcesRequired = externalResourcesRequired
        self.font_family = font_family
        self.classxx = classxx
        self.lang = lang
        self.rotate = rotate
        self.stroke_opacity = stroke_opacity
        self.textLength = textLength
        self.font_size_adjust = font_size_adjust
        self.fill_rule = fill_rule
        self.mask = mask
        self.stroke_dashoffset = stroke_dashoffset
        self.text_anchor = text_anchor
        self.text_decoration = text_decoration
        self.filter = filter
        self.pointer_events = pointer_events
        self.requiredFeatures = requiredFeatures
        self.systemLanguage = systemLanguage
        self.stroke_dasharray = stroke_dasharray
        self.onmouseup = onmouseup
        self.y = y
        self.x = x
        self.display = display
        self.onmousedown = onmousedown
        self.color_interpolation = color_interpolation
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
    def factory(*args_, **kwargs_):
        if tspanType.subclass:
            return tspanType.subclass(*args_, **kwargs_)
        else:
            return tspanType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def addElement(self, value): self.internalElements.append(value)
    def validate_tspanType(self, value):
        # validate type tspanType
        pass
    def validate_trefType(self, value):
        # validate type trefType
        pass
    def get_stroke_linejoin(self): return self.stroke_linejoin
    def set_stroke_linejoin(self, stroke_linejoin): self.stroke_linejoin = stroke_linejoin
    def get_font_size(self): return self.font_size
    def set_font_size(self, font_size): self.font_size = font_size
    def get_text_rendering(self): return self.text_rendering
    def set_text_rendering(self, text_rendering): self.text_rendering = text_rendering
    def get_color_rendering(self): return self.color_rendering
    def set_color_rendering(self, color_rendering): self.color_rendering = color_rendering
    def get_requiredExtensions(self): return self.requiredExtensions
    def set_requiredExtensions(self, requiredExtensions): self.requiredExtensions = requiredExtensions
    def get_color(self): return self.color
    def set_color(self, color): self.color = color
    def get_onfocusout(self): return self.onfocusout
    def set_onfocusout(self, onfocusout): self.onfocusout = onfocusout
    def get_image_rendering(self): return self.image_rendering
    def set_image_rendering(self, image_rendering): self.image_rendering = image_rendering
    def get_letter_spacing(self): return self.letter_spacing
    def set_letter_spacing(self, letter_spacing): self.letter_spacing = letter_spacing
    def get_shape_rendering(self): return self.shape_rendering
    def set_shape_rendering(self, shape_rendering): self.shape_rendering = shape_rendering
    def get_word_spacing(self): return self.word_spacing
    def set_word_spacing(self, word_spacing): self.word_spacing = word_spacing
    def get_stroke(self): return self.stroke
    def set_stroke(self, stroke): self.stroke = stroke
    def get_stroke_linecap(self): return self.stroke_linecap
    def set_stroke_linecap(self, stroke_linecap): self.stroke_linecap = stroke_linecap
    def get_onload(self): return self.onload
    def set_onload(self, onload): self.onload = onload
    def get_baseline_shift(self): return self.baseline_shift
    def set_baseline_shift(self, baseline_shift): self.baseline_shift = baseline_shift
    def get_stroke_width(self): return self.stroke_width
    def set_stroke_width(self, stroke_width): self.stroke_width = stroke_width
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_fill(self): return self.fill
    def set_fill(self, fill): self.fill = fill
    def get_onmouseover(self): return self.onmouseover
    def set_onmouseover(self, onmouseover): self.onmouseover = onmouseover
    def get_cursor(self): return self.cursor
    def set_cursor(self, cursor): self.cursor = cursor
    def get_style(self): return self.style
    def set_style(self, style): self.style = style
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_fill_opacity(self): return self.fill_opacity
    def set_fill_opacity(self, fill_opacity): self.fill_opacity = fill_opacity
    def get_lengthAdjust(self): return self.lengthAdjust
    def set_lengthAdjust(self, lengthAdjust): self.lengthAdjust = lengthAdjust
    def get_font_stretch(self): return self.font_stretch
    def set_font_stretch(self, font_stretch): self.font_stretch = font_stretch
    def get_stroke_miterlimit(self): return self.stroke_miterlimit
    def set_stroke_miterlimit(self, stroke_miterlimit): self.stroke_miterlimit = stroke_miterlimit
    def get_onactivate(self): return self.onactivate
    def set_onactivate(self, onactivate): self.onactivate = onactivate
    def get_font_variant(self): return self.font_variant
    def set_font_variant(self, font_variant): self.font_variant = font_variant
    def get_font_style(self): return self.font_style
    def set_font_style(self, font_style): self.font_style = font_style
    def get_glyph_orientation_horizontal(self): return self.glyph_orientation_horizontal
    def set_glyph_orientation_horizontal(self, glyph_orientation_horizontal): self.glyph_orientation_horizontal = glyph_orientation_horizontal
    def get_font_weight(self): return self.font_weight
    def set_font_weight(self, font_weight): self.font_weight = font_weight
    def get_onfocusin(self): return self.onfocusin
    def set_onfocusin(self, onfocusin): self.onfocusin = onfocusin
    def get_opacity(self): return self.opacity
    def set_opacity(self, opacity): self.opacity = opacity
    def get_direction(self): return self.direction
    def set_direction(self, direction): self.direction = direction
    def get_onmousemove(self): return self.onmousemove
    def set_onmousemove(self, onmousemove): self.onmousemove = onmousemove
    def get_onclick(self): return self.onclick
    def set_onclick(self, onclick): self.onclick = onclick
    def get_onmouseout(self): return self.onmouseout
    def set_onmouseout(self, onmouseout): self.onmouseout = onmouseout
    def get_clip_path(self): return self.clip_path
    def set_clip_path(self, clip_path): self.clip_path = clip_path
    def get_alignment_baseline(self): return self.alignment_baseline
    def set_alignment_baseline(self, alignment_baseline): self.alignment_baseline = alignment_baseline
    def get_glyph_orientation_vertical(self): return self.glyph_orientation_vertical
    def set_glyph_orientation_vertical(self, glyph_orientation_vertical): self.glyph_orientation_vertical = glyph_orientation_vertical
    def get_visibility(self): return self.visibility
    def set_visibility(self, visibility): self.visibility = visibility
    def get_unicode_bidi(self): return self.unicode_bidi
    def set_unicode_bidi(self, unicode_bidi): self.unicode_bidi = unicode_bidi
    def get_base(self): return self.base
    def set_base(self, base): self.base = base
    def get_clip_rule(self): return self.clip_rule
    def set_clip_rule(self, clip_rule): self.clip_rule = clip_rule
    def get_dominant_baseline(self): return self.dominant_baseline
    def set_dominant_baseline(self, dominant_baseline): self.dominant_baseline = dominant_baseline
    def get_dx(self): return self.dx
    def set_dx(self, dx): self.dx = dx
    def get_dy(self): return self.dy
    def set_dy(self, dy): self.dy = dy
    def get_externalResourcesRequired(self): return self.externalResourcesRequired
    def set_externalResourcesRequired(self, externalResourcesRequired): self.externalResourcesRequired = externalResourcesRequired
    def get_font_family(self): return self.font_family
    def set_font_family(self, font_family): self.font_family = font_family
    def get_class(self): return self.classxx
    def set_class(self, classxx): self.classxx = classxx
    def get_lang(self): return self.lang
    def set_lang(self, lang): self.lang = lang
    def get_rotate(self): return self.rotate
    def set_rotate(self, rotate): self.rotate = rotate
    def get_stroke_opacity(self): return self.stroke_opacity
    def set_stroke_opacity(self, stroke_opacity): self.stroke_opacity = stroke_opacity
    def get_textLength(self): return self.textLength
    def set_textLength(self, textLength): self.textLength = textLength
    def get_font_size_adjust(self): return self.font_size_adjust
    def set_font_size_adjust(self, font_size_adjust): self.font_size_adjust = font_size_adjust
    def get_fill_rule(self): return self.fill_rule
    def set_fill_rule(self, fill_rule): self.fill_rule = fill_rule
    def get_mask(self): return self.mask
    def set_mask(self, mask): self.mask = mask
    def get_stroke_dashoffset(self): return self.stroke_dashoffset
    def set_stroke_dashoffset(self, stroke_dashoffset): self.stroke_dashoffset = stroke_dashoffset
    def get_text_anchor(self): return self.text_anchor
    def set_text_anchor(self, text_anchor): self.text_anchor = text_anchor
    def get_text_decoration(self): return self.text_decoration
    def set_text_decoration(self, text_decoration): self.text_decoration = text_decoration
    def get_filter(self): return self.filter
    def set_filter(self, filter): self.filter = filter
    def get_pointer_events(self): return self.pointer_events
    def set_pointer_events(self, pointer_events): self.pointer_events = pointer_events
    def get_requiredFeatures(self): return self.requiredFeatures
    def set_requiredFeatures(self, requiredFeatures): self.requiredFeatures = requiredFeatures
    def get_systemLanguage(self): return self.systemLanguage
    def set_systemLanguage(self, systemLanguage): self.systemLanguage = systemLanguage
    def get_stroke_dasharray(self): return self.stroke_dasharray
    def set_stroke_dasharray(self, stroke_dasharray): self.stroke_dasharray = stroke_dasharray
    def get_onmouseup(self): return self.onmouseup
    def set_onmouseup(self, onmouseup): self.onmouseup = onmouseup
    def get_y(self): return self.y
    def set_y(self, y): self.y = y
    def get_x(self): return self.x
    def set_x(self, x): self.x = x
    def get_display(self): return self.display
    def set_display(self, display): self.display = display
    def get_onmousedown(self): return self.onmousedown
    def set_onmousedown(self, onmousedown): self.onmousedown = onmousedown
    def get_color_interpolation(self): return self.color_interpolation
    def set_color_interpolation(self, color_interpolation): self.color_interpolation = color_interpolation
    def export(self, outfile, level, namespace_='svg:', name_='tspanType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, self.internalName, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='tspanType')
        outfile.write('>')
        self.exportChildren(outfile, level + 1, namespace_, name_)
        outfile.write('</%s%s>\n' % (namespace_, self.internalName))
    def exportAttributes(self, outfile, level, namespace_='svg:', name_='tspanType'):
        if self.stroke_linejoin is not None:
            outfile.write(' stroke-linejoin=%s' % (quote_attrib(self.stroke_linejoin), ))
        if self.font_size is not None:
            outfile.write(' font-size=%s' % (quote_attrib(self.font_size), ))
        if self.text_rendering is not None:
            outfile.write(' text-rendering=%s' % (quote_attrib(self.text_rendering), ))
        if self.color_rendering is not None:
            outfile.write(' color-rendering=%s' % (quote_attrib(self.color_rendering), ))
        if self.requiredExtensions is not None:
            outfile.write(' requiredExtensions=%s' % (quote_attrib(self.requiredExtensions), ))
        if self.color is not None:
            outfile.write(' color=%s' % (quote_attrib(self.color), ))
        if self.onfocusout is not None:
            outfile.write(' onfocusout=%s' % (quote_attrib(self.onfocusout), ))
        if self.image_rendering is not None:
            outfile.write(' image-rendering=%s' % (quote_attrib(self.image_rendering), ))
        if self.letter_spacing is not None:
            outfile.write(' letter-spacing=%s' % (quote_attrib(self.letter_spacing), ))
        if self.shape_rendering is not None:
            outfile.write(' shape-rendering=%s' % (quote_attrib(self.shape_rendering), ))
        if self.word_spacing is not None:
            outfile.write(' word-spacing=%s' % (quote_attrib(self.word_spacing), ))
        if self.stroke is not None:
            outfile.write(' stroke=%s' % (quote_attrib(self.stroke), ))
        if self.stroke_linecap is not None:
            outfile.write(' stroke-linecap=%s' % (quote_attrib(self.stroke_linecap), ))
        if self.onload is not None:
            outfile.write(' onload=%s' % (quote_attrib(self.onload), ))
        if self.baseline_shift is not None:
            outfile.write(' baseline-shift=%s' % (quote_attrib(self.baseline_shift), ))
        if self.stroke_width is not None:
            outfile.write(' stroke-width=%s' % (quote_attrib(self.stroke_width), ))
        if self.id is not None:
            outfile.write(' id=%s' % (quote_attrib(self.id), ))
        if self.fill is not None:
            outfile.write(' fill=%s' % (quote_attrib(self.fill), ))
        if self.onmouseover is not None:
            outfile.write(' onmouseover=%s' % (quote_attrib(self.onmouseover), ))
        if self.cursor is not None:
            outfile.write(' cursor=%s' % (quote_attrib(self.cursor), ))
        if self.style is not None:
            outfile.write(' style=%s' % (quote_attrib(self.style), ))
        if self.space is not None:
            outfile.write(' space=%s' % (quote_attrib(self.space), ))
        if self.fill_opacity is not None:
            outfile.write(' fill-opacity=%s' % (quote_attrib(self.fill_opacity), ))
        if self.lengthAdjust is not None:
            outfile.write(' lengthAdjust=%s' % (quote_attrib(self.lengthAdjust), ))
        if self.font_stretch is not None:
            outfile.write(' font-stretch=%s' % (quote_attrib(self.font_stretch), ))
        if self.stroke_miterlimit is not None:
            outfile.write(' stroke-miterlimit=%s' % (quote_attrib(self.stroke_miterlimit), ))
        if self.onactivate is not None:
            outfile.write(' onactivate=%s' % (quote_attrib(self.onactivate), ))
        if self.font_variant is not None:
            outfile.write(' font-variant=%s' % (quote_attrib(self.font_variant), ))
        if self.font_style is not None:
            outfile.write(' font-style=%s' % (quote_attrib(self.font_style), ))
        if self.glyph_orientation_horizontal is not None:
            outfile.write(' glyph-orientation-horizontal=%s' % (quote_attrib(self.glyph_orientation_horizontal), ))
        if self.font_weight is not None:
            outfile.write(' font-weight=%s' % (quote_attrib(self.font_weight), ))
        if self.onfocusin is not None:
            outfile.write(' onfocusin=%s' % (quote_attrib(self.onfocusin), ))
        if self.opacity is not None:
            outfile.write(' opacity=%s' % (quote_attrib(self.opacity), ))
        if self.direction is not None:
            outfile.write(' direction=%s' % (quote_attrib(self.direction), ))
        if self.onmousemove is not None:
            outfile.write(' onmousemove=%s' % (quote_attrib(self.onmousemove), ))
        if self.onclick is not None:
            outfile.write(' onclick=%s' % (quote_attrib(self.onclick), ))
        if self.onmouseout is not None:
            outfile.write(' onmouseout=%s' % (quote_attrib(self.onmouseout), ))
        if self.clip_path is not None:
            outfile.write(' clip-path=%s' % (quote_attrib(self.clip_path), ))
        if self.alignment_baseline is not None:
            outfile.write(' alignment-baseline=%s' % (quote_attrib(self.alignment_baseline), ))
        if self.glyph_orientation_vertical is not None:
            outfile.write(' glyph-orientation-vertical=%s' % (quote_attrib(self.glyph_orientation_vertical), ))
        if self.visibility is not None:
            outfile.write(' visibility=%s' % (quote_attrib(self.visibility), ))
        if self.unicode_bidi is not None:
            outfile.write(' unicode-bidi=%s' % (quote_attrib(self.unicode_bidi), ))
        if self.base is not None:
            outfile.write(' base=%s' % (quote_attrib(self.base), ))
        if self.clip_rule is not None:
            outfile.write(' clip-rule=%s' % (quote_attrib(self.clip_rule), ))
        if self.dominant_baseline is not None:
            outfile.write(' dominant-baseline=%s' % (quote_attrib(self.dominant_baseline), ))
        if self.dx is not None:
            outfile.write(' dx=%s' % (quote_attrib(self.dx), ))
        if self.dy is not None:
            outfile.write(' dy=%s' % (quote_attrib(self.dy), ))
        if self.externalResourcesRequired is not None:
            outfile.write(' externalResourcesRequired="%s"' % str_lower(str(self.externalResourcesRequired)))
        if self.font_family is not None:
            outfile.write(' font-family=%s' % (quote_attrib(self.font_family), ))
        if self.classxx is not None:
            outfile.write(' class=%s' % (quote_attrib(self.classxx), ))
        if self.lang is not None:
            outfile.write(' lang=%s' % (quote_attrib(self.lang), ))
        if self.rotate is not None:
            outfile.write(' rotate=%s' % (quote_attrib(self.rotate), ))
        if self.stroke_opacity is not None:
            outfile.write(' stroke-opacity=%s' % (quote_attrib(self.stroke_opacity), ))
        if self.textLength is not None:
            outfile.write(' textLength=%s' % (quote_attrib(self.textLength), ))
        if self.font_size_adjust is not None:
            outfile.write(' font-size-adjust=%s' % (quote_attrib(self.font_size_adjust), ))
        if self.fill_rule is not None:
            outfile.write(' fill-rule=%s' % (quote_attrib(self.fill_rule), ))
        if self.mask is not None:
            outfile.write(' mask=%s' % (quote_attrib(self.mask), ))
        if self.stroke_dashoffset is not None:
            outfile.write(' stroke-dashoffset=%s' % (quote_attrib(self.stroke_dashoffset), ))
        if self.text_anchor is not None:
            outfile.write(' text-anchor=%s' % (quote_attrib(self.text_anchor), ))
        if self.text_decoration is not None:
            outfile.write(' text-decoration=%s' % (quote_attrib(self.text_decoration), ))
        if self.filter is not None:
            outfile.write(' filter=%s' % (quote_attrib(self.filter), ))
        if self.pointer_events is not None:
            outfile.write(' pointer-events=%s' % (quote_attrib(self.pointer_events), ))
        if self.requiredFeatures is not None:
            outfile.write(' requiredFeatures=%s' % (quote_attrib(self.requiredFeatures), ))
        if self.systemLanguage is not None:
            outfile.write(' systemLanguage=%s' % (quote_attrib(self.systemLanguage), ))
        if self.stroke_dasharray is not None:
            outfile.write(' stroke-dasharray=%s' % (quote_attrib(self.stroke_dasharray), ))
        if self.onmouseup is not None:
            outfile.write(' onmouseup=%s' % (quote_attrib(self.onmouseup), ))
        if self.y is not None:
            outfile.write(' y=%s' % (quote_attrib(self.y), ))
        if self.x is not None:
            outfile.write(' x=%s' % (quote_attrib(self.x), ))
        if self.display is not None:
            outfile.write(' display=%s' % (quote_attrib(self.display), ))
        if self.onmousedown is not None:
            outfile.write(' onmousedown=%s' % (quote_attrib(self.onmousedown), ))
        if self.color_interpolation is not None:
            outfile.write(' color-interpolation=%s' % (quote_attrib(self.color_interpolation), ))
    def exportChildren(self, outfile, level, namespace_='svg:', name_='tspanType'):
        for item_ in self.content_:
            item_.export(outfile, level, item_.name, namespace_)
    def hasContent_(self):
        if (
         len(self.internalElements)>0
            ):
            return True
        else:
            return False
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('stroke-linejoin'):
            self.stroke_linejoin = attrs.get('stroke-linejoin').value
        if attrs.get('font-size'):
            self.font_size = attrs.get('font-size').value
        if attrs.get('text-rendering'):
            self.text_rendering = attrs.get('text-rendering').value
        if attrs.get('color-rendering'):
            self.color_rendering = attrs.get('color-rendering').value
        if attrs.get('requiredExtensions'):
            self.requiredExtensions = attrs.get('requiredExtensions').value
        if attrs.get('color'):
            self.color = attrs.get('color').value
        if attrs.get('onfocusout'):
            self.onfocusout = attrs.get('onfocusout').value
        if attrs.get('image-rendering'):
            self.image_rendering = attrs.get('image-rendering').value
        if attrs.get('letter-spacing'):
            self.letter_spacing = attrs.get('letter-spacing').value
        if attrs.get('shape-rendering'):
            self.shape_rendering = attrs.get('shape-rendering').value
        if attrs.get('word-spacing'):
            self.word_spacing = attrs.get('word-spacing').value
        if attrs.get('stroke'):
            self.stroke = attrs.get('stroke').value
        if attrs.get('stroke-linecap'):
            self.stroke_linecap = attrs.get('stroke-linecap').value
        if attrs.get('onload'):
            self.onload = attrs.get('onload').value
        if attrs.get('baseline-shift'):
            self.baseline_shift = attrs.get('baseline-shift').value
        if attrs.get('stroke-width'):
            self.stroke_width = attrs.get('stroke-width').value
        if attrs.get('id'):
            self.id = attrs.get('id').value
        if attrs.get('fill'):
            self.fill = attrs.get('fill').value
        if attrs.get('onmouseover'):
            self.onmouseover = attrs.get('onmouseover').value
        if attrs.get('cursor'):
            self.cursor = attrs.get('cursor').value
        if attrs.get('style'):
            self.style = attrs.get('style').value
        if attrs.get('space'):
            self.space = attrs.get('space').value
        if attrs.get('fill-opacity'):
            self.fill_opacity = attrs.get('fill-opacity').value
        if attrs.get('lengthAdjust'):
            self.lengthAdjust = attrs.get('lengthAdjust').value
        if attrs.get('font-stretch'):
            self.font_stretch = attrs.get('font-stretch').value
        if attrs.get('stroke-miterlimit'):
            self.stroke_miterlimit = attrs.get('stroke-miterlimit').value
        if attrs.get('onactivate'):
            self.onactivate = attrs.get('onactivate').value
        if attrs.get('font-variant'):
            self.font_variant = attrs.get('font-variant').value
        if attrs.get('font-style'):
            self.font_style = attrs.get('font-style').value
        if attrs.get('glyph-orientation-horizontal'):
            self.glyph_orientation_horizontal = attrs.get('glyph-orientation-horizontal').value
        if attrs.get('font-weight'):
            self.font_weight = attrs.get('font-weight').value
        if attrs.get('onfocusin'):
            self.onfocusin = attrs.get('onfocusin').value
        if attrs.get('opacity'):
            self.opacity = attrs.get('opacity').value
        if attrs.get('direction'):
            self.direction = attrs.get('direction').value
        if attrs.get('onmousemove'):
            self.onmousemove = attrs.get('onmousemove').value
        if attrs.get('onclick'):
            self.onclick = attrs.get('onclick').value
        if attrs.get('onmouseout'):
            self.onmouseout = attrs.get('onmouseout').value
        if attrs.get('clip-path'):
            self.clip_path = attrs.get('clip-path').value
        if attrs.get('alignment-baseline'):
            self.alignment_baseline = attrs.get('alignment-baseline').value
        if attrs.get('glyph-orientation-vertical'):
            self.glyph_orientation_vertical = attrs.get('glyph-orientation-vertical').value
        if attrs.get('visibility'):
            self.visibility = attrs.get('visibility').value
        if attrs.get('unicode-bidi'):
            self.unicode_bidi = attrs.get('unicode-bidi').value
        if attrs.get('base'):
            self.base = attrs.get('base').value
        if attrs.get('clip-rule'):
            self.clip_rule = attrs.get('clip-rule').value
        if attrs.get('dominant-baseline'):
            self.dominant_baseline = attrs.get('dominant-baseline').value
        if attrs.get('dx'):
            self.dx = attrs.get('dx').value
        if attrs.get('dy'):
            self.dy = attrs.get('dy').value
        if attrs.get('externalResourcesRequired'):
            if attrs.get('externalResourcesRequired').value in ('true', '1'):
                self.externalResourcesRequired = True
            elif attrs.get('externalResourcesRequired').value in ('false', '0'):
                self.externalResourcesRequired = False
            else:
                raise ValueError('Bad boolean attribute (externalResourcesRequired)')
        if attrs.get('font-family'):
            self.font_family = attrs.get('font-family').value
        if attrs.get('class'):
            self.classxx = attrs.get('class').value
        if attrs.get('lang'):
            self.lang = attrs.get('lang').value
        if attrs.get('rotate'):
            self.rotate = attrs.get('rotate').value
        if attrs.get('stroke-opacity'):
            self.stroke_opacity = attrs.get('stroke-opacity').value
        if attrs.get('textLength'):
            self.textLength = attrs.get('textLength').value
        if attrs.get('font-size-adjust'):
            self.font_size_adjust = attrs.get('font-size-adjust').value
        if attrs.get('fill-rule'):
            self.fill_rule = attrs.get('fill-rule').value
        if attrs.get('mask'):
            self.mask = attrs.get('mask').value
        if attrs.get('stroke-dashoffset'):
            self.stroke_dashoffset = attrs.get('stroke-dashoffset').value
        if attrs.get('text-anchor'):
            self.text_anchor = attrs.get('text-anchor').value
        if attrs.get('text-decoration'):
            self.text_decoration = attrs.get('text-decoration').value
        if attrs.get('filter'):
            self.filter = attrs.get('filter').value
        if attrs.get('pointer-events'):
            self.pointer_events = attrs.get('pointer-events').value
        if attrs.get('requiredFeatures'):
            self.requiredFeatures = attrs.get('requiredFeatures').value
        if attrs.get('systemLanguage'):
            self.systemLanguage = attrs.get('systemLanguage').value
        if attrs.get('stroke-dasharray'):
            self.stroke_dasharray = attrs.get('stroke-dasharray').value
        if attrs.get('onmouseup'):
            self.onmouseup = attrs.get('onmouseup').value
        if attrs.get('y'):
            self.y = attrs.get('y').value
        if attrs.get('x'):
            self.x = attrs.get('x').value
        if attrs.get('display'):
            self.display = attrs.get('display').value
        if attrs.get('onmousedown'):
            self.onmousedown = attrs.get('onmousedown').value
        if attrs.get('color-interpolation'):
            self.color_interpolation = attrs.get('color-interpolation').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'desc':
            childobj_ = descType.factory()
            childobj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'desc', childobj_)
            self.content_.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'title':
            childobj_ = titleType.factory()
            childobj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'title', childobj_)
            self.content_.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'metadata':
            childobj_ = metadataType.factory()
            childobj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'metadata', childobj_)
            self.content_.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'tspan':
            childobj_ = tspanType.factory()
            childobj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'tspan', childobj_)
            self.content_.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'tref':
            childobj_ = trefType.factory()
            childobj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'tref', childobj_)
            self.content_.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'altGlyph':
            childobj_ = altGlyphType.factory()
            childobj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'altGlyph', childobj_)
            self.content_.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'a':
            childobj_ = aType.factory()
            childobj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'a', childobj_)
            self.content_.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animate':
            childobj_ = animateType.factory()
            childobj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'animate', childobj_)
            self.content_.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'set':
            childobj_ = setType.factory()
            childobj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'set', childobj_)
            self.content_.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animateColor':
            childobj_ = animateColorType.factory()
            childobj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'animateColor', childobj_)
            self.content_.append(obj_)
        elif child_.nodeType == Node.TEXT_NODE:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.nodeValue)
            self.content_.append(obj_)
# end class tspanType


class trefType(object):
    subclass = None
    superclass = None
    def __init__(self, stroke_linejoin=None, fill_rule=None, font_size=None, text_rendering=None, color_rendering=None, requiredExtensions=None, color=None, onfocusout=None, image_rendering=None, actuate=None, letter_spacing=None, stroke_dashoffset=None, word_spacing=None, cursor=None, stroke=None, href=None, onload=None, baseline_shift=None, stroke_width=None, id=None, fill=None, onmouseover=None, filter=None, style=None, title_attr=None, show='other', glyph_orientation_horizontal=None, lengthAdjust=None, shape_rendering=None, font_stretch=None, role=None, onactivate=None, font_variant=None, font_style=None, stroke_miterlimit=None, font_weight=None, type_=None, onfocusin=None, opacity=None, direction=None, onmousemove=None, onclick=None, onmouseout=None, clip_path=None, glyph_orientation_vertical=None, alignment_baseline=None, stroke_linecap=None, visibility=None, unicode_bidi=None, base=None, clip_rule=None, dominant_baseline=None, dx=None, dy=None, externalResourcesRequired=None, font_family=None, classxx=None, lang=None, rotate=None, stroke_opacity=None, textLength=None, font_size_adjust=None, arcrole=None, mask=None, space=None, text_anchor=None, text_decoration=None, fill_opacity=None, pointer_events=None, requiredFeatures=None, systemLanguage=None, stroke_dasharray=None, onmouseup=None, y=None, x=None, display=None, onmousedown=None, color_interpolation=None):
        self.internalName = "tref"
        self.stroke_linejoin = stroke_linejoin
        self.fill_rule = fill_rule
        self.font_size = font_size
        self.text_rendering = text_rendering
        self.color_rendering = color_rendering
        self.requiredExtensions = requiredExtensions
        self.color = color
        self.onfocusout = onfocusout
        self.image_rendering = image_rendering
        self.actuate = actuate
        self.letter_spacing = letter_spacing
        self.stroke_dashoffset = stroke_dashoffset
        self.word_spacing = word_spacing
        self.cursor = cursor
        self.stroke = stroke
        self.href = href
        self.onload = onload
        self.baseline_shift = baseline_shift
        self.stroke_width = stroke_width
        self.id = id
        self.fill = fill
        self.onmouseover = onmouseover
        self.filter = filter
        self.style = style
        self.title_attr = title_attr
        self.show = show
        self.glyph_orientation_horizontal = glyph_orientation_horizontal
        self.lengthAdjust = lengthAdjust
        self.shape_rendering = shape_rendering
        self.font_stretch = font_stretch
        self.role = role
        self.onactivate = onactivate
        self.font_variant = font_variant
        self.font_style = font_style
        self.stroke_miterlimit = stroke_miterlimit
        self.font_weight = font_weight
        self.type_ = type_
        self.onfocusin = onfocusin
        self.opacity = opacity
        self.direction = direction
        self.onmousemove = onmousemove
        self.onclick = onclick
        self.onmouseout = onmouseout
        self.clip_path = clip_path
        self.glyph_orientation_vertical = glyph_orientation_vertical
        self.alignment_baseline = alignment_baseline
        self.stroke_linecap = stroke_linecap
        self.visibility = visibility
        self.unicode_bidi = unicode_bidi
        self.base = base
        self.clip_rule = clip_rule
        self.dominant_baseline = dominant_baseline
        self.dx = dx
        self.dy = dy
        self.externalResourcesRequired = externalResourcesRequired
        self.font_family = font_family
        self.classxx = classxx
        self.lang = lang
        self.rotate = rotate
        self.stroke_opacity = stroke_opacity
        self.textLength = textLength
        self.font_size_adjust = font_size_adjust
        self.arcrole = arcrole
        self.mask = mask
        self.space = space
        self.text_anchor = text_anchor
        self.text_decoration = text_decoration
        self.fill_opacity = fill_opacity
        self.pointer_events = pointer_events
        self.requiredFeatures = requiredFeatures
        self.systemLanguage = systemLanguage
        self.stroke_dasharray = stroke_dasharray
        self.onmouseup = onmouseup
        self.y = y
        self.x = x
        self.display = display
        self.onmousedown = onmousedown
        self.color_interpolation = color_interpolation
        self.internalElements = []
    def factory(*args_, **kwargs_):
        if trefType.subclass:
            return trefType.subclass(*args_, **kwargs_)
        else:
            return trefType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def addElement(self, value): self.internalElements.append(value)
    def get_stroke_linejoin(self): return self.stroke_linejoin
    def set_stroke_linejoin(self, stroke_linejoin): self.stroke_linejoin = stroke_linejoin
    def get_fill_rule(self): return self.fill_rule
    def set_fill_rule(self, fill_rule): self.fill_rule = fill_rule
    def get_font_size(self): return self.font_size
    def set_font_size(self, font_size): self.font_size = font_size
    def get_text_rendering(self): return self.text_rendering
    def set_text_rendering(self, text_rendering): self.text_rendering = text_rendering
    def get_color_rendering(self): return self.color_rendering
    def set_color_rendering(self, color_rendering): self.color_rendering = color_rendering
    def get_requiredExtensions(self): return self.requiredExtensions
    def set_requiredExtensions(self, requiredExtensions): self.requiredExtensions = requiredExtensions
    def get_color(self): return self.color
    def set_color(self, color): self.color = color
    def get_onfocusout(self): return self.onfocusout
    def set_onfocusout(self, onfocusout): self.onfocusout = onfocusout
    def get_image_rendering(self): return self.image_rendering
    def set_image_rendering(self, image_rendering): self.image_rendering = image_rendering
    def get_actuate(self): return self.actuate
    def set_actuate(self, actuate): self.actuate = actuate
    def get_letter_spacing(self): return self.letter_spacing
    def set_letter_spacing(self, letter_spacing): self.letter_spacing = letter_spacing
    def get_stroke_dashoffset(self): return self.stroke_dashoffset
    def set_stroke_dashoffset(self, stroke_dashoffset): self.stroke_dashoffset = stroke_dashoffset
    def get_word_spacing(self): return self.word_spacing
    def set_word_spacing(self, word_spacing): self.word_spacing = word_spacing
    def get_cursor(self): return self.cursor
    def set_cursor(self, cursor): self.cursor = cursor
    def get_stroke(self): return self.stroke
    def set_stroke(self, stroke): self.stroke = stroke
    def get_href(self): return self.href
    def set_href(self, href): self.href = href
    def get_onload(self): return self.onload
    def set_onload(self, onload): self.onload = onload
    def get_baseline_shift(self): return self.baseline_shift
    def set_baseline_shift(self, baseline_shift): self.baseline_shift = baseline_shift
    def get_stroke_width(self): return self.stroke_width
    def set_stroke_width(self, stroke_width): self.stroke_width = stroke_width
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_fill(self): return self.fill
    def set_fill(self, fill): self.fill = fill
    def get_onmouseover(self): return self.onmouseover
    def set_onmouseover(self, onmouseover): self.onmouseover = onmouseover
    def get_filter(self): return self.filter
    def set_filter(self, filter): self.filter = filter
    def get_style(self): return self.style
    def set_style(self, style): self.style = style
    def get_title_attr(self): return self.title_attr
    def set_title_attr(self, title_attr): self.title_attr = title_attr
    def get_show(self): return self.show
    def set_show(self, show): self.show = show
    def get_glyph_orientation_horizontal(self): return self.glyph_orientation_horizontal
    def set_glyph_orientation_horizontal(self, glyph_orientation_horizontal): self.glyph_orientation_horizontal = glyph_orientation_horizontal
    def get_lengthAdjust(self): return self.lengthAdjust
    def set_lengthAdjust(self, lengthAdjust): self.lengthAdjust = lengthAdjust
    def get_shape_rendering(self): return self.shape_rendering
    def set_shape_rendering(self, shape_rendering): self.shape_rendering = shape_rendering
    def get_font_stretch(self): return self.font_stretch
    def set_font_stretch(self, font_stretch): self.font_stretch = font_stretch
    def get_role(self): return self.role
    def set_role(self, role): self.role = role
    def get_onactivate(self): return self.onactivate
    def set_onactivate(self, onactivate): self.onactivate = onactivate
    def get_font_variant(self): return self.font_variant
    def set_font_variant(self, font_variant): self.font_variant = font_variant
    def get_font_style(self): return self.font_style
    def set_font_style(self, font_style): self.font_style = font_style
    def get_stroke_miterlimit(self): return self.stroke_miterlimit
    def set_stroke_miterlimit(self, stroke_miterlimit): self.stroke_miterlimit = stroke_miterlimit
    def get_font_weight(self): return self.font_weight
    def set_font_weight(self, font_weight): self.font_weight = font_weight
    def get_type(self): return self.type_
    def set_type(self, type_): self.type_ = type_
    def get_onfocusin(self): return self.onfocusin
    def set_onfocusin(self, onfocusin): self.onfocusin = onfocusin
    def get_opacity(self): return self.opacity
    def set_opacity(self, opacity): self.opacity = opacity
    def get_direction(self): return self.direction
    def set_direction(self, direction): self.direction = direction
    def get_onmousemove(self): return self.onmousemove
    def set_onmousemove(self, onmousemove): self.onmousemove = onmousemove
    def get_onclick(self): return self.onclick
    def set_onclick(self, onclick): self.onclick = onclick
    def get_onmouseout(self): return self.onmouseout
    def set_onmouseout(self, onmouseout): self.onmouseout = onmouseout
    def get_clip_path(self): return self.clip_path
    def set_clip_path(self, clip_path): self.clip_path = clip_path
    def get_glyph_orientation_vertical(self): return self.glyph_orientation_vertical
    def set_glyph_orientation_vertical(self, glyph_orientation_vertical): self.glyph_orientation_vertical = glyph_orientation_vertical
    def get_alignment_baseline(self): return self.alignment_baseline
    def set_alignment_baseline(self, alignment_baseline): self.alignment_baseline = alignment_baseline
    def get_stroke_linecap(self): return self.stroke_linecap
    def set_stroke_linecap(self, stroke_linecap): self.stroke_linecap = stroke_linecap
    def get_visibility(self): return self.visibility
    def set_visibility(self, visibility): self.visibility = visibility
    def get_unicode_bidi(self): return self.unicode_bidi
    def set_unicode_bidi(self, unicode_bidi): self.unicode_bidi = unicode_bidi
    def get_base(self): return self.base
    def set_base(self, base): self.base = base
    def get_clip_rule(self): return self.clip_rule
    def set_clip_rule(self, clip_rule): self.clip_rule = clip_rule
    def get_dominant_baseline(self): return self.dominant_baseline
    def set_dominant_baseline(self, dominant_baseline): self.dominant_baseline = dominant_baseline
    def get_dx(self): return self.dx
    def set_dx(self, dx): self.dx = dx
    def get_dy(self): return self.dy
    def set_dy(self, dy): self.dy = dy
    def get_externalResourcesRequired(self): return self.externalResourcesRequired
    def set_externalResourcesRequired(self, externalResourcesRequired): self.externalResourcesRequired = externalResourcesRequired
    def get_font_family(self): return self.font_family
    def set_font_family(self, font_family): self.font_family = font_family
    def get_class(self): return self.classxx
    def set_class(self, classxx): self.classxx = classxx
    def get_lang(self): return self.lang
    def set_lang(self, lang): self.lang = lang
    def get_rotate(self): return self.rotate
    def set_rotate(self, rotate): self.rotate = rotate
    def get_stroke_opacity(self): return self.stroke_opacity
    def set_stroke_opacity(self, stroke_opacity): self.stroke_opacity = stroke_opacity
    def get_textLength(self): return self.textLength
    def set_textLength(self, textLength): self.textLength = textLength
    def get_font_size_adjust(self): return self.font_size_adjust
    def set_font_size_adjust(self, font_size_adjust): self.font_size_adjust = font_size_adjust
    def get_arcrole(self): return self.arcrole
    def set_arcrole(self, arcrole): self.arcrole = arcrole
    def get_mask(self): return self.mask
    def set_mask(self, mask): self.mask = mask
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_text_anchor(self): return self.text_anchor
    def set_text_anchor(self, text_anchor): self.text_anchor = text_anchor
    def get_text_decoration(self): return self.text_decoration
    def set_text_decoration(self, text_decoration): self.text_decoration = text_decoration
    def get_fill_opacity(self): return self.fill_opacity
    def set_fill_opacity(self, fill_opacity): self.fill_opacity = fill_opacity
    def get_pointer_events(self): return self.pointer_events
    def set_pointer_events(self, pointer_events): self.pointer_events = pointer_events
    def get_requiredFeatures(self): return self.requiredFeatures
    def set_requiredFeatures(self, requiredFeatures): self.requiredFeatures = requiredFeatures
    def get_systemLanguage(self): return self.systemLanguage
    def set_systemLanguage(self, systemLanguage): self.systemLanguage = systemLanguage
    def get_stroke_dasharray(self): return self.stroke_dasharray
    def set_stroke_dasharray(self, stroke_dasharray): self.stroke_dasharray = stroke_dasharray
    def get_onmouseup(self): return self.onmouseup
    def set_onmouseup(self, onmouseup): self.onmouseup = onmouseup
    def get_y(self): return self.y
    def set_y(self, y): self.y = y
    def get_x(self): return self.x
    def set_x(self, x): self.x = x
    def get_display(self): return self.display
    def set_display(self, display): self.display = display
    def get_onmousedown(self): return self.onmousedown
    def set_onmousedown(self, onmousedown): self.onmousedown = onmousedown
    def get_color_interpolation(self): return self.color_interpolation
    def set_color_interpolation(self, color_interpolation): self.color_interpolation = color_interpolation
    def export(self, outfile, level, namespace_='svg:', name_='trefType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, self.internalName, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='trefType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, self.internalName))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='svg:', name_='trefType'):
        if self.stroke_linejoin is not None:
            outfile.write(' stroke-linejoin=%s' % (quote_attrib(self.stroke_linejoin), ))
        if self.fill_rule is not None:
            outfile.write(' fill-rule=%s' % (quote_attrib(self.fill_rule), ))
        if self.font_size is not None:
            outfile.write(' font-size=%s' % (quote_attrib(self.font_size), ))
        if self.text_rendering is not None:
            outfile.write(' text-rendering=%s' % (quote_attrib(self.text_rendering), ))
        if self.color_rendering is not None:
            outfile.write(' color-rendering=%s' % (quote_attrib(self.color_rendering), ))
        if self.requiredExtensions is not None:
            outfile.write(' requiredExtensions=%s' % (quote_attrib(self.requiredExtensions), ))
        if self.color is not None:
            outfile.write(' color=%s' % (quote_attrib(self.color), ))
        if self.onfocusout is not None:
            outfile.write(' onfocusout=%s' % (quote_attrib(self.onfocusout), ))
        if self.image_rendering is not None:
            outfile.write(' image-rendering=%s' % (quote_attrib(self.image_rendering), ))
        if self.actuate is not None:
            outfile.write(' actuate=%s' % (quote_attrib(self.actuate), ))
        if self.letter_spacing is not None:
            outfile.write(' letter-spacing=%s' % (quote_attrib(self.letter_spacing), ))
        if self.stroke_dashoffset is not None:
            outfile.write(' stroke-dashoffset=%s' % (quote_attrib(self.stroke_dashoffset), ))
        if self.word_spacing is not None:
            outfile.write(' word-spacing=%s' % (quote_attrib(self.word_spacing), ))
        if self.cursor is not None:
            outfile.write(' cursor=%s' % (quote_attrib(self.cursor), ))
        if self.stroke is not None:
            outfile.write(' stroke=%s' % (quote_attrib(self.stroke), ))
        if self.href is not None:
            outfile.write(' href=%s' % (quote_attrib(self.href), ))
        if self.onload is not None:
            outfile.write(' onload=%s' % (quote_attrib(self.onload), ))
        if self.baseline_shift is not None:
            outfile.write(' baseline-shift=%s' % (quote_attrib(self.baseline_shift), ))
        if self.stroke_width is not None:
            outfile.write(' stroke-width=%s' % (quote_attrib(self.stroke_width), ))
        if self.id is not None:
            outfile.write(' id=%s' % (quote_attrib(self.id), ))
        if self.fill is not None:
            outfile.write(' fill=%s' % (quote_attrib(self.fill), ))
        if self.onmouseover is not None:
            outfile.write(' onmouseover=%s' % (quote_attrib(self.onmouseover), ))
        if self.filter is not None:
            outfile.write(' filter=%s' % (quote_attrib(self.filter), ))
        if self.style is not None:
            outfile.write(' style=%s' % (quote_attrib(self.style), ))
        if self.title_attr is not None:
            outfile.write(' title_attr=%s' % (quote_attrib(self.title_attr), ))
        if self.show is not None:
            outfile.write(' show=%s' % (quote_attrib(self.show), ))
        if self.glyph_orientation_horizontal is not None:
            outfile.write(' glyph-orientation-horizontal=%s' % (quote_attrib(self.glyph_orientation_horizontal), ))
        if self.lengthAdjust is not None:
            outfile.write(' lengthAdjust=%s' % (quote_attrib(self.lengthAdjust), ))
        if self.shape_rendering is not None:
            outfile.write(' shape-rendering=%s' % (quote_attrib(self.shape_rendering), ))
        if self.font_stretch is not None:
            outfile.write(' font-stretch=%s' % (quote_attrib(self.font_stretch), ))
        if self.role is not None:
            outfile.write(' role=%s' % (quote_attrib(self.role), ))
        if self.onactivate is not None:
            outfile.write(' onactivate=%s' % (quote_attrib(self.onactivate), ))
        if self.font_variant is not None:
            outfile.write(' font-variant=%s' % (quote_attrib(self.font_variant), ))
        if self.font_style is not None:
            outfile.write(' font-style=%s' % (quote_attrib(self.font_style), ))
        if self.stroke_miterlimit is not None:
            outfile.write(' stroke-miterlimit=%s' % (quote_attrib(self.stroke_miterlimit), ))
        if self.font_weight is not None:
            outfile.write(' font-weight=%s' % (quote_attrib(self.font_weight), ))
        if self.type_ is not None:
            outfile.write(' type=%s' % (quote_attrib(self.type_), ))
        if self.onfocusin is not None:
            outfile.write(' onfocusin=%s' % (quote_attrib(self.onfocusin), ))
        if self.opacity is not None:
            outfile.write(' opacity=%s' % (quote_attrib(self.opacity), ))
        if self.direction is not None:
            outfile.write(' direction=%s' % (quote_attrib(self.direction), ))
        if self.onmousemove is not None:
            outfile.write(' onmousemove=%s' % (quote_attrib(self.onmousemove), ))
        if self.onclick is not None:
            outfile.write(' onclick=%s' % (quote_attrib(self.onclick), ))
        if self.onmouseout is not None:
            outfile.write(' onmouseout=%s' % (quote_attrib(self.onmouseout), ))
        if self.clip_path is not None:
            outfile.write(' clip-path=%s' % (quote_attrib(self.clip_path), ))
        if self.glyph_orientation_vertical is not None:
            outfile.write(' glyph-orientation-vertical=%s' % (quote_attrib(self.glyph_orientation_vertical), ))
        if self.alignment_baseline is not None:
            outfile.write(' alignment-baseline=%s' % (quote_attrib(self.alignment_baseline), ))
        if self.stroke_linecap is not None:
            outfile.write(' stroke-linecap=%s' % (quote_attrib(self.stroke_linecap), ))
        if self.visibility is not None:
            outfile.write(' visibility=%s' % (quote_attrib(self.visibility), ))
        if self.unicode_bidi is not None:
            outfile.write(' unicode-bidi=%s' % (quote_attrib(self.unicode_bidi), ))
        if self.base is not None:
            outfile.write(' base=%s' % (quote_attrib(self.base), ))
        if self.clip_rule is not None:
            outfile.write(' clip-rule=%s' % (quote_attrib(self.clip_rule), ))
        if self.dominant_baseline is not None:
            outfile.write(' dominant-baseline=%s' % (quote_attrib(self.dominant_baseline), ))
        if self.dx is not None:
            outfile.write(' dx=%s' % (quote_attrib(self.dx), ))
        if self.dy is not None:
            outfile.write(' dy=%s' % (quote_attrib(self.dy), ))
        if self.externalResourcesRequired is not None:
            outfile.write(' externalResourcesRequired="%s"' % str_lower(str(self.externalResourcesRequired)))
        if self.font_family is not None:
            outfile.write(' font-family=%s' % (quote_attrib(self.font_family), ))
        if self.classxx is not None:
            outfile.write(' class=%s' % (quote_attrib(self.classxx), ))
        if self.lang is not None:
            outfile.write(' lang=%s' % (quote_attrib(self.lang), ))
        if self.rotate is not None:
            outfile.write(' rotate=%s' % (quote_attrib(self.rotate), ))
        if self.stroke_opacity is not None:
            outfile.write(' stroke-opacity=%s' % (quote_attrib(self.stroke_opacity), ))
        if self.textLength is not None:
            outfile.write(' textLength=%s' % (quote_attrib(self.textLength), ))
        if self.font_size_adjust is not None:
            outfile.write(' font-size-adjust=%s' % (quote_attrib(self.font_size_adjust), ))
        if self.arcrole is not None:
            outfile.write(' arcrole=%s' % (quote_attrib(self.arcrole), ))
        if self.mask is not None:
            outfile.write(' mask=%s' % (quote_attrib(self.mask), ))
        if self.space is not None:
            outfile.write(' space=%s' % (quote_attrib(self.space), ))
        if self.text_anchor is not None:
            outfile.write(' text-anchor=%s' % (quote_attrib(self.text_anchor), ))
        if self.text_decoration is not None:
            outfile.write(' text-decoration=%s' % (quote_attrib(self.text_decoration), ))
        if self.fill_opacity is not None:
            outfile.write(' fill-opacity=%s' % (quote_attrib(self.fill_opacity), ))
        if self.pointer_events is not None:
            outfile.write(' pointer-events=%s' % (quote_attrib(self.pointer_events), ))
        if self.requiredFeatures is not None:
            outfile.write(' requiredFeatures=%s' % (quote_attrib(self.requiredFeatures), ))
        if self.systemLanguage is not None:
            outfile.write(' systemLanguage=%s' % (quote_attrib(self.systemLanguage), ))
        if self.stroke_dasharray is not None:
            outfile.write(' stroke-dasharray=%s' % (quote_attrib(self.stroke_dasharray), ))
        if self.onmouseup is not None:
            outfile.write(' onmouseup=%s' % (quote_attrib(self.onmouseup), ))
        if self.y is not None:
            outfile.write(' y=%s' % (quote_attrib(self.y), ))
        if self.x is not None:
            outfile.write(' x=%s' % (quote_attrib(self.x), ))
        if self.display is not None:
            outfile.write(' display=%s' % (quote_attrib(self.display), ))
        if self.onmousedown is not None:
            outfile.write(' onmousedown=%s' % (quote_attrib(self.onmousedown), ))
        if self.color_interpolation is not None:
            outfile.write(' color-interpolation=%s' % (quote_attrib(self.color_interpolation), ))
    def exportChildren(self, outfile, level, namespace_='svg:', name_='trefType'):
        for element_ in self.internalElements:
            element_.export(outfile, level, namespace_, name_='desc')
    def hasContent_(self):
        if (
         len(self.internalElements)>0
            ):
            return True
        else:
            return False
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('stroke-linejoin'):
            self.stroke_linejoin = attrs.get('stroke-linejoin').value
        if attrs.get('fill-rule'):
            self.fill_rule = attrs.get('fill-rule').value
        if attrs.get('font-size'):
            self.font_size = attrs.get('font-size').value
        if attrs.get('text-rendering'):
            self.text_rendering = attrs.get('text-rendering').value
        if attrs.get('color-rendering'):
            self.color_rendering = attrs.get('color-rendering').value
        if attrs.get('requiredExtensions'):
            self.requiredExtensions = attrs.get('requiredExtensions').value
        if attrs.get('color'):
            self.color = attrs.get('color').value
        if attrs.get('onfocusout'):
            self.onfocusout = attrs.get('onfocusout').value
        if attrs.get('image-rendering'):
            self.image_rendering = attrs.get('image-rendering').value
        if attrs.get('actuate'):
            self.actuate = attrs.get('actuate').value
        if attrs.get('letter-spacing'):
            self.letter_spacing = attrs.get('letter-spacing').value
        if attrs.get('stroke-dashoffset'):
            self.stroke_dashoffset = attrs.get('stroke-dashoffset').value
        if attrs.get('word-spacing'):
            self.word_spacing = attrs.get('word-spacing').value
        if attrs.get('cursor'):
            self.cursor = attrs.get('cursor').value
        if attrs.get('stroke'):
            self.stroke = attrs.get('stroke').value
        if attrs.get('href'):
            self.href = attrs.get('href').value
        if attrs.get('onload'):
            self.onload = attrs.get('onload').value
        if attrs.get('baseline-shift'):
            self.baseline_shift = attrs.get('baseline-shift').value
        if attrs.get('stroke-width'):
            self.stroke_width = attrs.get('stroke-width').value
        if attrs.get('id'):
            self.id = attrs.get('id').value
        if attrs.get('fill'):
            self.fill = attrs.get('fill').value
        if attrs.get('onmouseover'):
            self.onmouseover = attrs.get('onmouseover').value
        if attrs.get('filter'):
            self.filter = attrs.get('filter').value
        if attrs.get('style'):
            self.style = attrs.get('style').value
        if attrs.get('title_attr'):
            self.title_attr = attrs.get('title_attr').value
        if attrs.get('show'):
            self.show = attrs.get('show').value
        if attrs.get('glyph-orientation-horizontal'):
            self.glyph_orientation_horizontal = attrs.get('glyph-orientation-horizontal').value
        if attrs.get('lengthAdjust'):
            self.lengthAdjust = attrs.get('lengthAdjust').value
        if attrs.get('shape-rendering'):
            self.shape_rendering = attrs.get('shape-rendering').value
        if attrs.get('font-stretch'):
            self.font_stretch = attrs.get('font-stretch').value
        if attrs.get('role'):
            self.role = attrs.get('role').value
        if attrs.get('onactivate'):
            self.onactivate = attrs.get('onactivate').value
        if attrs.get('font-variant'):
            self.font_variant = attrs.get('font-variant').value
        if attrs.get('font-style'):
            self.font_style = attrs.get('font-style').value
        if attrs.get('stroke-miterlimit'):
            self.stroke_miterlimit = attrs.get('stroke-miterlimit').value
        if attrs.get('font-weight'):
            self.font_weight = attrs.get('font-weight').value
        if attrs.get('type'):
            self.type_ = attrs.get('type').value
        if attrs.get('onfocusin'):
            self.onfocusin = attrs.get('onfocusin').value
        if attrs.get('opacity'):
            self.opacity = attrs.get('opacity').value
        if attrs.get('direction'):
            self.direction = attrs.get('direction').value
        if attrs.get('onmousemove'):
            self.onmousemove = attrs.get('onmousemove').value
        if attrs.get('onclick'):
            self.onclick = attrs.get('onclick').value
        if attrs.get('onmouseout'):
            self.onmouseout = attrs.get('onmouseout').value
        if attrs.get('clip-path'):
            self.clip_path = attrs.get('clip-path').value
        if attrs.get('glyph-orientation-vertical'):
            self.glyph_orientation_vertical = attrs.get('glyph-orientation-vertical').value
        if attrs.get('alignment-baseline'):
            self.alignment_baseline = attrs.get('alignment-baseline').value
        if attrs.get('stroke-linecap'):
            self.stroke_linecap = attrs.get('stroke-linecap').value
        if attrs.get('visibility'):
            self.visibility = attrs.get('visibility').value
        if attrs.get('unicode-bidi'):
            self.unicode_bidi = attrs.get('unicode-bidi').value
        if attrs.get('base'):
            self.base = attrs.get('base').value
        if attrs.get('clip-rule'):
            self.clip_rule = attrs.get('clip-rule').value
        if attrs.get('dominant-baseline'):
            self.dominant_baseline = attrs.get('dominant-baseline').value
        if attrs.get('dx'):
            self.dx = attrs.get('dx').value
        if attrs.get('dy'):
            self.dy = attrs.get('dy').value
        if attrs.get('externalResourcesRequired'):
            if attrs.get('externalResourcesRequired').value in ('true', '1'):
                self.externalResourcesRequired = True
            elif attrs.get('externalResourcesRequired').value in ('false', '0'):
                self.externalResourcesRequired = False
            else:
                raise ValueError('Bad boolean attribute (externalResourcesRequired)')
        if attrs.get('font-family'):
            self.font_family = attrs.get('font-family').value
        if attrs.get('class'):
            self.classxx = attrs.get('class').value
        if attrs.get('lang'):
            self.lang = attrs.get('lang').value
        if attrs.get('rotate'):
            self.rotate = attrs.get('rotate').value
        if attrs.get('stroke-opacity'):
            self.stroke_opacity = attrs.get('stroke-opacity').value
        if attrs.get('textLength'):
            self.textLength = attrs.get('textLength').value
        if attrs.get('font-size-adjust'):
            self.font_size_adjust = attrs.get('font-size-adjust').value
        if attrs.get('arcrole'):
            self.arcrole = attrs.get('arcrole').value
        if attrs.get('mask'):
            self.mask = attrs.get('mask').value
        if attrs.get('space'):
            self.space = attrs.get('space').value
        if attrs.get('text-anchor'):
            self.text_anchor = attrs.get('text-anchor').value
        if attrs.get('text-decoration'):
            self.text_decoration = attrs.get('text-decoration').value
        if attrs.get('fill-opacity'):
            self.fill_opacity = attrs.get('fill-opacity').value
        if attrs.get('pointer-events'):
            self.pointer_events = attrs.get('pointer-events').value
        if attrs.get('requiredFeatures'):
            self.requiredFeatures = attrs.get('requiredFeatures').value
        if attrs.get('systemLanguage'):
            self.systemLanguage = attrs.get('systemLanguage').value
        if attrs.get('stroke-dasharray'):
            self.stroke_dasharray = attrs.get('stroke-dasharray').value
        if attrs.get('onmouseup'):
            self.onmouseup = attrs.get('onmouseup').value
        if attrs.get('y'):
            self.y = attrs.get('y').value
        if attrs.get('x'):
            self.x = attrs.get('x').value
        if attrs.get('display'):
            self.display = attrs.get('display').value
        if attrs.get('onmousedown'):
            self.onmousedown = attrs.get('onmousedown').value
        if attrs.get('color-interpolation'):
            self.color_interpolation = attrs.get('color-interpolation').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'desc':
            obj_ = descType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'title':
            obj_ = titleType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'metadata':
            obj_ = metadataType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animate':
            obj_ = animateType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'set':
            obj_ = setType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animateColor':
            obj_ = animateColorType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
# end class trefType


class textPathType(object):
    subclass = None
    superclass = None
    def __init__(self, stroke_linejoin=None, fill_rule=None, font_size=None, text_rendering=None, requiredExtensions=None, onfocusout=None, actuate=None, letter_spacing=None, shape_rendering=None, word_spacing=None, cursor=None, stroke=None, href=None, onload=None, startOffset=None, baseline_shift=None, stroke_width=None, lengthAdjust=None, fill=None, filter=None, style=None, stroke_linecap=None, title_attr=None, space=None, show='other', glyph_orientation_horizontal=None, id=None, font_stretch=None, role=None, onactivate=None, font_variant=None, font_style=None, stroke_miterlimit=None, font_weight=None, type_=None, method=None, opacity=None, direction=None, onclick=None, onmouseout=None, clip_path=None, glyph_orientation_vertical=None, alignment_baseline=None, spacing=None, visibility=None, unicode_bidi=None, systemLanguage=None, clip_rule=None, dominant_baseline=None, image_rendering=None, externalResourcesRequired=None, font_family=None, classxx=None, lang=None, onfocusin=None, stroke_opacity=None, textLength=None, font_size_adjust=None, arcrole=None, mask=None, stroke_dashoffset=None, text_anchor=None, text_decoration=None, fill_opacity=None, pointer_events=None, requiredFeatures=None, base=None, stroke_dasharray=None, onmouseup=None, onmousemove=None, display=None, onmousedown=None, onmouseover=None, mixedclass_=None, content_=None):
        self.internalName = "textPath"
        self.stroke_linejoin = stroke_linejoin
        self.fill_rule = fill_rule
        self.font_size = font_size
        self.text_rendering = text_rendering
        self.requiredExtensions = requiredExtensions
        self.onfocusout = onfocusout
        self.actuate = actuate
        self.letter_spacing = letter_spacing
        self.shape_rendering = shape_rendering
        self.word_spacing = word_spacing
        self.cursor = cursor
        self.stroke = stroke
        self.href = href
        self.onload = onload
        self.startOffset = startOffset
        self.baseline_shift = baseline_shift
        self.stroke_width = stroke_width
        self.lengthAdjust = lengthAdjust
        self.fill = fill
        self.filter = filter
        self.style = style
        self.stroke_linecap = stroke_linecap
        self.title_attr = title_attr
        self.space = space
        self.show = show
        self.glyph_orientation_horizontal = glyph_orientation_horizontal
        self.id = id
        self.font_stretch = font_stretch
        self.role = role
        self.onactivate = onactivate
        self.font_variant = font_variant
        self.font_style = font_style
        self.stroke_miterlimit = stroke_miterlimit
        self.font_weight = font_weight
        self.type_ = type_
        self.method = method
        self.opacity = opacity
        self.direction = direction
        self.onclick = onclick
        self.onmouseout = onmouseout
        self.clip_path = clip_path
        self.glyph_orientation_vertical = glyph_orientation_vertical
        self.alignment_baseline = alignment_baseline
        self.spacing = spacing
        self.visibility = visibility
        self.unicode_bidi = unicode_bidi
        self.systemLanguage = systemLanguage
        self.clip_rule = clip_rule
        self.dominant_baseline = dominant_baseline
        self.image_rendering = image_rendering
        self.externalResourcesRequired = externalResourcesRequired
        self.font_family = font_family
        self.classxx = classxx
        self.lang = lang
        self.onfocusin = onfocusin
        self.stroke_opacity = stroke_opacity
        self.textLength = textLength
        self.font_size_adjust = font_size_adjust
        self.arcrole = arcrole
        self.mask = mask
        self.stroke_dashoffset = stroke_dashoffset
        self.text_anchor = text_anchor
        self.text_decoration = text_decoration
        self.fill_opacity = fill_opacity
        self.pointer_events = pointer_events
        self.requiredFeatures = requiredFeatures
        self.base = base
        self.stroke_dasharray = stroke_dasharray
        self.onmouseup = onmouseup
        self.onmousemove = onmousemove
        self.display = display
        self.onmousedown = onmousedown
        self.onmouseover = onmouseover
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
    def factory(*args_, **kwargs_):
        if textPathType.subclass:
            return textPathType.subclass(*args_, **kwargs_)
        else:
            return textPathType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def addElement(self, value): self.internalElements.append(value)
    def validate_tspanType(self, value):
        # validate type tspanType
        pass
    def validate_trefType(self, value):
        # validate type trefType
        pass
    def get_stroke_linejoin(self): return self.stroke_linejoin
    def set_stroke_linejoin(self, stroke_linejoin): self.stroke_linejoin = stroke_linejoin
    def get_fill_rule(self): return self.fill_rule
    def set_fill_rule(self, fill_rule): self.fill_rule = fill_rule
    def get_font_size(self): return self.font_size
    def set_font_size(self, font_size): self.font_size = font_size
    def get_text_rendering(self): return self.text_rendering
    def set_text_rendering(self, text_rendering): self.text_rendering = text_rendering
    def get_requiredExtensions(self): return self.requiredExtensions
    def set_requiredExtensions(self, requiredExtensions): self.requiredExtensions = requiredExtensions
    def get_onfocusout(self): return self.onfocusout
    def set_onfocusout(self, onfocusout): self.onfocusout = onfocusout
    def get_actuate(self): return self.actuate
    def set_actuate(self, actuate): self.actuate = actuate
    def get_letter_spacing(self): return self.letter_spacing
    def set_letter_spacing(self, letter_spacing): self.letter_spacing = letter_spacing
    def get_shape_rendering(self): return self.shape_rendering
    def set_shape_rendering(self, shape_rendering): self.shape_rendering = shape_rendering
    def get_word_spacing(self): return self.word_spacing
    def set_word_spacing(self, word_spacing): self.word_spacing = word_spacing
    def get_cursor(self): return self.cursor
    def set_cursor(self, cursor): self.cursor = cursor
    def get_stroke(self): return self.stroke
    def set_stroke(self, stroke): self.stroke = stroke
    def get_href(self): return self.href
    def set_href(self, href): self.href = href
    def get_onload(self): return self.onload
    def set_onload(self, onload): self.onload = onload
    def get_startOffset(self): return self.startOffset
    def set_startOffset(self, startOffset): self.startOffset = startOffset
    def get_baseline_shift(self): return self.baseline_shift
    def set_baseline_shift(self, baseline_shift): self.baseline_shift = baseline_shift
    def get_stroke_width(self): return self.stroke_width
    def set_stroke_width(self, stroke_width): self.stroke_width = stroke_width
    def get_lengthAdjust(self): return self.lengthAdjust
    def set_lengthAdjust(self, lengthAdjust): self.lengthAdjust = lengthAdjust
    def get_fill(self): return self.fill
    def set_fill(self, fill): self.fill = fill
    def get_filter(self): return self.filter
    def set_filter(self, filter): self.filter = filter
    def get_style(self): return self.style
    def set_style(self, style): self.style = style
    def get_stroke_linecap(self): return self.stroke_linecap
    def set_stroke_linecap(self, stroke_linecap): self.stroke_linecap = stroke_linecap
    def get_title_attr(self): return self.title_attr
    def set_title_attr(self, title_attr): self.title_attr = title_attr
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_show(self): return self.show
    def set_show(self, show): self.show = show
    def get_glyph_orientation_horizontal(self): return self.glyph_orientation_horizontal
    def set_glyph_orientation_horizontal(self, glyph_orientation_horizontal): self.glyph_orientation_horizontal = glyph_orientation_horizontal
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_font_stretch(self): return self.font_stretch
    def set_font_stretch(self, font_stretch): self.font_stretch = font_stretch
    def get_role(self): return self.role
    def set_role(self, role): self.role = role
    def get_onactivate(self): return self.onactivate
    def set_onactivate(self, onactivate): self.onactivate = onactivate
    def get_font_variant(self): return self.font_variant
    def set_font_variant(self, font_variant): self.font_variant = font_variant
    def get_font_style(self): return self.font_style
    def set_font_style(self, font_style): self.font_style = font_style
    def get_stroke_miterlimit(self): return self.stroke_miterlimit
    def set_stroke_miterlimit(self, stroke_miterlimit): self.stroke_miterlimit = stroke_miterlimit
    def get_font_weight(self): return self.font_weight
    def set_font_weight(self, font_weight): self.font_weight = font_weight
    def get_type(self): return self.type_
    def set_type(self, type_): self.type_ = type_
    def get_method(self): return self.method
    def set_method(self, method): self.method = method
    def get_opacity(self): return self.opacity
    def set_opacity(self, opacity): self.opacity = opacity
    def get_direction(self): return self.direction
    def set_direction(self, direction): self.direction = direction
    def get_onclick(self): return self.onclick
    def set_onclick(self, onclick): self.onclick = onclick
    def get_onmouseout(self): return self.onmouseout
    def set_onmouseout(self, onmouseout): self.onmouseout = onmouseout
    def get_clip_path(self): return self.clip_path
    def set_clip_path(self, clip_path): self.clip_path = clip_path
    def get_glyph_orientation_vertical(self): return self.glyph_orientation_vertical
    def set_glyph_orientation_vertical(self, glyph_orientation_vertical): self.glyph_orientation_vertical = glyph_orientation_vertical
    def get_alignment_baseline(self): return self.alignment_baseline
    def set_alignment_baseline(self, alignment_baseline): self.alignment_baseline = alignment_baseline
    def get_spacing(self): return self.spacing
    def set_spacing(self, spacing): self.spacing = spacing
    def get_visibility(self): return self.visibility
    def set_visibility(self, visibility): self.visibility = visibility
    def get_unicode_bidi(self): return self.unicode_bidi
    def set_unicode_bidi(self, unicode_bidi): self.unicode_bidi = unicode_bidi
    def get_systemLanguage(self): return self.systemLanguage
    def set_systemLanguage(self, systemLanguage): self.systemLanguage = systemLanguage
    def get_clip_rule(self): return self.clip_rule
    def set_clip_rule(self, clip_rule): self.clip_rule = clip_rule
    def get_dominant_baseline(self): return self.dominant_baseline
    def set_dominant_baseline(self, dominant_baseline): self.dominant_baseline = dominant_baseline
    def get_image_rendering(self): return self.image_rendering
    def set_image_rendering(self, image_rendering): self.image_rendering = image_rendering
    def get_externalResourcesRequired(self): return self.externalResourcesRequired
    def set_externalResourcesRequired(self, externalResourcesRequired): self.externalResourcesRequired = externalResourcesRequired
    def get_font_family(self): return self.font_family
    def set_font_family(self, font_family): self.font_family = font_family
    def get_class(self): return self.classxx
    def set_class(self, classxx): self.classxx = classxx
    def get_lang(self): return self.lang
    def set_lang(self, lang): self.lang = lang
    def get_onfocusin(self): return self.onfocusin
    def set_onfocusin(self, onfocusin): self.onfocusin = onfocusin
    def get_stroke_opacity(self): return self.stroke_opacity
    def set_stroke_opacity(self, stroke_opacity): self.stroke_opacity = stroke_opacity
    def get_textLength(self): return self.textLength
    def set_textLength(self, textLength): self.textLength = textLength
    def get_font_size_adjust(self): return self.font_size_adjust
    def set_font_size_adjust(self, font_size_adjust): self.font_size_adjust = font_size_adjust
    def get_arcrole(self): return self.arcrole
    def set_arcrole(self, arcrole): self.arcrole = arcrole
    def get_mask(self): return self.mask
    def set_mask(self, mask): self.mask = mask
    def get_stroke_dashoffset(self): return self.stroke_dashoffset
    def set_stroke_dashoffset(self, stroke_dashoffset): self.stroke_dashoffset = stroke_dashoffset
    def get_text_anchor(self): return self.text_anchor
    def set_text_anchor(self, text_anchor): self.text_anchor = text_anchor
    def get_text_decoration(self): return self.text_decoration
    def set_text_decoration(self, text_decoration): self.text_decoration = text_decoration
    def get_fill_opacity(self): return self.fill_opacity
    def set_fill_opacity(self, fill_opacity): self.fill_opacity = fill_opacity
    def get_pointer_events(self): return self.pointer_events
    def set_pointer_events(self, pointer_events): self.pointer_events = pointer_events
    def get_requiredFeatures(self): return self.requiredFeatures
    def set_requiredFeatures(self, requiredFeatures): self.requiredFeatures = requiredFeatures
    def get_base(self): return self.base
    def set_base(self, base): self.base = base
    def get_stroke_dasharray(self): return self.stroke_dasharray
    def set_stroke_dasharray(self, stroke_dasharray): self.stroke_dasharray = stroke_dasharray
    def get_onmouseup(self): return self.onmouseup
    def set_onmouseup(self, onmouseup): self.onmouseup = onmouseup
    def get_onmousemove(self): return self.onmousemove
    def set_onmousemove(self, onmousemove): self.onmousemove = onmousemove
    def get_display(self): return self.display
    def set_display(self, display): self.display = display
    def get_onmousedown(self): return self.onmousedown
    def set_onmousedown(self, onmousedown): self.onmousedown = onmousedown
    def get_onmouseover(self): return self.onmouseover
    def set_onmouseover(self, onmouseover): self.onmouseover = onmouseover
    def export(self, outfile, level, namespace_='svg:', name_='textPathType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, self.internalName, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='textPathType')
        outfile.write('>')
        self.exportChildren(outfile, level + 1, namespace_, name_)
        outfile.write('</%s%s>\n' % (namespace_, self.internalName))
    def exportAttributes(self, outfile, level, namespace_='svg:', name_='textPathType'):
        if self.stroke_linejoin is not None:
            outfile.write(' stroke-linejoin=%s' % (quote_attrib(self.stroke_linejoin), ))
        if self.fill_rule is not None:
            outfile.write(' fill-rule=%s' % (quote_attrib(self.fill_rule), ))
        if self.font_size is not None:
            outfile.write(' font-size=%s' % (quote_attrib(self.font_size), ))
        if self.text_rendering is not None:
            outfile.write(' text-rendering=%s' % (quote_attrib(self.text_rendering), ))
        if self.requiredExtensions is not None:
            outfile.write(' requiredExtensions=%s' % (quote_attrib(self.requiredExtensions), ))
        if self.onfocusout is not None:
            outfile.write(' onfocusout=%s' % (quote_attrib(self.onfocusout), ))
        if self.actuate is not None:
            outfile.write(' actuate=%s' % (quote_attrib(self.actuate), ))
        if self.letter_spacing is not None:
            outfile.write(' letter-spacing=%s' % (quote_attrib(self.letter_spacing), ))
        if self.shape_rendering is not None:
            outfile.write(' shape-rendering=%s' % (quote_attrib(self.shape_rendering), ))
        if self.word_spacing is not None:
            outfile.write(' word-spacing=%s' % (quote_attrib(self.word_spacing), ))
        if self.cursor is not None:
            outfile.write(' cursor=%s' % (quote_attrib(self.cursor), ))
        if self.stroke is not None:
            outfile.write(' stroke=%s' % (quote_attrib(self.stroke), ))
        if self.href is not None:
            outfile.write(' href=%s' % (quote_attrib(self.href), ))
        if self.onload is not None:
            outfile.write(' onload=%s' % (quote_attrib(self.onload), ))
        if self.startOffset is not None:
            outfile.write(' startOffset=%s' % (quote_attrib(self.startOffset), ))
        if self.baseline_shift is not None:
            outfile.write(' baseline-shift=%s' % (quote_attrib(self.baseline_shift), ))
        if self.stroke_width is not None:
            outfile.write(' stroke-width=%s' % (quote_attrib(self.stroke_width), ))
        if self.lengthAdjust is not None:
            outfile.write(' lengthAdjust=%s' % (quote_attrib(self.lengthAdjust), ))
        if self.fill is not None:
            outfile.write(' fill=%s' % (quote_attrib(self.fill), ))
        if self.filter is not None:
            outfile.write(' filter=%s' % (quote_attrib(self.filter), ))
        if self.style is not None:
            outfile.write(' style=%s' % (quote_attrib(self.style), ))
        if self.stroke_linecap is not None:
            outfile.write(' stroke-linecap=%s' % (quote_attrib(self.stroke_linecap), ))
        if self.title_attr is not None:
            outfile.write(' title_attr=%s' % (quote_attrib(self.title_attr), ))
        if self.space is not None:
            outfile.write(' space=%s' % (quote_attrib(self.space), ))
        if self.show is not None:
            outfile.write(' show=%s' % (quote_attrib(self.show), ))
        if self.glyph_orientation_horizontal is not None:
            outfile.write(' glyph-orientation-horizontal=%s' % (quote_attrib(self.glyph_orientation_horizontal), ))
        if self.id is not None:
            outfile.write(' id=%s' % (quote_attrib(self.id), ))
        if self.font_stretch is not None:
            outfile.write(' font-stretch=%s' % (quote_attrib(self.font_stretch), ))
        if self.role is not None:
            outfile.write(' role=%s' % (quote_attrib(self.role), ))
        if self.onactivate is not None:
            outfile.write(' onactivate=%s' % (quote_attrib(self.onactivate), ))
        if self.font_variant is not None:
            outfile.write(' font-variant=%s' % (quote_attrib(self.font_variant), ))
        if self.font_style is not None:
            outfile.write(' font-style=%s' % (quote_attrib(self.font_style), ))
        if self.stroke_miterlimit is not None:
            outfile.write(' stroke-miterlimit=%s' % (quote_attrib(self.stroke_miterlimit), ))
        if self.font_weight is not None:
            outfile.write(' font-weight=%s' % (quote_attrib(self.font_weight), ))
        if self.type_ is not None:
            outfile.write(' type=%s' % (quote_attrib(self.type_), ))
        if self.method is not None:
            outfile.write(' method=%s' % (quote_attrib(self.method), ))
        if self.opacity is not None:
            outfile.write(' opacity=%s' % (quote_attrib(self.opacity), ))
        if self.direction is not None:
            outfile.write(' direction=%s' % (quote_attrib(self.direction), ))
        if self.onclick is not None:
            outfile.write(' onclick=%s' % (quote_attrib(self.onclick), ))
        if self.onmouseout is not None:
            outfile.write(' onmouseout=%s' % (quote_attrib(self.onmouseout), ))
        if self.clip_path is not None:
            outfile.write(' clip-path=%s' % (quote_attrib(self.clip_path), ))
        if self.glyph_orientation_vertical is not None:
            outfile.write(' glyph-orientation-vertical=%s' % (quote_attrib(self.glyph_orientation_vertical), ))
        if self.alignment_baseline is not None:
            outfile.write(' alignment-baseline=%s' % (quote_attrib(self.alignment_baseline), ))
        if self.spacing is not None:
            outfile.write(' spacing=%s' % (quote_attrib(self.spacing), ))
        if self.visibility is not None:
            outfile.write(' visibility=%s' % (quote_attrib(self.visibility), ))
        if self.unicode_bidi is not None:
            outfile.write(' unicode-bidi=%s' % (quote_attrib(self.unicode_bidi), ))
        if self.systemLanguage is not None:
            outfile.write(' systemLanguage=%s' % (quote_attrib(self.systemLanguage), ))
        if self.clip_rule is not None:
            outfile.write(' clip-rule=%s' % (quote_attrib(self.clip_rule), ))
        if self.dominant_baseline is not None:
            outfile.write(' dominant-baseline=%s' % (quote_attrib(self.dominant_baseline), ))
        if self.image_rendering is not None:
            outfile.write(' image-rendering=%s' % (quote_attrib(self.image_rendering), ))
        if self.externalResourcesRequired is not None:
            outfile.write(' externalResourcesRequired="%s"' % str_lower(str(self.externalResourcesRequired)))
        if self.font_family is not None:
            outfile.write(' font-family=%s' % (quote_attrib(self.font_family), ))
        if self.classxx is not None:
            outfile.write(' class=%s' % (quote_attrib(self.classxx), ))
        if self.lang is not None:
            outfile.write(' lang=%s' % (quote_attrib(self.lang), ))
        if self.onfocusin is not None:
            outfile.write(' onfocusin=%s' % (quote_attrib(self.onfocusin), ))
        if self.stroke_opacity is not None:
            outfile.write(' stroke-opacity=%s' % (quote_attrib(self.stroke_opacity), ))
        if self.textLength is not None:
            outfile.write(' textLength=%s' % (quote_attrib(self.textLength), ))
        if self.font_size_adjust is not None:
            outfile.write(' font-size-adjust=%s' % (quote_attrib(self.font_size_adjust), ))
        if self.arcrole is not None:
            outfile.write(' arcrole=%s' % (quote_attrib(self.arcrole), ))
        if self.mask is not None:
            outfile.write(' mask=%s' % (quote_attrib(self.mask), ))
        if self.stroke_dashoffset is not None:
            outfile.write(' stroke-dashoffset=%s' % (quote_attrib(self.stroke_dashoffset), ))
        if self.text_anchor is not None:
            outfile.write(' text-anchor=%s' % (quote_attrib(self.text_anchor), ))
        if self.text_decoration is not None:
            outfile.write(' text-decoration=%s' % (quote_attrib(self.text_decoration), ))
        if self.fill_opacity is not None:
            outfile.write(' fill-opacity=%s' % (quote_attrib(self.fill_opacity), ))
        if self.pointer_events is not None:
            outfile.write(' pointer-events=%s' % (quote_attrib(self.pointer_events), ))
        if self.requiredFeatures is not None:
            outfile.write(' requiredFeatures=%s' % (quote_attrib(self.requiredFeatures), ))
        if self.base is not None:
            outfile.write(' base=%s' % (quote_attrib(self.base), ))
        if self.stroke_dasharray is not None:
            outfile.write(' stroke-dasharray=%s' % (quote_attrib(self.stroke_dasharray), ))
        if self.onmouseup is not None:
            outfile.write(' onmouseup=%s' % (quote_attrib(self.onmouseup), ))
        if self.onmousemove is not None:
            outfile.write(' onmousemove=%s' % (quote_attrib(self.onmousemove), ))
        if self.display is not None:
            outfile.write(' display=%s' % (quote_attrib(self.display), ))
        if self.onmousedown is not None:
            outfile.write(' onmousedown=%s' % (quote_attrib(self.onmousedown), ))
        if self.onmouseover is not None:
            outfile.write(' onmouseover=%s' % (quote_attrib(self.onmouseover), ))
    def exportChildren(self, outfile, level, namespace_='svg:', name_='textPathType'):
        for item_ in self.content_:
            item_.export(outfile, level, item_.name, namespace_)
    def hasContent_(self):
        if (
         len(self.internalElements)>0
            ):
            return True
        else:
            return False
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('stroke-linejoin'):
            self.stroke_linejoin = attrs.get('stroke-linejoin').value
        if attrs.get('fill-rule'):
            self.fill_rule = attrs.get('fill-rule').value
        if attrs.get('font-size'):
            self.font_size = attrs.get('font-size').value
        if attrs.get('text-rendering'):
            self.text_rendering = attrs.get('text-rendering').value
        if attrs.get('requiredExtensions'):
            self.requiredExtensions = attrs.get('requiredExtensions').value
        if attrs.get('onfocusout'):
            self.onfocusout = attrs.get('onfocusout').value
        if attrs.get('actuate'):
            self.actuate = attrs.get('actuate').value
        if attrs.get('letter-spacing'):
            self.letter_spacing = attrs.get('letter-spacing').value
        if attrs.get('shape-rendering'):
            self.shape_rendering = attrs.get('shape-rendering').value
        if attrs.get('word-spacing'):
            self.word_spacing = attrs.get('word-spacing').value
        if attrs.get('cursor'):
            self.cursor = attrs.get('cursor').value
        if attrs.get('stroke'):
            self.stroke = attrs.get('stroke').value
        if attrs.get('href'):
            self.href = attrs.get('href').value
        if attrs.get('onload'):
            self.onload = attrs.get('onload').value
        if attrs.get('startOffset'):
            self.startOffset = attrs.get('startOffset').value
        if attrs.get('baseline-shift'):
            self.baseline_shift = attrs.get('baseline-shift').value
        if attrs.get('stroke-width'):
            self.stroke_width = attrs.get('stroke-width').value
        if attrs.get('lengthAdjust'):
            self.lengthAdjust = attrs.get('lengthAdjust').value
        if attrs.get('fill'):
            self.fill = attrs.get('fill').value
        if attrs.get('filter'):
            self.filter = attrs.get('filter').value
        if attrs.get('style'):
            self.style = attrs.get('style').value
        if attrs.get('stroke-linecap'):
            self.stroke_linecap = attrs.get('stroke-linecap').value
        if attrs.get('title_attr'):
            self.title_attr = attrs.get('title_attr').value
        if attrs.get('space'):
            self.space = attrs.get('space').value
        if attrs.get('show'):
            self.show = attrs.get('show').value
        if attrs.get('glyph-orientation-horizontal'):
            self.glyph_orientation_horizontal = attrs.get('glyph-orientation-horizontal').value
        if attrs.get('id'):
            self.id = attrs.get('id').value
        if attrs.get('font-stretch'):
            self.font_stretch = attrs.get('font-stretch').value
        if attrs.get('role'):
            self.role = attrs.get('role').value
        if attrs.get('onactivate'):
            self.onactivate = attrs.get('onactivate').value
        if attrs.get('font-variant'):
            self.font_variant = attrs.get('font-variant').value
        if attrs.get('font-style'):
            self.font_style = attrs.get('font-style').value
        if attrs.get('stroke-miterlimit'):
            self.stroke_miterlimit = attrs.get('stroke-miterlimit').value
        if attrs.get('font-weight'):
            self.font_weight = attrs.get('font-weight').value
        if attrs.get('type'):
            self.type_ = attrs.get('type').value
        if attrs.get('method'):
            self.method = attrs.get('method').value
        if attrs.get('opacity'):
            self.opacity = attrs.get('opacity').value
        if attrs.get('direction'):
            self.direction = attrs.get('direction').value
        if attrs.get('onclick'):
            self.onclick = attrs.get('onclick').value
        if attrs.get('onmouseout'):
            self.onmouseout = attrs.get('onmouseout').value
        if attrs.get('clip-path'):
            self.clip_path = attrs.get('clip-path').value
        if attrs.get('glyph-orientation-vertical'):
            self.glyph_orientation_vertical = attrs.get('glyph-orientation-vertical').value
        if attrs.get('alignment-baseline'):
            self.alignment_baseline = attrs.get('alignment-baseline').value
        if attrs.get('spacing'):
            self.spacing = attrs.get('spacing').value
        if attrs.get('visibility'):
            self.visibility = attrs.get('visibility').value
        if attrs.get('unicode-bidi'):
            self.unicode_bidi = attrs.get('unicode-bidi').value
        if attrs.get('systemLanguage'):
            self.systemLanguage = attrs.get('systemLanguage').value
        if attrs.get('clip-rule'):
            self.clip_rule = attrs.get('clip-rule').value
        if attrs.get('dominant-baseline'):
            self.dominant_baseline = attrs.get('dominant-baseline').value
        if attrs.get('image-rendering'):
            self.image_rendering = attrs.get('image-rendering').value
        if attrs.get('externalResourcesRequired'):
            if attrs.get('externalResourcesRequired').value in ('true', '1'):
                self.externalResourcesRequired = True
            elif attrs.get('externalResourcesRequired').value in ('false', '0'):
                self.externalResourcesRequired = False
            else:
                raise ValueError('Bad boolean attribute (externalResourcesRequired)')
        if attrs.get('font-family'):
            self.font_family = attrs.get('font-family').value
        if attrs.get('class'):
            self.classxx = attrs.get('class').value
        if attrs.get('lang'):
            self.lang = attrs.get('lang').value
        if attrs.get('onfocusin'):
            self.onfocusin = attrs.get('onfocusin').value
        if attrs.get('stroke-opacity'):
            self.stroke_opacity = attrs.get('stroke-opacity').value
        if attrs.get('textLength'):
            self.textLength = attrs.get('textLength').value
        if attrs.get('font-size-adjust'):
            self.font_size_adjust = attrs.get('font-size-adjust').value
        if attrs.get('arcrole'):
            self.arcrole = attrs.get('arcrole').value
        if attrs.get('mask'):
            self.mask = attrs.get('mask').value
        if attrs.get('stroke-dashoffset'):
            self.stroke_dashoffset = attrs.get('stroke-dashoffset').value
        if attrs.get('text-anchor'):
            self.text_anchor = attrs.get('text-anchor').value
        if attrs.get('text-decoration'):
            self.text_decoration = attrs.get('text-decoration').value
        if attrs.get('fill-opacity'):
            self.fill_opacity = attrs.get('fill-opacity').value
        if attrs.get('pointer-events'):
            self.pointer_events = attrs.get('pointer-events').value
        if attrs.get('requiredFeatures'):
            self.requiredFeatures = attrs.get('requiredFeatures').value
        if attrs.get('base'):
            self.base = attrs.get('base').value
        if attrs.get('stroke-dasharray'):
            self.stroke_dasharray = attrs.get('stroke-dasharray').value
        if attrs.get('onmouseup'):
            self.onmouseup = attrs.get('onmouseup').value
        if attrs.get('onmousemove'):
            self.onmousemove = attrs.get('onmousemove').value
        if attrs.get('display'):
            self.display = attrs.get('display').value
        if attrs.get('onmousedown'):
            self.onmousedown = attrs.get('onmousedown').value
        if attrs.get('onmouseover'):
            self.onmouseover = attrs.get('onmouseover').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'desc':
            childobj_ = descType.factory()
            childobj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'desc', childobj_)
            self.content_.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'title':
            childobj_ = titleType.factory()
            childobj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'title', childobj_)
            self.content_.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'metadata':
            childobj_ = metadataType.factory()
            childobj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'metadata', childobj_)
            self.content_.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'tspan':
            childobj_ = tspanType.factory()
            childobj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'tspan', childobj_)
            self.content_.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'tref':
            childobj_ = trefType.factory()
            childobj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'tref', childobj_)
            self.content_.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'altGlyph':
            childobj_ = altGlyphType.factory()
            childobj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'altGlyph', childobj_)
            self.content_.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'a':
            childobj_ = aType.factory()
            childobj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'a', childobj_)
            self.content_.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animate':
            childobj_ = animateType.factory()
            childobj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'animate', childobj_)
            self.content_.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'set':
            childobj_ = setType.factory()
            childobj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'set', childobj_)
            self.content_.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animateColor':
            childobj_ = animateColorType.factory()
            childobj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'animateColor', childobj_)
            self.content_.append(obj_)
        elif child_.nodeType == Node.TEXT_NODE:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.nodeValue)
            self.content_.append(obj_)
# end class textPathType


class altGlyphType(object):
    subclass = None
    superclass = None
    def __init__(self, stroke_linejoin=None, fill_rule=None, font_size=None, text_rendering=None, color_rendering=None, clip_path=None, requiredExtensions=None, color=None, onfocusout=None, image_rendering=None, actuate=None, letter_spacing=None, stroke_dashoffset=None, word_spacing=None, cursor=None, stroke=None, href=None, onload=None, baseline_shift=None, stroke_width=None, id=None, fill=None, onmouseover=None, filter=None, style=None, title=None, show='other', glyph_orientation_horizontal=None, font_style=None, shape_rendering=None, font_stretch=None, role=None, onactivate=None, font_variant=None, stroke_miterlimit=None, font_weight=None, type_=None, glyphRef=None, opacity=None, direction=None, onmousemove=None, onclick=None, onmouseout=None, format=None, glyph_orientation_vertical=None, alignment_baseline=None, stroke_linecap=None, visibility=None, unicode_bidi=None, base=None, clip_rule=None, dominant_baseline=None, dx=None, dy=None, externalResourcesRequired=None, font_family=None, classxx=None, lang=None, onfocusin=None, rotate=None, stroke_opacity=None, font_size_adjust=None, arcrole=None, mask=None, space=None, text_anchor=None, text_decoration=None, fill_opacity=None, pointer_events=None, requiredFeatures=None, systemLanguage=None, stroke_dasharray=None, onmouseup=None, y=None, x=None, display=None, onmousedown=None, color_interpolation=None, valueOf_='', mixedclass_=None, content_=None):
        self.internalName = "altGlyph"
        self.stroke_linejoin = stroke_linejoin
        self.fill_rule = fill_rule
        self.font_size = font_size
        self.text_rendering = text_rendering
        self.color_rendering = color_rendering
        self.clip_path = clip_path
        self.requiredExtensions = requiredExtensions
        self.color = color
        self.onfocusout = onfocusout
        self.image_rendering = image_rendering
        self.actuate = actuate
        self.letter_spacing = letter_spacing
        self.stroke_dashoffset = stroke_dashoffset
        self.word_spacing = word_spacing
        self.cursor = cursor
        self.stroke = stroke
        self.href = href
        self.onload = onload
        self.baseline_shift = baseline_shift
        self.stroke_width = stroke_width
        self.id = id
        self.fill = fill
        self.onmouseover = onmouseover
        self.filter = filter
        self.style = style
        self.title = title
        self.show = show
        self.glyph_orientation_horizontal = glyph_orientation_horizontal
        self.font_style = font_style
        self.shape_rendering = shape_rendering
        self.font_stretch = font_stretch
        self.role = role
        self.onactivate = onactivate
        self.font_variant = font_variant
        self.stroke_miterlimit = stroke_miterlimit
        self.font_weight = font_weight
        self.type_ = type_
        self.glyphRef = glyphRef
        self.opacity = opacity
        self.direction = direction
        self.onmousemove = onmousemove
        self.onclick = onclick
        self.onmouseout = onmouseout
        self.format = format
        self.glyph_orientation_vertical = glyph_orientation_vertical
        self.alignment_baseline = alignment_baseline
        self.stroke_linecap = stroke_linecap
        self.visibility = visibility
        self.unicode_bidi = unicode_bidi
        self.base = base
        self.clip_rule = clip_rule
        self.dominant_baseline = dominant_baseline
        self.dx = dx
        self.dy = dy
        self.externalResourcesRequired = externalResourcesRequired
        self.font_family = font_family
        self.classxx = classxx
        self.lang = lang
        self.onfocusin = onfocusin
        self.rotate = rotate
        self.stroke_opacity = stroke_opacity
        self.font_size_adjust = font_size_adjust
        self.arcrole = arcrole
        self.mask = mask
        self.space = space
        self.text_anchor = text_anchor
        self.text_decoration = text_decoration
        self.fill_opacity = fill_opacity
        self.pointer_events = pointer_events
        self.requiredFeatures = requiredFeatures
        self.systemLanguage = systemLanguage
        self.stroke_dasharray = stroke_dasharray
        self.onmouseup = onmouseup
        self.y = y
        self.x = x
        self.display = display
        self.onmousedown = onmousedown
        self.color_interpolation = color_interpolation
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
    def factory(*args_, **kwargs_):
        if altGlyphType.subclass:
            return altGlyphType.subclass(*args_, **kwargs_)
        else:
            return altGlyphType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_stroke_linejoin(self): return self.stroke_linejoin
    def set_stroke_linejoin(self, stroke_linejoin): self.stroke_linejoin = stroke_linejoin
    def get_fill_rule(self): return self.fill_rule
    def set_fill_rule(self, fill_rule): self.fill_rule = fill_rule
    def get_font_size(self): return self.font_size
    def set_font_size(self, font_size): self.font_size = font_size
    def get_text_rendering(self): return self.text_rendering
    def set_text_rendering(self, text_rendering): self.text_rendering = text_rendering
    def get_color_rendering(self): return self.color_rendering
    def set_color_rendering(self, color_rendering): self.color_rendering = color_rendering
    def get_clip_path(self): return self.clip_path
    def set_clip_path(self, clip_path): self.clip_path = clip_path
    def get_requiredExtensions(self): return self.requiredExtensions
    def set_requiredExtensions(self, requiredExtensions): self.requiredExtensions = requiredExtensions
    def get_color(self): return self.color
    def set_color(self, color): self.color = color
    def get_onfocusout(self): return self.onfocusout
    def set_onfocusout(self, onfocusout): self.onfocusout = onfocusout
    def get_image_rendering(self): return self.image_rendering
    def set_image_rendering(self, image_rendering): self.image_rendering = image_rendering
    def get_actuate(self): return self.actuate
    def set_actuate(self, actuate): self.actuate = actuate
    def get_letter_spacing(self): return self.letter_spacing
    def set_letter_spacing(self, letter_spacing): self.letter_spacing = letter_spacing
    def get_stroke_dashoffset(self): return self.stroke_dashoffset
    def set_stroke_dashoffset(self, stroke_dashoffset): self.stroke_dashoffset = stroke_dashoffset
    def get_word_spacing(self): return self.word_spacing
    def set_word_spacing(self, word_spacing): self.word_spacing = word_spacing
    def get_cursor(self): return self.cursor
    def set_cursor(self, cursor): self.cursor = cursor
    def get_stroke(self): return self.stroke
    def set_stroke(self, stroke): self.stroke = stroke
    def get_href(self): return self.href
    def set_href(self, href): self.href = href
    def get_onload(self): return self.onload
    def set_onload(self, onload): self.onload = onload
    def get_baseline_shift(self): return self.baseline_shift
    def set_baseline_shift(self, baseline_shift): self.baseline_shift = baseline_shift
    def get_stroke_width(self): return self.stroke_width
    def set_stroke_width(self, stroke_width): self.stroke_width = stroke_width
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_fill(self): return self.fill
    def set_fill(self, fill): self.fill = fill
    def get_onmouseover(self): return self.onmouseover
    def set_onmouseover(self, onmouseover): self.onmouseover = onmouseover
    def get_filter(self): return self.filter
    def set_filter(self, filter): self.filter = filter
    def get_style(self): return self.style
    def set_style(self, style): self.style = style
    def get_title(self): return self.title
    def set_title(self, title): self.title = title
    def get_show(self): return self.show
    def set_show(self, show): self.show = show
    def get_glyph_orientation_horizontal(self): return self.glyph_orientation_horizontal
    def set_glyph_orientation_horizontal(self, glyph_orientation_horizontal): self.glyph_orientation_horizontal = glyph_orientation_horizontal
    def get_font_style(self): return self.font_style
    def set_font_style(self, font_style): self.font_style = font_style
    def get_shape_rendering(self): return self.shape_rendering
    def set_shape_rendering(self, shape_rendering): self.shape_rendering = shape_rendering
    def get_font_stretch(self): return self.font_stretch
    def set_font_stretch(self, font_stretch): self.font_stretch = font_stretch
    def get_role(self): return self.role
    def set_role(self, role): self.role = role
    def get_onactivate(self): return self.onactivate
    def set_onactivate(self, onactivate): self.onactivate = onactivate
    def get_font_variant(self): return self.font_variant
    def set_font_variant(self, font_variant): self.font_variant = font_variant
    def get_stroke_miterlimit(self): return self.stroke_miterlimit
    def set_stroke_miterlimit(self, stroke_miterlimit): self.stroke_miterlimit = stroke_miterlimit
    def get_font_weight(self): return self.font_weight
    def set_font_weight(self, font_weight): self.font_weight = font_weight
    def get_type(self): return self.type_
    def set_type(self, type_): self.type_ = type_
    def get_glyphRef(self): return self.glyphRef
    def set_glyphRef(self, glyphRef): self.glyphRef = glyphRef
    def get_opacity(self): return self.opacity
    def set_opacity(self, opacity): self.opacity = opacity
    def get_direction(self): return self.direction
    def set_direction(self, direction): self.direction = direction
    def get_onmousemove(self): return self.onmousemove
    def set_onmousemove(self, onmousemove): self.onmousemove = onmousemove
    def get_onclick(self): return self.onclick
    def set_onclick(self, onclick): self.onclick = onclick
    def get_onmouseout(self): return self.onmouseout
    def set_onmouseout(self, onmouseout): self.onmouseout = onmouseout
    def get_format(self): return self.format
    def set_format(self, format): self.format = format
    def get_glyph_orientation_vertical(self): return self.glyph_orientation_vertical
    def set_glyph_orientation_vertical(self, glyph_orientation_vertical): self.glyph_orientation_vertical = glyph_orientation_vertical
    def get_alignment_baseline(self): return self.alignment_baseline
    def set_alignment_baseline(self, alignment_baseline): self.alignment_baseline = alignment_baseline
    def get_stroke_linecap(self): return self.stroke_linecap
    def set_stroke_linecap(self, stroke_linecap): self.stroke_linecap = stroke_linecap
    def get_visibility(self): return self.visibility
    def set_visibility(self, visibility): self.visibility = visibility
    def get_unicode_bidi(self): return self.unicode_bidi
    def set_unicode_bidi(self, unicode_bidi): self.unicode_bidi = unicode_bidi
    def get_base(self): return self.base
    def set_base(self, base): self.base = base
    def get_clip_rule(self): return self.clip_rule
    def set_clip_rule(self, clip_rule): self.clip_rule = clip_rule
    def get_dominant_baseline(self): return self.dominant_baseline
    def set_dominant_baseline(self, dominant_baseline): self.dominant_baseline = dominant_baseline
    def get_dx(self): return self.dx
    def set_dx(self, dx): self.dx = dx
    def get_dy(self): return self.dy
    def set_dy(self, dy): self.dy = dy
    def get_externalResourcesRequired(self): return self.externalResourcesRequired
    def set_externalResourcesRequired(self, externalResourcesRequired): self.externalResourcesRequired = externalResourcesRequired
    def get_font_family(self): return self.font_family
    def set_font_family(self, font_family): self.font_family = font_family
    def get_class(self): return self.classxx
    def set_class(self, classxx): self.classxx = classxx
    def get_lang(self): return self.lang
    def set_lang(self, lang): self.lang = lang
    def get_onfocusin(self): return self.onfocusin
    def set_onfocusin(self, onfocusin): self.onfocusin = onfocusin
    def get_rotate(self): return self.rotate
    def set_rotate(self, rotate): self.rotate = rotate
    def get_stroke_opacity(self): return self.stroke_opacity
    def set_stroke_opacity(self, stroke_opacity): self.stroke_opacity = stroke_opacity
    def get_font_size_adjust(self): return self.font_size_adjust
    def set_font_size_adjust(self, font_size_adjust): self.font_size_adjust = font_size_adjust
    def get_arcrole(self): return self.arcrole
    def set_arcrole(self, arcrole): self.arcrole = arcrole
    def get_mask(self): return self.mask
    def set_mask(self, mask): self.mask = mask
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_text_anchor(self): return self.text_anchor
    def set_text_anchor(self, text_anchor): self.text_anchor = text_anchor
    def get_text_decoration(self): return self.text_decoration
    def set_text_decoration(self, text_decoration): self.text_decoration = text_decoration
    def get_fill_opacity(self): return self.fill_opacity
    def set_fill_opacity(self, fill_opacity): self.fill_opacity = fill_opacity
    def get_pointer_events(self): return self.pointer_events
    def set_pointer_events(self, pointer_events): self.pointer_events = pointer_events
    def get_requiredFeatures(self): return self.requiredFeatures
    def set_requiredFeatures(self, requiredFeatures): self.requiredFeatures = requiredFeatures
    def get_systemLanguage(self): return self.systemLanguage
    def set_systemLanguage(self, systemLanguage): self.systemLanguage = systemLanguage
    def get_stroke_dasharray(self): return self.stroke_dasharray
    def set_stroke_dasharray(self, stroke_dasharray): self.stroke_dasharray = stroke_dasharray
    def get_onmouseup(self): return self.onmouseup
    def set_onmouseup(self, onmouseup): self.onmouseup = onmouseup
    def get_y(self): return self.y
    def set_y(self, y): self.y = y
    def get_x(self): return self.x
    def set_x(self, x): self.x = x
    def get_display(self): return self.display
    def set_display(self, display): self.display = display
    def get_onmousedown(self): return self.onmousedown
    def set_onmousedown(self, onmousedown): self.onmousedown = onmousedown
    def get_color_interpolation(self): return self.color_interpolation
    def set_color_interpolation(self, color_interpolation): self.color_interpolation = color_interpolation
    def getValueOf_(self): return self.valueOf_
    def setValueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='svg:', name_='altGlyphType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, self.internalName, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='altGlyphType')
        outfile.write('>')
        self.exportChildren(outfile, level + 1, namespace_, name_)
        outfile.write('</%s%s>\n' % (namespace_, self.internalName))
    def exportAttributes(self, outfile, level, namespace_='svg:', name_='altGlyphType'):
        if self.stroke_linejoin is not None:
            outfile.write(' stroke-linejoin=%s' % (quote_attrib(self.stroke_linejoin), ))
        if self.fill_rule is not None:
            outfile.write(' fill-rule=%s' % (quote_attrib(self.fill_rule), ))
        if self.font_size is not None:
            outfile.write(' font-size=%s' % (quote_attrib(self.font_size), ))
        if self.text_rendering is not None:
            outfile.write(' text-rendering=%s' % (quote_attrib(self.text_rendering), ))
        if self.color_rendering is not None:
            outfile.write(' color-rendering=%s' % (quote_attrib(self.color_rendering), ))
        if self.clip_path is not None:
            outfile.write(' clip-path=%s' % (quote_attrib(self.clip_path), ))
        if self.requiredExtensions is not None:
            outfile.write(' requiredExtensions=%s' % (quote_attrib(self.requiredExtensions), ))
        if self.color is not None:
            outfile.write(' color=%s' % (quote_attrib(self.color), ))
        if self.onfocusout is not None:
            outfile.write(' onfocusout=%s' % (quote_attrib(self.onfocusout), ))
        if self.image_rendering is not None:
            outfile.write(' image-rendering=%s' % (quote_attrib(self.image_rendering), ))
        if self.actuate is not None:
            outfile.write(' actuate=%s' % (quote_attrib(self.actuate), ))
        if self.letter_spacing is not None:
            outfile.write(' letter-spacing=%s' % (quote_attrib(self.letter_spacing), ))
        if self.stroke_dashoffset is not None:
            outfile.write(' stroke-dashoffset=%s' % (quote_attrib(self.stroke_dashoffset), ))
        if self.word_spacing is not None:
            outfile.write(' word-spacing=%s' % (quote_attrib(self.word_spacing), ))
        if self.cursor is not None:
            outfile.write(' cursor=%s' % (quote_attrib(self.cursor), ))
        if self.stroke is not None:
            outfile.write(' stroke=%s' % (quote_attrib(self.stroke), ))
        if self.href is not None:
            outfile.write(' href=%s' % (quote_attrib(self.href), ))
        if self.onload is not None:
            outfile.write(' onload=%s' % (quote_attrib(self.onload), ))
        if self.baseline_shift is not None:
            outfile.write(' baseline-shift=%s' % (quote_attrib(self.baseline_shift), ))
        if self.stroke_width is not None:
            outfile.write(' stroke-width=%s' % (quote_attrib(self.stroke_width), ))
        if self.id is not None:
            outfile.write(' id=%s' % (quote_attrib(self.id), ))
        if self.fill is not None:
            outfile.write(' fill=%s' % (quote_attrib(self.fill), ))
        if self.onmouseover is not None:
            outfile.write(' onmouseover=%s' % (quote_attrib(self.onmouseover), ))
        if self.filter is not None:
            outfile.write(' filter=%s' % (quote_attrib(self.filter), ))
        if self.style is not None:
            outfile.write(' style=%s' % (quote_attrib(self.style), ))
        if self.title is not None:
            outfile.write(' title=%s' % (quote_attrib(self.title), ))
        if self.show is not None:
            outfile.write(' show=%s' % (quote_attrib(self.show), ))
        if self.glyph_orientation_horizontal is not None:
            outfile.write(' glyph-orientation-horizontal=%s' % (quote_attrib(self.glyph_orientation_horizontal), ))
        if self.font_style is not None:
            outfile.write(' font-style=%s' % (quote_attrib(self.font_style), ))
        if self.shape_rendering is not None:
            outfile.write(' shape-rendering=%s' % (quote_attrib(self.shape_rendering), ))
        if self.font_stretch is not None:
            outfile.write(' font-stretch=%s' % (quote_attrib(self.font_stretch), ))
        if self.role is not None:
            outfile.write(' role=%s' % (quote_attrib(self.role), ))
        if self.onactivate is not None:
            outfile.write(' onactivate=%s' % (quote_attrib(self.onactivate), ))
        if self.font_variant is not None:
            outfile.write(' font-variant=%s' % (quote_attrib(self.font_variant), ))
        if self.stroke_miterlimit is not None:
            outfile.write(' stroke-miterlimit=%s' % (quote_attrib(self.stroke_miterlimit), ))
        if self.font_weight is not None:
            outfile.write(' font-weight=%s' % (quote_attrib(self.font_weight), ))
        if self.type_ is not None:
            outfile.write(' type=%s' % (quote_attrib(self.type_), ))
        if self.glyphRef is not None:
            outfile.write(' glyphRef=%s' % (quote_attrib(self.glyphRef), ))
        if self.opacity is not None:
            outfile.write(' opacity=%s' % (quote_attrib(self.opacity), ))
        if self.direction is not None:
            outfile.write(' direction=%s' % (quote_attrib(self.direction), ))
        if self.onmousemove is not None:
            outfile.write(' onmousemove=%s' % (quote_attrib(self.onmousemove), ))
        if self.onclick is not None:
            outfile.write(' onclick=%s' % (quote_attrib(self.onclick), ))
        if self.onmouseout is not None:
            outfile.write(' onmouseout=%s' % (quote_attrib(self.onmouseout), ))
        if self.format is not None:
            outfile.write(' format=%s' % (quote_attrib(self.format), ))
        if self.glyph_orientation_vertical is not None:
            outfile.write(' glyph-orientation-vertical=%s' % (quote_attrib(self.glyph_orientation_vertical), ))
        if self.alignment_baseline is not None:
            outfile.write(' alignment-baseline=%s' % (quote_attrib(self.alignment_baseline), ))
        if self.stroke_linecap is not None:
            outfile.write(' stroke-linecap=%s' % (quote_attrib(self.stroke_linecap), ))
        if self.visibility is not None:
            outfile.write(' visibility=%s' % (quote_attrib(self.visibility), ))
        if self.unicode_bidi is not None:
            outfile.write(' unicode-bidi=%s' % (quote_attrib(self.unicode_bidi), ))
        if self.base is not None:
            outfile.write(' base=%s' % (quote_attrib(self.base), ))
        if self.clip_rule is not None:
            outfile.write(' clip-rule=%s' % (quote_attrib(self.clip_rule), ))
        if self.dominant_baseline is not None:
            outfile.write(' dominant-baseline=%s' % (quote_attrib(self.dominant_baseline), ))
        if self.dx is not None:
            outfile.write(' dx=%s' % (quote_attrib(self.dx), ))
        if self.dy is not None:
            outfile.write(' dy=%s' % (quote_attrib(self.dy), ))
        if self.externalResourcesRequired is not None:
            outfile.write(' externalResourcesRequired="%s"' % str_lower(str(self.externalResourcesRequired)))
        if self.font_family is not None:
            outfile.write(' font-family=%s' % (quote_attrib(self.font_family), ))
        if self.classxx is not None:
            outfile.write(' class=%s' % (quote_attrib(self.classxx), ))
        if self.lang is not None:
            outfile.write(' lang=%s' % (quote_attrib(self.lang), ))
        if self.onfocusin is not None:
            outfile.write(' onfocusin=%s' % (quote_attrib(self.onfocusin), ))
        if self.rotate is not None:
            outfile.write(' rotate=%s' % (quote_attrib(self.rotate), ))
        if self.stroke_opacity is not None:
            outfile.write(' stroke-opacity=%s' % (quote_attrib(self.stroke_opacity), ))
        if self.font_size_adjust is not None:
            outfile.write(' font-size-adjust=%s' % (quote_attrib(self.font_size_adjust), ))
        if self.arcrole is not None:
            outfile.write(' arcrole=%s' % (quote_attrib(self.arcrole), ))
        if self.mask is not None:
            outfile.write(' mask=%s' % (quote_attrib(self.mask), ))
        if self.space is not None:
            outfile.write(' space=%s' % (quote_attrib(self.space), ))
        if self.text_anchor is not None:
            outfile.write(' text-anchor=%s' % (quote_attrib(self.text_anchor), ))
        if self.text_decoration is not None:
            outfile.write(' text-decoration=%s' % (quote_attrib(self.text_decoration), ))
        if self.fill_opacity is not None:
            outfile.write(' fill-opacity=%s' % (quote_attrib(self.fill_opacity), ))
        if self.pointer_events is not None:
            outfile.write(' pointer-events=%s' % (quote_attrib(self.pointer_events), ))
        if self.requiredFeatures is not None:
            outfile.write(' requiredFeatures=%s' % (quote_attrib(self.requiredFeatures), ))
        if self.systemLanguage is not None:
            outfile.write(' systemLanguage=%s' % (quote_attrib(self.systemLanguage), ))
        if self.stroke_dasharray is not None:
            outfile.write(' stroke-dasharray=%s' % (quote_attrib(self.stroke_dasharray), ))
        if self.onmouseup is not None:
            outfile.write(' onmouseup=%s' % (quote_attrib(self.onmouseup), ))
        if self.y is not None:
            outfile.write(' y=%s' % (quote_attrib(self.y), ))
        if self.x is not None:
            outfile.write(' x=%s' % (quote_attrib(self.x), ))
        if self.display is not None:
            outfile.write(' display=%s' % (quote_attrib(self.display), ))
        if self.onmousedown is not None:
            outfile.write(' onmousedown=%s' % (quote_attrib(self.onmousedown), ))
        if self.color_interpolation is not None:
            outfile.write(' color-interpolation=%s' % (quote_attrib(self.color_interpolation), ))
    def exportChildren(self, outfile, level, namespace_='svg:', name_='altGlyphType'):
        if self.valueOf_.find('![CDATA')>-1:
            value=quote_xml('%s' % self.valueOf_)
            value=value.replace('![CDATA','<![CDATA')
            value=value.replace(']]',']]>')
            outfile.write(value)
        else:
            outfile.write(quote_xml('%s' % self.valueOf_))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        self.valueOf_ = ''
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('stroke-linejoin'):
            self.stroke_linejoin = attrs.get('stroke-linejoin').value
        if attrs.get('fill-rule'):
            self.fill_rule = attrs.get('fill-rule').value
        if attrs.get('font-size'):
            self.font_size = attrs.get('font-size').value
        if attrs.get('text-rendering'):
            self.text_rendering = attrs.get('text-rendering').value
        if attrs.get('color-rendering'):
            self.color_rendering = attrs.get('color-rendering').value
        if attrs.get('clip-path'):
            self.clip_path = attrs.get('clip-path').value
        if attrs.get('requiredExtensions'):
            self.requiredExtensions = attrs.get('requiredExtensions').value
        if attrs.get('color'):
            self.color = attrs.get('color').value
        if attrs.get('onfocusout'):
            self.onfocusout = attrs.get('onfocusout').value
        if attrs.get('image-rendering'):
            self.image_rendering = attrs.get('image-rendering').value
        if attrs.get('actuate'):
            self.actuate = attrs.get('actuate').value
        if attrs.get('letter-spacing'):
            self.letter_spacing = attrs.get('letter-spacing').value
        if attrs.get('stroke-dashoffset'):
            self.stroke_dashoffset = attrs.get('stroke-dashoffset').value
        if attrs.get('word-spacing'):
            self.word_spacing = attrs.get('word-spacing').value
        if attrs.get('cursor'):
            self.cursor = attrs.get('cursor').value
        if attrs.get('stroke'):
            self.stroke = attrs.get('stroke').value
        if attrs.get('href'):
            self.href = attrs.get('href').value
        if attrs.get('onload'):
            self.onload = attrs.get('onload').value
        if attrs.get('baseline-shift'):
            self.baseline_shift = attrs.get('baseline-shift').value
        if attrs.get('stroke-width'):
            self.stroke_width = attrs.get('stroke-width').value
        if attrs.get('id'):
            self.id = attrs.get('id').value
        if attrs.get('fill'):
            self.fill = attrs.get('fill').value
        if attrs.get('onmouseover'):
            self.onmouseover = attrs.get('onmouseover').value
        if attrs.get('filter'):
            self.filter = attrs.get('filter').value
        if attrs.get('style'):
            self.style = attrs.get('style').value
        if attrs.get('title'):
            self.title = attrs.get('title').value
        if attrs.get('show'):
            self.show = attrs.get('show').value
        if attrs.get('glyph-orientation-horizontal'):
            self.glyph_orientation_horizontal = attrs.get('glyph-orientation-horizontal').value
        if attrs.get('font-style'):
            self.font_style = attrs.get('font-style').value
        if attrs.get('shape-rendering'):
            self.shape_rendering = attrs.get('shape-rendering').value
        if attrs.get('font-stretch'):
            self.font_stretch = attrs.get('font-stretch').value
        if attrs.get('role'):
            self.role = attrs.get('role').value
        if attrs.get('onactivate'):
            self.onactivate = attrs.get('onactivate').value
        if attrs.get('font-variant'):
            self.font_variant = attrs.get('font-variant').value
        if attrs.get('stroke-miterlimit'):
            self.stroke_miterlimit = attrs.get('stroke-miterlimit').value
        if attrs.get('font-weight'):
            self.font_weight = attrs.get('font-weight').value
        if attrs.get('type'):
            self.type_ = attrs.get('type').value
        if attrs.get('glyphRef'):
            self.glyphRef = attrs.get('glyphRef').value
        if attrs.get('opacity'):
            self.opacity = attrs.get('opacity').value
        if attrs.get('direction'):
            self.direction = attrs.get('direction').value
        if attrs.get('onmousemove'):
            self.onmousemove = attrs.get('onmousemove').value
        if attrs.get('onclick'):
            self.onclick = attrs.get('onclick').value
        if attrs.get('onmouseout'):
            self.onmouseout = attrs.get('onmouseout').value
        if attrs.get('format'):
            self.format = attrs.get('format').value
        if attrs.get('glyph-orientation-vertical'):
            self.glyph_orientation_vertical = attrs.get('glyph-orientation-vertical').value
        if attrs.get('alignment-baseline'):
            self.alignment_baseline = attrs.get('alignment-baseline').value
        if attrs.get('stroke-linecap'):
            self.stroke_linecap = attrs.get('stroke-linecap').value
        if attrs.get('visibility'):
            self.visibility = attrs.get('visibility').value
        if attrs.get('unicode-bidi'):
            self.unicode_bidi = attrs.get('unicode-bidi').value
        if attrs.get('base'):
            self.base = attrs.get('base').value
        if attrs.get('clip-rule'):
            self.clip_rule = attrs.get('clip-rule').value
        if attrs.get('dominant-baseline'):
            self.dominant_baseline = attrs.get('dominant-baseline').value
        if attrs.get('dx'):
            self.dx = attrs.get('dx').value
        if attrs.get('dy'):
            self.dy = attrs.get('dy').value
        if attrs.get('externalResourcesRequired'):
            if attrs.get('externalResourcesRequired').value in ('true', '1'):
                self.externalResourcesRequired = True
            elif attrs.get('externalResourcesRequired').value in ('false', '0'):
                self.externalResourcesRequired = False
            else:
                raise ValueError('Bad boolean attribute (externalResourcesRequired)')
        if attrs.get('font-family'):
            self.font_family = attrs.get('font-family').value
        if attrs.get('class'):
            self.classxx = attrs.get('class').value
        if attrs.get('lang'):
            self.lang = attrs.get('lang').value
        if attrs.get('onfocusin'):
            self.onfocusin = attrs.get('onfocusin').value
        if attrs.get('rotate'):
            self.rotate = attrs.get('rotate').value
        if attrs.get('stroke-opacity'):
            self.stroke_opacity = attrs.get('stroke-opacity').value
        if attrs.get('font-size-adjust'):
            self.font_size_adjust = attrs.get('font-size-adjust').value
        if attrs.get('arcrole'):
            self.arcrole = attrs.get('arcrole').value
        if attrs.get('mask'):
            self.mask = attrs.get('mask').value
        if attrs.get('space'):
            self.space = attrs.get('space').value
        if attrs.get('text-anchor'):
            self.text_anchor = attrs.get('text-anchor').value
        if attrs.get('text-decoration'):
            self.text_decoration = attrs.get('text-decoration').value
        if attrs.get('fill-opacity'):
            self.fill_opacity = attrs.get('fill-opacity').value
        if attrs.get('pointer-events'):
            self.pointer_events = attrs.get('pointer-events').value
        if attrs.get('requiredFeatures'):
            self.requiredFeatures = attrs.get('requiredFeatures').value
        if attrs.get('systemLanguage'):
            self.systemLanguage = attrs.get('systemLanguage').value
        if attrs.get('stroke-dasharray'):
            self.stroke_dasharray = attrs.get('stroke-dasharray').value
        if attrs.get('onmouseup'):
            self.onmouseup = attrs.get('onmouseup').value
        if attrs.get('y'):
            self.y = attrs.get('y').value
        if attrs.get('x'):
            self.x = attrs.get('x').value
        if attrs.get('display'):
            self.display = attrs.get('display').value
        if attrs.get('onmousedown'):
            self.onmousedown = attrs.get('onmousedown').value
        if attrs.get('color-interpolation'):
            self.color_interpolation = attrs.get('color-interpolation').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.TEXT_NODE:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.nodeValue)
            self.content_.append(obj_)
        if child_.nodeType == Node.TEXT_NODE:
            self.valueOf_ += child_.nodeValue
        elif child_.nodeType == Node.CDATA_SECTION_NODE:
            self.valueOf_ += '![CDATA['+child_.nodeValue+']]'
# end class altGlyphType


class altGlyphDefType(object):
    subclass = None
    superclass = None
    def __init__(self, base=None, id=None):
        self.internalName = "altGlyphDef"
        self.base = base
        self.id = id
        self.internalElements = []
    def factory(*args_, **kwargs_):
        if altGlyphDefType.subclass:
            return altGlyphDefType.subclass(*args_, **kwargs_)
        else:
            return altGlyphDefType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def addElement(self, value): self.internalElements.append(value)
    def get_base(self): return self.base
    def set_base(self, base): self.base = base
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='svg:', name_='altGlyphDefType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, self.internalName, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='altGlyphDefType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, self.internalName))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='svg:', name_='altGlyphDefType'):
        if self.base is not None:
            outfile.write(' base=%s' % (quote_attrib(self.base), ))
        if self.id is not None:
            outfile.write(' id=%s' % (quote_attrib(self.id), ))
    def exportChildren(self, outfile, level, namespace_='svg:', name_='altGlyphDefType'):
        for element_ in self.internalElements:
            element_.export(outfile, level, namespace_, name_='altGlyphItem')
    def hasContent_(self):
        if (
         len(self.internalElements)>0
            ):
            return True
        else:
            return False
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('base'):
            self.base = attrs.get('base').value
        if attrs.get('id'):
            self.id = attrs.get('id').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'altGlyphItem':
            obj_ = altGlyphItemType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'glyphRef':
            obj_ = glyphRefType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
# end class altGlyphDefType


class altGlyphItemType(object):
    subclass = None
    superclass = None
    def __init__(self, base=None, id=None, glyphRef=None):
        self.internalName = "altGlyphItem"
        self.base = base
        self.id = id
        self.glyphRef = glyphRef
    def factory(*args_, **kwargs_):
        if altGlyphItemType.subclass:
            return altGlyphItemType.subclass(*args_, **kwargs_)
        else:
            return altGlyphItemType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_glyphRef(self): return self.glyphRef
    def set_glyphRef(self, glyphRef): self.glyphRef = glyphRef
    def get_base(self): return self.base
    def set_base(self, base): self.base = base
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='svg:', name_='altGlyphItemType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, self.internalName, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='altGlyphItemType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, self.internalName))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='svg:', name_='altGlyphItemType'):
        if self.base is not None:
            outfile.write(' base=%s' % (quote_attrib(self.base), ))
        if self.id is not None:
            outfile.write(' id=%s' % (quote_attrib(self.id), ))
    def exportChildren(self, outfile, level, namespace_='svg:', name_='altGlyphItemType'):
        if self.glyphRef:
            self.glyphRef.export(outfile, level, namespace_, name_='glyphRef', )
    def hasContent_(self):
        if (
            self.glyphRef
            ):
            return True
        else:
            return False
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('base'):
            self.base = attrs.get('base').value
        if attrs.get('id'):
            self.id = attrs.get('id').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'glyphRef':
            obj_ = glyphRefType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            self.set_glyphRef(obj_)
# end class altGlyphItemType


class glyphRefType(object):
    subclass = None
    superclass = None
    def __init__(self, font_size=None, show='other', actuate=None, href=None, id=None, style=None, title=None, font_style=None, font_stretch=None, role=None, font_variant=None, font_weight=None, type_=None, glyphRef=None, format=None, base=None, dx=None, dy=None, font_family=None, classxx=None, font_size_adjust=None, arcrole=None, y=None, x=None, valueOf_=''):
        self.internalName = "glyphRef"
        self.font_size = font_size
        self.show = show
        self.actuate = actuate
        self.href = href
        self.id = id
        self.style = style
        self.title = title
        self.font_style = font_style
        self.font_stretch = font_stretch
        self.role = role
        self.font_variant = font_variant
        self.font_weight = font_weight
        self.type_ = type_
        self.glyphRef = glyphRef
        self.format = format
        self.base = base
        self.dx = dx
        self.dy = dy
        self.font_family = font_family
        self.classxx = classxx
        self.font_size_adjust = font_size_adjust
        self.arcrole = arcrole
        self.y = y
        self.x = x
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if glyphRefType.subclass:
            return glyphRefType.subclass(*args_, **kwargs_)
        else:
            return glyphRefType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_font_size(self): return self.font_size
    def set_font_size(self, font_size): self.font_size = font_size
    def get_show(self): return self.show
    def set_show(self, show): self.show = show
    def get_actuate(self): return self.actuate
    def set_actuate(self, actuate): self.actuate = actuate
    def get_href(self): return self.href
    def set_href(self, href): self.href = href
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_style(self): return self.style
    def set_style(self, style): self.style = style
    def get_title(self): return self.title
    def set_title(self, title): self.title = title
    def get_font_style(self): return self.font_style
    def set_font_style(self, font_style): self.font_style = font_style
    def get_font_stretch(self): return self.font_stretch
    def set_font_stretch(self, font_stretch): self.font_stretch = font_stretch
    def get_role(self): return self.role
    def set_role(self, role): self.role = role
    def get_font_variant(self): return self.font_variant
    def set_font_variant(self, font_variant): self.font_variant = font_variant
    def get_font_weight(self): return self.font_weight
    def set_font_weight(self, font_weight): self.font_weight = font_weight
    def get_type(self): return self.type_
    def set_type(self, type_): self.type_ = type_
    def get_glyphRef(self): return self.glyphRef
    def set_glyphRef(self, glyphRef): self.glyphRef = glyphRef
    def get_format(self): return self.format
    def set_format(self, format): self.format = format
    def get_base(self): return self.base
    def set_base(self, base): self.base = base
    def get_dx(self): return self.dx
    def set_dx(self, dx): self.dx = dx
    def get_dy(self): return self.dy
    def set_dy(self, dy): self.dy = dy
    def get_font_family(self): return self.font_family
    def set_font_family(self, font_family): self.font_family = font_family
    def get_class(self): return self.classxx
    def set_class(self, classxx): self.classxx = classxx
    def get_font_size_adjust(self): return self.font_size_adjust
    def set_font_size_adjust(self, font_size_adjust): self.font_size_adjust = font_size_adjust
    def get_arcrole(self): return self.arcrole
    def set_arcrole(self, arcrole): self.arcrole = arcrole
    def get_y(self): return self.y
    def set_y(self, y): self.y = y
    def get_x(self): return self.x
    def set_x(self, x): self.x = x
    def getValueOf_(self): return self.valueOf_
    def setValueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='svg:', name_='glyphRefType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, self.internalName, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='glyphRefType')
        outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='svg:', name_='glyphRefType'):
        if self.font_size is not None:
            outfile.write(' font-size=%s' % (quote_attrib(self.font_size), ))
        if self.show is not None:
            outfile.write(' show=%s' % (quote_attrib(self.show), ))
        if self.actuate is not None:
            outfile.write(' actuate=%s' % (quote_attrib(self.actuate), ))
        if self.href is not None:
            outfile.write(' href=%s' % (quote_attrib(self.href), ))
        if self.id is not None:
            outfile.write(' id=%s' % (quote_attrib(self.id), ))
        if self.style is not None:
            outfile.write(' style=%s' % (quote_attrib(self.style), ))
        if self.title is not None:
            outfile.write(' title=%s' % (quote_attrib(self.title), ))
        if self.font_style is not None:
            outfile.write(' font-style=%s' % (quote_attrib(self.font_style), ))
        if self.font_stretch is not None:
            outfile.write(' font-stretch=%s' % (quote_attrib(self.font_stretch), ))
        if self.role is not None:
            outfile.write(' role=%s' % (quote_attrib(self.role), ))
        if self.font_variant is not None:
            outfile.write(' font-variant=%s' % (quote_attrib(self.font_variant), ))
        if self.font_weight is not None:
            outfile.write(' font-weight=%s' % (quote_attrib(self.font_weight), ))
        if self.type_ is not None:
            outfile.write(' type=%s' % (quote_attrib(self.type_), ))
        outfile.write(' glyphRef=%s' % (quote_attrib(self.glyphRef), ))
        outfile.write(' format=%s' % (quote_attrib(self.format), ))
        if self.base is not None:
            outfile.write(' base=%s' % (quote_attrib(self.base), ))
        if self.dx is not None:
            outfile.write(' dx=%s' % (quote_attrib(self.dx), ))
        if self.dy is not None:
            outfile.write(' dy=%s' % (quote_attrib(self.dy), ))
        if self.font_family is not None:
            outfile.write(' font-family=%s' % (quote_attrib(self.font_family), ))
        if self.classxx is not None:
            outfile.write(' class=%s' % (quote_attrib(self.classxx), ))
        if self.font_size_adjust is not None:
            outfile.write(' font-size-adjust=%s' % (quote_attrib(self.font_size_adjust), ))
        if self.arcrole is not None:
            outfile.write(' arcrole=%s' % (quote_attrib(self.arcrole), ))
        if self.y is not None:
            outfile.write(' y=%s' % (quote_attrib(self.y), ))
        if self.x is not None:
            outfile.write(' x=%s' % (quote_attrib(self.x), ))
    def exportChildren(self, outfile, level, namespace_='svg:', name_='glyphRefType'):
        if self.valueOf_.find('![CDATA')>-1:
            value=quote_xml('%s' % self.valueOf_)
            value=value.replace('![CDATA','<![CDATA')
            value=value.replace(']]',']]>')
            outfile.write(value)
        else:
            outfile.write(quote_xml('%s' % self.valueOf_))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        self.valueOf_ = ''
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('font-size'):
            self.font_size = attrs.get('font-size').value
        if attrs.get('show'):
            self.show = attrs.get('show').value
        if attrs.get('actuate'):
            self.actuate = attrs.get('actuate').value
        if attrs.get('href'):
            self.href = attrs.get('href').value
        if attrs.get('id'):
            self.id = attrs.get('id').value
        if attrs.get('style'):
            self.style = attrs.get('style').value
        if attrs.get('title'):
            self.title = attrs.get('title').value
        if attrs.get('font-style'):
            self.font_style = attrs.get('font-style').value
        if attrs.get('font-stretch'):
            self.font_stretch = attrs.get('font-stretch').value
        if attrs.get('role'):
            self.role = attrs.get('role').value
        if attrs.get('font-variant'):
            self.font_variant = attrs.get('font-variant').value
        if attrs.get('font-weight'):
            self.font_weight = attrs.get('font-weight').value
        if attrs.get('type'):
            self.type_ = attrs.get('type').value
        if attrs.get('glyphRef'):
            self.glyphRef = attrs.get('glyphRef').value
        if attrs.get('format'):
            self.format = attrs.get('format').value
        if attrs.get('base'):
            self.base = attrs.get('base').value
        if attrs.get('dx'):
            self.dx = attrs.get('dx').value
        if attrs.get('dy'):
            self.dy = attrs.get('dy').value
        if attrs.get('font-family'):
            self.font_family = attrs.get('font-family').value
        if attrs.get('class'):
            self.classxx = attrs.get('class').value
        if attrs.get('font-size-adjust'):
            self.font_size_adjust = attrs.get('font-size-adjust').value
        if attrs.get('arcrole'):
            self.arcrole = attrs.get('arcrole').value
        if attrs.get('y'):
            self.y = attrs.get('y').value
        if attrs.get('x'):
            self.x = attrs.get('x').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.TEXT_NODE:
            self.valueOf_ += child_.nodeValue
        elif child_.nodeType == Node.CDATA_SECTION_NODE:
            self.valueOf_ += '![CDATA['+child_.nodeValue+']]'
# end class glyphRefType


class markerType(object):
    subclass = None
    superclass = None
    def __init__(self, refY=None, refX=None, markerUnits=None, lang=None, space=None, classxx=None, viewBox=None, base=None, orient=None, style_attr=None, id=None, markerWidth=None, preserveAspectRatio=None, externalResourcesRequired=None, markerHeight=None):
        self.internalName = "marker"
        self.refY = refY
        self.refX = refX
        self.markerUnits = markerUnits
        self.lang = lang
        self.space = space
        self.classxx = classxx
        self.viewBox = viewBox
        self.base = base
        self.orient = orient
        self.style_attr = style_attr
        self.id = id
        self.markerWidth = markerWidth
        self.preserveAspectRatio = preserveAspectRatio
        self.externalResourcesRequired = externalResourcesRequired
        self.markerHeight = markerHeight
        self.internalElements = []
    def factory(*args_, **kwargs_):
        if markerType.subclass:
            return markerType.subclass(*args_, **kwargs_)
        else:
            return markerType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def addElement(self, value): self.internalElements.append(value)
    def validate_textType(self, value):
        # validate type textType
        pass
    def validate_svgType(self, value):
        # validate type svgType
        pass
    def validate_viewType(self, value):
        # validate type viewType
        pass
    def validate_markerType(self, value):
        # validate type markerType
        pass
    def validate_clipPathType(self, value):
        # validate type clipPathType
        pass
    def validate_maskType(self, value):
        # validate type maskType
        pass
    def validate_linearGradientType(self, value):
        # validate type linearGradientType
        pass
    def validate_radialGradientType(self, value):
        # validate type radialGradientType
        pass
    def validate_patternType(self, value):
        # validate type patternType
        pass
    def validate_filterType(self, value):
        # validate type filterType
        pass
    def validate_animateTransformType(self, value):
        # validate type animateTransformType
        pass
    def get_refY(self): return self.refY
    def set_refY(self, refY): self.refY = refY
    def get_refX(self): return self.refX
    def set_refX(self, refX): self.refX = refX
    def get_markerUnits(self): return self.markerUnits
    def set_markerUnits(self, markerUnits): self.markerUnits = markerUnits
    def get_lang(self): return self.lang
    def set_lang(self, lang): self.lang = lang
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_class(self): return self.classxx
    def set_class(self, classxx): self.classxx = classxx
    def get_viewBox(self): return self.viewBox
    def set_viewBox(self, viewBox): self.viewBox = viewBox
    def get_base(self): return self.base
    def set_base(self, base): self.base = base
    def get_orient(self): return self.orient
    def set_orient(self, orient): self.orient = orient
    def get_style_attr(self): return self.style_attr
    def set_style_attr(self, style_attr): self.style_attr = style_attr
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_markerWidth(self): return self.markerWidth
    def set_markerWidth(self, markerWidth): self.markerWidth = markerWidth
    def get_preserveAspectRatio(self): return self.preserveAspectRatio
    def set_preserveAspectRatio(self, preserveAspectRatio): self.preserveAspectRatio = preserveAspectRatio
    def get_externalResourcesRequired(self): return self.externalResourcesRequired
    def set_externalResourcesRequired(self, externalResourcesRequired): self.externalResourcesRequired = externalResourcesRequired
    def get_markerHeight(self): return self.markerHeight
    def set_markerHeight(self, markerHeight): self.markerHeight = markerHeight
    def export(self, outfile, level, namespace_='svg:', name_='markerType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, self.internalName, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='markerType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, self.internalName))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='svg:', name_='markerType'):
        if self.refY is not None:
            outfile.write(' refY=%s' % (quote_attrib(self.refY), ))
        if self.refX is not None:
            outfile.write(' refX=%s' % (quote_attrib(self.refX), ))
        if self.markerUnits is not None:
            outfile.write(' markerUnits=%s' % (quote_attrib(self.markerUnits), ))
        if self.lang is not None:
            outfile.write(' lang=%s' % (quote_attrib(self.lang), ))
        if self.space is not None:
            outfile.write(' space=%s' % (quote_attrib(self.space), ))
        if self.classxx is not None:
            outfile.write(' class=%s' % (quote_attrib(self.classxx), ))
        if self.viewBox is not None:
            outfile.write(' viewBox=%s' % (quote_attrib(self.viewBox), ))
        if self.base is not None:
            outfile.write(' base=%s' % (quote_attrib(self.base), ))
        if self.orient is not None:
            outfile.write(' orient=%s' % (quote_attrib(self.orient), ))
        if self.style_attr is not None:
            outfile.write(' style_attr=%s' % (quote_attrib(self.style_attr), ))
        if self.id is not None:
            outfile.write(' id=%s' % (quote_attrib(self.id), ))
        if self.markerWidth is not None:
            outfile.write(' markerWidth=%s' % (quote_attrib(self.markerWidth), ))
        if self.preserveAspectRatio is not None:
            outfile.write(' preserveAspectRatio=%s' % (quote_attrib(self.preserveAspectRatio), ))
        if self.externalResourcesRequired is not None:
            outfile.write(' externalResourcesRequired="%s"' % str_lower(str(self.externalResourcesRequired)))
        if self.markerHeight is not None:
            outfile.write(' markerHeight=%s' % (quote_attrib(self.markerHeight), ))
    def exportChildren(self, outfile, level, namespace_='svg:', name_='markerType'):
        for element_ in self.internalElements:
            element_.export(outfile, level, namespace_, name_='desc')
    def hasContent_(self):
        if (
         len(self.internalElements)>0
            ):
            return True
        else:
            return False
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('refY'):
            self.refY = attrs.get('refY').value
        if attrs.get('refX'):
            self.refX = attrs.get('refX').value
        if attrs.get('markerUnits'):
            self.markerUnits = attrs.get('markerUnits').value
        if attrs.get('lang'):
            self.lang = attrs.get('lang').value
        if attrs.get('space'):
            self.space = attrs.get('space').value
        if attrs.get('class'):
            self.classxx = attrs.get('class').value
        if attrs.get('viewBox'):
            self.viewBox = attrs.get('viewBox').value
        if attrs.get('base'):
            self.base = attrs.get('base').value
        if attrs.get('orient'):
            self.orient = attrs.get('orient').value
        if attrs.get('style_attr'):
            self.style_attr = attrs.get('style_attr').value
        if attrs.get('id'):
            self.id = attrs.get('id').value
        if attrs.get('markerWidth'):
            self.markerWidth = attrs.get('markerWidth').value
        if attrs.get('preserveAspectRatio'):
            self.preserveAspectRatio = attrs.get('preserveAspectRatio').value
        if attrs.get('externalResourcesRequired'):
            if attrs.get('externalResourcesRequired').value in ('true', '1'):
                self.externalResourcesRequired = True
            elif attrs.get('externalResourcesRequired').value in ('false', '0'):
                self.externalResourcesRequired = False
            else:
                raise ValueError('Bad boolean attribute (externalResourcesRequired)')
        if attrs.get('markerHeight'):
            self.markerHeight = attrs.get('markerHeight').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'desc':
            obj_ = descType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'title':
            obj_ = titleType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'metadata':
            obj_ = metadataType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'defs':
            obj_ = defsType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'path':
            obj_ = pathType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'text':
            obj_ = textType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_textType(obj_)    # validate type textType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'rect':
            obj_ = rectType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'circle':
            obj_ = circleType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'ellipse':
            obj_ = ellipseType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'line':
            obj_ = lineType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'polyline':
            obj_ = polylineType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'polygon':
            obj_ = polygonType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'use':
            obj_ = useType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'image':
            obj_ = imageType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'svg':
            obj_ = svgType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_svgType(obj_)    # validate type svgType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'g':
            obj_ = gType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'view':
            obj_ = viewType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_viewType(obj_)    # validate type viewType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'switch':
            obj_ = switchType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'a':
            obj_ = aType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'altGlyphDef':
            obj_ = altGlyphDefType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'script':
            obj_ = scriptType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'style':
            obj_ = styleType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'symbol':
            obj_ = symbolType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'marker':
            obj_ = markerType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_markerType(obj_)    # validate type markerType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'clipPath':
            obj_ = clipPathType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_clipPathType(obj_)    # validate type clipPathType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'mask':
            obj_ = maskType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_maskType(obj_)    # validate type maskType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'linearGradient':
            obj_ = linearGradientType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_linearGradientType(obj_)    # validate type linearGradientType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'radialGradient':
            obj_ = radialGradientType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_radialGradientType(obj_)    # validate type radialGradientType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'pattern':
            obj_ = patternType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_patternType(obj_)    # validate type patternType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'filter':
            obj_ = filterType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_filterType(obj_)    # validate type filterType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'cursor':
            obj_ = cursorType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'font':
            obj_ = fontType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animate':
            obj_ = animateType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'set':
            obj_ = setType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animateMotion':
            obj_ = animateMotionType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animateColor':
            obj_ = animateColorType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animateTransform':
            obj_ = animateTransformType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_animateTransformType(obj_)    # validate type animateTransformType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'color-profile':
            obj_ = color_profile.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'font-face':
            obj_ = font_face.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
# end class markerType


class color_profileType(object):
    subclass = None
    superclass = None
    def __init__(self, name=None, rendering_intent='auto', type_=None, show='other', actuate=None, href=None, role=None, arcrole=None, base=None, title=None, local=None, id=None, valueOf_=''):
        self.internalName = "color-profile"
        self.name = name
        self.rendering_intent = rendering_intent
        self.type_ = type_
        self.show = show
        self.actuate = actuate
        self.href = href
        self.role = role
        self.arcrole = arcrole
        self.base = base
        self.title = title
        self.local = local
        self.id = id
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if color_profileType.subclass:
            return color_profileType.subclass(*args_, **kwargs_)
        else:
            return color_profileType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def get_rendering_intent(self): return self.rendering_intent
    def set_rendering_intent(self, rendering_intent): self.rendering_intent = rendering_intent
    def get_type(self): return self.type_
    def set_type(self, type_): self.type_ = type_
    def get_show(self): return self.show
    def set_show(self, show): self.show = show
    def get_actuate(self): return self.actuate
    def set_actuate(self, actuate): self.actuate = actuate
    def get_href(self): return self.href
    def set_href(self, href): self.href = href
    def get_role(self): return self.role
    def set_role(self, role): self.role = role
    def get_arcrole(self): return self.arcrole
    def set_arcrole(self, arcrole): self.arcrole = arcrole
    def get_base(self): return self.base
    def set_base(self, base): self.base = base
    def get_title(self): return self.title
    def set_title(self, title): self.title = title
    def get_local(self): return self.local
    def set_local(self, local): self.local = local
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def getValueOf_(self): return self.valueOf_
    def setValueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='svg:', name_='color-profileType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, self.internalName, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='color-profileType')
        outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='svg:', name_='color-profileType'):
        outfile.write(' name=%s' % (quote_attrib(self.name), ))
        if self.rendering_intent is not None:
            outfile.write(' rendering-intent=%s' % (quote_attrib(self.rendering_intent), ))
        if self.type_ is not None:
            outfile.write(' type=%s' % (quote_attrib(self.type_), ))
        if self.show is not None:
            outfile.write(' show=%s' % (quote_attrib(self.show), ))
        if self.actuate is not None:
            outfile.write(' actuate=%s' % (quote_attrib(self.actuate), ))
        if self.href is not None:
            outfile.write(' href=%s' % (quote_attrib(self.href), ))
        if self.role is not None:
            outfile.write(' role=%s' % (quote_attrib(self.role), ))
        if self.arcrole is not None:
            outfile.write(' arcrole=%s' % (quote_attrib(self.arcrole), ))
        if self.base is not None:
            outfile.write(' base=%s' % (quote_attrib(self.base), ))
        if self.title is not None:
            outfile.write(' title=%s' % (quote_attrib(self.title), ))
        if self.local is not None:
            outfile.write(' local=%s' % (quote_attrib(self.local), ))
        if self.id is not None:
            outfile.write(' id=%s' % (quote_attrib(self.id), ))
    def exportChildren(self, outfile, level, namespace_='svg:', name_='color-profileType'):
        if self.valueOf_.find('![CDATA')>-1:
            value=quote_xml('%s' % self.valueOf_)
            value=value.replace('![CDATA','<![CDATA')
            value=value.replace(']]',']]>')
            outfile.write(value)
        else:
            outfile.write(quote_xml('%s' % self.valueOf_))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        self.valueOf_ = ''
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('name'):
            self.name = attrs.get('name').value
        if attrs.get('rendering-intent'):
            self.rendering_intent = attrs.get('rendering-intent').value
        if attrs.get('type'):
            self.type_ = attrs.get('type').value
        if attrs.get('show'):
            self.show = attrs.get('show').value
        if attrs.get('actuate'):
            self.actuate = attrs.get('actuate').value
        if attrs.get('href'):
            self.href = attrs.get('href').value
        if attrs.get('role'):
            self.role = attrs.get('role').value
        if attrs.get('arcrole'):
            self.arcrole = attrs.get('arcrole').value
        if attrs.get('base'):
            self.base = attrs.get('base').value
        if attrs.get('title'):
            self.title = attrs.get('title').value
        if attrs.get('local'):
            self.local = attrs.get('local').value
        if attrs.get('id'):
            self.id = attrs.get('id').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.TEXT_NODE:
            self.valueOf_ += child_.nodeValue
        elif child_.nodeType == Node.CDATA_SECTION_NODE:
            self.valueOf_ += '![CDATA['+child_.nodeValue+']]'
# end class color_profileType


class linearGradientType(object):
    subclass = None
    superclass = None
    def __init__(self, arcrole=None, style=None, y2=None, show='other', title=None, actuate=None, spreadMethod='pad', id=None, gradientUnits=None, x2=None, href=None, role=None, gradientTransform=None, base=None, y1=None, externalResourcesRequired=None, x1=None, type_=None, classxx=None):
        self.internalName = "linearGradient"
        self.arcrole = arcrole
        self.style = style
        self.y2 = y2
        self.show = show
        self.title = title
        self.actuate = actuate
        self.spreadMethod = spreadMethod
        self.id = id
        self.gradientUnits = gradientUnits
        self.x2 = x2
        self.href = href
        self.role = role
        self.gradientTransform = gradientTransform
        self.base = base
        self.y1 = y1
        self.externalResourcesRequired = externalResourcesRequired
        self.x1 = x1
        self.type_ = type_
        self.classxx = classxx
        self.internalElements = []
    def factory(*args_, **kwargs_):
        if linearGradientType.subclass:
            return linearGradientType.subclass(*args_, **kwargs_)
        else:
            return linearGradientType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def addElement(self, value): self.internalElements.append(value)
    def validate_animateTransformType(self, value):
        # validate type animateTransformType
        pass
    def get_arcrole(self): return self.arcrole
    def set_arcrole(self, arcrole): self.arcrole = arcrole
    def get_style(self): return self.style
    def set_style(self, style): self.style = style
    def get_y2(self): return self.y2
    def set_y2(self, y2): self.y2 = y2
    def get_show(self): return self.show
    def set_show(self, show): self.show = show
    def get_title(self): return self.title
    def set_title(self, title): self.title = title
    def get_actuate(self): return self.actuate
    def set_actuate(self, actuate): self.actuate = actuate
    def get_spreadMethod(self): return self.spreadMethod
    def set_spreadMethod(self, spreadMethod): self.spreadMethod = spreadMethod
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_gradientUnits(self): return self.gradientUnits
    def set_gradientUnits(self, gradientUnits): self.gradientUnits = gradientUnits
    def get_x2(self): return self.x2
    def set_x2(self, x2): self.x2 = x2
    def get_href(self): return self.href
    def set_href(self, href): self.href = href
    def get_role(self): return self.role
    def set_role(self, role): self.role = role
    def get_gradientTransform(self): return self.gradientTransform
    def set_gradientTransform(self, gradientTransform): self.gradientTransform = gradientTransform
    def get_base(self): return self.base
    def set_base(self, base): self.base = base
    def get_y1(self): return self.y1
    def set_y1(self, y1): self.y1 = y1
    def get_externalResourcesRequired(self): return self.externalResourcesRequired
    def set_externalResourcesRequired(self, externalResourcesRequired): self.externalResourcesRequired = externalResourcesRequired
    def get_x1(self): return self.x1
    def set_x1(self, x1): self.x1 = x1
    def get_type(self): return self.type_
    def set_type(self, type_): self.type_ = type_
    def get_class(self): return self.classxx
    def set_class(self, classxx): self.classxx = classxx
    def export(self, outfile, level, namespace_='svg:', name_='linearGradientType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, self.internalName, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='linearGradientType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, self.internalName))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='svg:', name_='linearGradientType'):
        if self.arcrole is not None:
            outfile.write(' arcrole=%s' % (quote_attrib(self.arcrole), ))
        if self.style is not None:
            outfile.write(' style=%s' % (quote_attrib(self.style), ))
        if self.y2 is not None:
            outfile.write(' y2=%s' % (quote_attrib(self.y2), ))
        if self.show is not None:
            outfile.write(' show=%s' % (quote_attrib(self.show), ))
        if self.title is not None:
            outfile.write(' title=%s' % (quote_attrib(self.title), ))
        if self.actuate is not None:
            outfile.write(' actuate=%s' % (quote_attrib(self.actuate), ))
        if self.spreadMethod is not None:
            outfile.write(' spreadMethod=%s' % (quote_attrib(self.spreadMethod), ))
        if self.id is not None:
            outfile.write(' id=%s' % (quote_attrib(self.id), ))
        if self.gradientUnits is not None:
            outfile.write(' gradientUnits=%s' % (quote_attrib(self.gradientUnits), ))
        if self.x2 is not None:
            outfile.write(' x2=%s' % (quote_attrib(self.x2), ))
        if self.href is not None:
            outfile.write(' href=%s' % (quote_attrib(self.href), ))
        if self.role is not None:
            outfile.write(' role=%s' % (quote_attrib(self.role), ))
        if self.gradientTransform is not None:
            outfile.write(' gradientTransform=%s' % (quote_attrib(self.gradientTransform), ))
        if self.base is not None:
            outfile.write(' base=%s' % (quote_attrib(self.base), ))
        if self.y1 is not None:
            outfile.write(' y1=%s' % (quote_attrib(self.y1), ))
        if self.externalResourcesRequired is not None:
            outfile.write(' externalResourcesRequired="%s"' % str_lower(str(self.externalResourcesRequired)))
        if self.x1 is not None:
            outfile.write(' x1=%s' % (quote_attrib(self.x1), ))
        if self.type_ is not None:
            outfile.write(' type=%s' % (quote_attrib(self.type_), ))
        if self.classxx is not None:
            outfile.write(' class=%s' % (quote_attrib(self.classxx), ))
    def exportChildren(self, outfile, level, namespace_='svg:', name_='linearGradientType'):
        for element_ in self.internalElements:
            element_.export(outfile, level, namespace_, name_='stop')
    def hasContent_(self):
        if (
         len(self.internalElements)>0
            ):
            return True
        else:
            return False
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('arcrole'):
            self.arcrole = attrs.get('arcrole').value
        if attrs.get('style'):
            self.style = attrs.get('style').value
        if attrs.get('y2'):
            self.y2 = attrs.get('y2').value
        if attrs.get('show'):
            self.show = attrs.get('show').value
        if attrs.get('title'):
            self.title = attrs.get('title').value
        if attrs.get('actuate'):
            self.actuate = attrs.get('actuate').value
        if attrs.get('spreadMethod'):
            self.spreadMethod = attrs.get('spreadMethod').value
        if attrs.get('id'):
            self.id = attrs.get('id').value
        if attrs.get('gradientUnits'):
            self.gradientUnits = attrs.get('gradientUnits').value
        if attrs.get('x2'):
            self.x2 = attrs.get('x2').value
        if attrs.get('href'):
            self.href = attrs.get('href').value
        if attrs.get('role'):
            self.role = attrs.get('role').value
        if attrs.get('gradientTransform'):
            self.gradientTransform = attrs.get('gradientTransform').value
        if attrs.get('base'):
            self.base = attrs.get('base').value
        if attrs.get('y1'):
            self.y1 = attrs.get('y1').value
        if attrs.get('externalResourcesRequired'):
            if attrs.get('externalResourcesRequired').value in ('true', '1'):
                self.externalResourcesRequired = True
            elif attrs.get('externalResourcesRequired').value in ('false', '0'):
                self.externalResourcesRequired = False
            else:
                raise ValueError('Bad boolean attribute (externalResourcesRequired)')
        if attrs.get('x1'):
            self.x1 = attrs.get('x1').value
        if attrs.get('type'):
            self.type_ = attrs.get('type').value
        if attrs.get('class'):
            self.classxx = attrs.get('class').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'stop':
            obj_ = stopType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animate':
            obj_ = animateType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'set':
            obj_ = setType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animateTransform':
            obj_ = animateTransformType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_animateTransformType(obj_)    # validate type animateTransformType
# end class linearGradientType


class radialGradientType(object):
    subclass = None
    superclass = None
    def __init__(self, arcrole=None, show='other', href=None, fy=None, title=None, actuate=None, spreadMethod='pad', gradientUnits=None, fx=None, cy=None, cx=None, role=None, gradientTransform=None, base=None, externalResourcesRequired=None, r=None, type_=None, id=None):
        self.internalName = "radialGradient"
        self.arcrole = arcrole
        self.show = show
        self.href = href
        self.fy = fy
        self.title = title
        self.actuate = actuate
        self.spreadMethod = spreadMethod
        self.gradientUnits = gradientUnits
        self.fx = fx
        self.cy = cy
        self.cx = cx
        self.role = role
        self.gradientTransform = gradientTransform
        self.base = base
        self.externalResourcesRequired = externalResourcesRequired
        self.r = r
        self.type_ = type_
        self.id = id
        self.internalElements = []
    def factory(*args_, **kwargs_):
        if radialGradientType.subclass:
            return radialGradientType.subclass(*args_, **kwargs_)
        else:
            return radialGradientType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def addElement(self, value): self.internalElements.append(value)
    def validate_animateTransformType(self, value):
        # validate type animateTransformType
        pass
    def get_arcrole(self): return self.arcrole
    def set_arcrole(self, arcrole): self.arcrole = arcrole
    def get_show(self): return self.show
    def set_show(self, show): self.show = show
    def get_href(self): return self.href
    def set_href(self, href): self.href = href
    def get_fy(self): return self.fy
    def set_fy(self, fy): self.fy = fy
    def get_title(self): return self.title
    def set_title(self, title): self.title = title
    def get_actuate(self): return self.actuate
    def set_actuate(self, actuate): self.actuate = actuate
    def get_spreadMethod(self): return self.spreadMethod
    def set_spreadMethod(self, spreadMethod): self.spreadMethod = spreadMethod
    def get_gradientUnits(self): return self.gradientUnits
    def set_gradientUnits(self, gradientUnits): self.gradientUnits = gradientUnits
    def get_fx(self): return self.fx
    def set_fx(self, fx): self.fx = fx
    def get_cy(self): return self.cy
    def set_cy(self, cy): self.cy = cy
    def get_cx(self): return self.cx
    def set_cx(self, cx): self.cx = cx
    def get_role(self): return self.role
    def set_role(self, role): self.role = role
    def get_gradientTransform(self): return self.gradientTransform
    def set_gradientTransform(self, gradientTransform): self.gradientTransform = gradientTransform
    def get_base(self): return self.base
    def set_base(self, base): self.base = base
    def get_externalResourcesRequired(self): return self.externalResourcesRequired
    def set_externalResourcesRequired(self, externalResourcesRequired): self.externalResourcesRequired = externalResourcesRequired
    def get_r(self): return self.r
    def set_r(self, r): self.r = r
    def get_type(self): return self.type_
    def set_type(self, type_): self.type_ = type_
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='svg:', name_='radialGradientType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, self.internalName, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='radialGradientType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, self.internalName))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='svg:', name_='radialGradientType'):
        if self.arcrole is not None:
            outfile.write(' arcrole=%s' % (quote_attrib(self.arcrole), ))
        if self.show is not None:
            outfile.write(' show=%s' % (quote_attrib(self.show), ))
        if self.href is not None:
            outfile.write(' href=%s' % (quote_attrib(self.href), ))
        if self.fy is not None:
            outfile.write(' fy=%s' % (quote_attrib(self.fy), ))
        if self.title is not None:
            outfile.write(' title=%s' % (quote_attrib(self.title), ))
        if self.actuate is not None:
            outfile.write(' actuate=%s' % (quote_attrib(self.actuate), ))
        if self.spreadMethod is not None:
            outfile.write(' spreadMethod=%s' % (quote_attrib(self.spreadMethod), ))
        if self.gradientUnits is not None:
            outfile.write(' gradientUnits=%s' % (quote_attrib(self.gradientUnits), ))
        if self.fx is not None:
            outfile.write(' fx=%s' % (quote_attrib(self.fx), ))
        if self.cy is not None:
            outfile.write(' cy=%s' % (quote_attrib(self.cy), ))
        if self.cx is not None:
            outfile.write(' cx=%s' % (quote_attrib(self.cx), ))
        if self.role is not None:
            outfile.write(' role=%s' % (quote_attrib(self.role), ))
        if self.gradientTransform is not None:
            outfile.write(' gradientTransform=%s' % (quote_attrib(self.gradientTransform), ))
        if self.base is not None:
            outfile.write(' base=%s' % (quote_attrib(self.base), ))
        if self.externalResourcesRequired is not None:
            outfile.write(' externalResourcesRequired="%s"' % str_lower(str(self.externalResourcesRequired)))
        if self.r is not None:
            outfile.write(' r=%s' % (quote_attrib(self.r), ))
        if self.type_ is not None:
            outfile.write(' type=%s' % (quote_attrib(self.type_), ))
        if self.id is not None:
            outfile.write(' id=%s' % (quote_attrib(self.id), ))
    def exportChildren(self, outfile, level, namespace_='svg:', name_='radialGradientType'):
        for element_ in self.internalElements:
            element_.export(outfile, level, namespace_, name_='stop')
    def hasContent_(self):
        if (
         len(self.internalElements)>0
            ):
            return True
        else:
            return False
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('arcrole'):
            self.arcrole = attrs.get('arcrole').value
        if attrs.get('show'):
            self.show = attrs.get('show').value
        if attrs.get('href'):
            self.href = attrs.get('href').value
        if attrs.get('fy'):
            self.fy = attrs.get('fy').value
        if attrs.get('title'):
            self.title = attrs.get('title').value
        if attrs.get('actuate'):
            self.actuate = attrs.get('actuate').value
        if attrs.get('spreadMethod'):
            self.spreadMethod = attrs.get('spreadMethod').value
        if attrs.get('gradientUnits'):
            self.gradientUnits = attrs.get('gradientUnits').value
        if attrs.get('fx'):
            self.fx = attrs.get('fx').value
        if attrs.get('cy'):
            self.cy = attrs.get('cy').value
        if attrs.get('cx'):
            self.cx = attrs.get('cx').value
        if attrs.get('role'):
            self.role = attrs.get('role').value
        if attrs.get('gradientTransform'):
            self.gradientTransform = attrs.get('gradientTransform').value
        if attrs.get('base'):
            self.base = attrs.get('base').value
        if attrs.get('externalResourcesRequired'):
            if attrs.get('externalResourcesRequired').value in ('true', '1'):
                self.externalResourcesRequired = True
            elif attrs.get('externalResourcesRequired').value in ('false', '0'):
                self.externalResourcesRequired = False
            else:
                raise ValueError('Bad boolean attribute (externalResourcesRequired)')
        if attrs.get('r'):
            self.r = attrs.get('r').value
        if attrs.get('type'):
            self.type_ = attrs.get('type').value
        if attrs.get('id'):
            self.id = attrs.get('id').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'stop':
            obj_ = stopType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animate':
            obj_ = animateType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'set':
            obj_ = setType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animateTransform':
            obj_ = animateTransformType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_animateTransformType(obj_)    # validate type animateTransformType
# end class radialGradientType


class stopType(object):
    subclass = None
    superclass = None
    def __init__(self, style=None, classxx=None, stop_color=None, base=None, offset=None, stop_opacity=None, id=None):
        self.internalName = "stop"
        self.style = style
        self.classxx = classxx
        self.stop_color = stop_color
        self.base = base
        self.offset = offset
        self.stop_opacity = stop_opacity
        self.id = id
        self.internalElements = []
    def factory(*args_, **kwargs_):
        if stopType.subclass:
            return stopType.subclass(*args_, **kwargs_)
        else:
            return stopType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def addElement(self, value): self.internalElements.append(value)
    def get_style(self): return self.style
    def set_style(self, style): self.style = style
    def get_class(self): return self.classxx
    def set_class(self, classxx): self.classxx = classxx
    def get_stop_color(self): return self.stop_color
    def set_stop_color(self, stop_color): self.stop_color = stop_color
    def get_base(self): return self.base
    def set_base(self, base): self.base = base
    def get_offset(self): return self.offset
    def set_offset(self, offset): self.offset = offset
    def get_stop_opacity(self): return self.stop_opacity
    def set_stop_opacity(self, stop_opacity): self.stop_opacity = stop_opacity
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='svg:', name_='stopType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, self.internalName, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='stopType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, self.internalName))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='svg:', name_='stopType'):
        if self.style is not None:
            outfile.write(' style=%s' % (quote_attrib(self.style), ))
        if self.classxx is not None:
            outfile.write(' class=%s' % (quote_attrib(self.classxx), ))
        if self.stop_color is not None:
            outfile.write(' stop-color=%s' % (quote_attrib(self.stop_color), ))
        if self.base is not None:
            outfile.write(' base=%s' % (quote_attrib(self.base), ))
        outfile.write(' offset=%s' % (quote_attrib(self.offset), ))
        if self.stop_opacity is not None:
            outfile.write(' stop-opacity=%s' % (quote_attrib(self.stop_opacity), ))
        if self.id is not None:
            outfile.write(' id=%s' % (quote_attrib(self.id), ))
    def exportChildren(self, outfile, level, namespace_='svg:', name_='stopType'):
        for element_ in self.internalElements:
            element_.export(outfile, level, namespace_, name_='animate')
    def hasContent_(self):
        if (
         len(self.internalElements)>0
            ):
            return True
        else:
            return False
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('style'):
            self.style = attrs.get('style').value
        if attrs.get('class'):
            self.classxx = attrs.get('class').value
        if attrs.get('stop-color'):
            self.stop_color = attrs.get('stop-color').value
        if attrs.get('base'):
            self.base = attrs.get('base').value
        if attrs.get('offset'):
            self.offset = attrs.get('offset').value
        if attrs.get('stop-opacity'):
            self.stop_opacity = attrs.get('stop-opacity').value
        if attrs.get('id'):
            self.id = attrs.get('id').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animate':
            obj_ = animateType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'set':
            obj_ = setType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animateColor':
            obj_ = animateColorType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
# end class stopType


class patternType(object):
    subclass = None
    superclass = None
    def __init__(self, show='other', actuate=None, height=None, href=None, viewBox=None, title_attr=None, requiredExtensions=None, id=None, width=None, role=None, type_=None, systemLanguage=None, style_attr=None, externalResourcesRequired=None, classxx=None, lang=None, arcrole=None, space=None, requiredFeatures=None, base=None, patternTransform=None, y=None, x=None, preserveAspectRatio=None, patternUnits=None):
        self.internalName = "pattern"
        self.show = show
        self.actuate = actuate
        self.height = height
        self.href = href
        self.viewBox = viewBox
        self.title_attr = title_attr
        self.requiredExtensions = requiredExtensions
        self.id = id
        self.width = width
        self.role = role
        self.type_ = type_
        self.systemLanguage = systemLanguage
        self.style_attr = style_attr
        self.externalResourcesRequired = externalResourcesRequired
        self.classxx = classxx
        self.lang = lang
        self.arcrole = arcrole
        self.space = space
        self.requiredFeatures = requiredFeatures
        self.base = base
        self.patternTransform = patternTransform
        self.y = y
        self.x = x
        self.preserveAspectRatio = preserveAspectRatio
        self.patternUnits = patternUnits
        self.internalElements = []
    def factory(*args_, **kwargs_):
        if patternType.subclass:
            return patternType.subclass(*args_, **kwargs_)
        else:
            return patternType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def addElement(self, value): self.internalElements.append(value)
    def validate_textType(self, value):
        # validate type textType
        pass
    def validate_svgType(self, value):
        # validate type svgType
        pass
    def validate_viewType(self, value):
        # validate type viewType
        pass
    def validate_markerType(self, value):
        # validate type markerType
        pass
    def validate_clipPathType(self, value):
        # validate type clipPathType
        pass
    def validate_maskType(self, value):
        # validate type maskType
        pass
    def validate_linearGradientType(self, value):
        # validate type linearGradientType
        pass
    def validate_radialGradientType(self, value):
        # validate type radialGradientType
        pass
    def validate_patternType(self, value):
        # validate type patternType
        pass
    def validate_filterType(self, value):
        # validate type filterType
        pass
    def validate_animateTransformType(self, value):
        # validate type animateTransformType
        pass
    def get_show(self): return self.show
    def set_show(self, show): self.show = show
    def get_actuate(self): return self.actuate
    def set_actuate(self, actuate): self.actuate = actuate
    def get_height(self): return self.height
    def set_height(self, height): self.height = height
    def get_href(self): return self.href
    def set_href(self, href): self.href = href
    def get_viewBox(self): return self.viewBox
    def set_viewBox(self, viewBox): self.viewBox = viewBox
    def get_title_attr(self): return self.title_attr
    def set_title_attr(self, title_attr): self.title_attr = title_attr
    def get_requiredExtensions(self): return self.requiredExtensions
    def set_requiredExtensions(self, requiredExtensions): self.requiredExtensions = requiredExtensions
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_width(self): return self.width
    def set_width(self, width): self.width = width
    def get_role(self): return self.role
    def set_role(self, role): self.role = role
    def get_type(self): return self.type_
    def set_type(self, type_): self.type_ = type_
    def get_systemLanguage(self): return self.systemLanguage
    def set_systemLanguage(self, systemLanguage): self.systemLanguage = systemLanguage
    def get_style_attr(self): return self.style_attr
    def set_style_attr(self, style_attr): self.style_attr = style_attr
    def get_externalResourcesRequired(self): return self.externalResourcesRequired
    def set_externalResourcesRequired(self, externalResourcesRequired): self.externalResourcesRequired = externalResourcesRequired
    def get_class(self): return self.classxx
    def set_class(self, classxx): self.classxx = classxx
    def get_lang(self): return self.lang
    def set_lang(self, lang): self.lang = lang
    def get_arcrole(self): return self.arcrole
    def set_arcrole(self, arcrole): self.arcrole = arcrole
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_requiredFeatures(self): return self.requiredFeatures
    def set_requiredFeatures(self, requiredFeatures): self.requiredFeatures = requiredFeatures
    def get_base(self): return self.base
    def set_base(self, base): self.base = base
    def get_patternTransform(self): return self.patternTransform
    def set_patternTransform(self, patternTransform): self.patternTransform = patternTransform
    def get_y(self): return self.y
    def set_y(self, y): self.y = y
    def get_x(self): return self.x
    def set_x(self, x): self.x = x
    def get_preserveAspectRatio(self): return self.preserveAspectRatio
    def set_preserveAspectRatio(self, preserveAspectRatio): self.preserveAspectRatio = preserveAspectRatio
    def get_patternUnits(self): return self.patternUnits
    def set_patternUnits(self, patternUnits): self.patternUnits = patternUnits
    def export(self, outfile, level, namespace_='svg:', name_='patternType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, self.internalName, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='patternType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, self.internalName))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='svg:', name_='patternType'):
        if self.show is not None:
            outfile.write(' show=%s' % (quote_attrib(self.show), ))
        if self.actuate is not None:
            outfile.write(' actuate=%s' % (quote_attrib(self.actuate), ))
        outfile.write(' height=%s' % (quote_attrib(self.height), ))
        if self.href is not None:
            outfile.write(' href=%s' % (quote_attrib(self.href), ))
        if self.viewBox is not None:
            outfile.write(' viewBox=%s' % (quote_attrib(self.viewBox), ))
        if self.title_attr is not None:
            outfile.write(' title_attr=%s' % (quote_attrib(self.title_attr), ))
        if self.requiredExtensions is not None:
            outfile.write(' requiredExtensions=%s' % (quote_attrib(self.requiredExtensions), ))
        if self.id is not None:
            outfile.write(' id=%s' % (quote_attrib(self.id), ))
        outfile.write(' width=%s' % (quote_attrib(self.width), ))
        if self.role is not None:
            outfile.write(' role=%s' % (quote_attrib(self.role), ))
        if self.type_ is not None:
            outfile.write(' type=%s' % (quote_attrib(self.type_), ))
        if self.systemLanguage is not None:
            outfile.write(' systemLanguage=%s' % (quote_attrib(self.systemLanguage), ))
        if self.style_attr is not None:
            outfile.write(' style_attr=%s' % (quote_attrib(self.style_attr), ))
        if self.externalResourcesRequired is not None:
            outfile.write(' externalResourcesRequired="%s"' % str_lower(str(self.externalResourcesRequired)))
        if self.classxx is not None:
            outfile.write(' class=%s' % (quote_attrib(self.classxx), ))
        if self.lang is not None:
            outfile.write(' lang=%s' % (quote_attrib(self.lang), ))
        if self.arcrole is not None:
            outfile.write(' arcrole=%s' % (quote_attrib(self.arcrole), ))
        if self.space is not None:
            outfile.write(' space=%s' % (quote_attrib(self.space), ))
        if self.requiredFeatures is not None:
            outfile.write(' requiredFeatures=%s' % (quote_attrib(self.requiredFeatures), ))
        if self.base is not None:
            outfile.write(' base=%s' % (quote_attrib(self.base), ))
        if self.patternTransform is not None:
            outfile.write(' patternTransform=%s' % (quote_attrib(self.patternTransform), ))
        if self.y is not None:
            outfile.write(' y=%s' % (quote_attrib(self.y), ))
        if self.x is not None:
            outfile.write(' x=%s' % (quote_attrib(self.x), ))
        if self.preserveAspectRatio is not None:
            outfile.write(' preserveAspectRatio=%s' % (quote_attrib(self.preserveAspectRatio), ))
        if self.patternUnits is not None:
            outfile.write(' patternUnits=%s' % (quote_attrib(self.patternUnits), ))
    def exportChildren(self, outfile, level, namespace_='svg:', name_='patternType'):
        for element_ in self.internalElements:
            element_.export(outfile, level, namespace_, name_='desc')
    def hasContent_(self):
        if (
         len(self.internalElements)>0
            ):
            return True
        else:
            return False
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('show'):
            self.show = attrs.get('show').value
        if attrs.get('actuate'):
            self.actuate = attrs.get('actuate').value
        if attrs.get('height'):
            self.height = attrs.get('height').value
        if attrs.get('href'):
            self.href = attrs.get('href').value
        if attrs.get('viewBox'):
            self.viewBox = attrs.get('viewBox').value
        if attrs.get('title_attr'):
            self.title_attr = attrs.get('title_attr').value
        if attrs.get('requiredExtensions'):
            self.requiredExtensions = attrs.get('requiredExtensions').value
        if attrs.get('id'):
            self.id = attrs.get('id').value
        if attrs.get('width'):
            self.width = attrs.get('width').value
        if attrs.get('role'):
            self.role = attrs.get('role').value
        if attrs.get('type'):
            self.type_ = attrs.get('type').value
        if attrs.get('systemLanguage'):
            self.systemLanguage = attrs.get('systemLanguage').value
        if attrs.get('style_attr'):
            self.style_attr = attrs.get('style_attr').value
        if attrs.get('externalResourcesRequired'):
            if attrs.get('externalResourcesRequired').value in ('true', '1'):
                self.externalResourcesRequired = True
            elif attrs.get('externalResourcesRequired').value in ('false', '0'):
                self.externalResourcesRequired = False
            else:
                raise ValueError('Bad boolean attribute (externalResourcesRequired)')
        if attrs.get('class'):
            self.classxx = attrs.get('class').value
        if attrs.get('lang'):
            self.lang = attrs.get('lang').value
        if attrs.get('arcrole'):
            self.arcrole = attrs.get('arcrole').value
        if attrs.get('space'):
            self.space = attrs.get('space').value
        if attrs.get('requiredFeatures'):
            self.requiredFeatures = attrs.get('requiredFeatures').value
        if attrs.get('base'):
            self.base = attrs.get('base').value
        if attrs.get('patternTransform'):
            self.patternTransform = attrs.get('patternTransform').value
        if attrs.get('y'):
            self.y = attrs.get('y').value
        if attrs.get('x'):
            self.x = attrs.get('x').value
        if attrs.get('preserveAspectRatio'):
            self.preserveAspectRatio = attrs.get('preserveAspectRatio').value
        if attrs.get('patternUnits'):
            self.patternUnits = attrs.get('patternUnits').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'desc':
            obj_ = descType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'title':
            obj_ = titleType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'metadata':
            obj_ = metadataType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'defs':
            obj_ = defsType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'path':
            obj_ = pathType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'text':
            obj_ = textType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_textType(obj_)    # validate type textType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'rect':
            obj_ = rectType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'circle':
            obj_ = circleType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'ellipse':
            obj_ = ellipseType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'line':
            obj_ = lineType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'polyline':
            obj_ = polylineType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'polygon':
            obj_ = polygonType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'use':
            obj_ = useType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'image':
            obj_ = imageType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'svg':
            obj_ = svgType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_svgType(obj_)    # validate type svgType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'g':
            obj_ = gType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'view':
            obj_ = viewType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_viewType(obj_)    # validate type viewType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'switch':
            obj_ = switchType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'a':
            obj_ = aType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'altGlyphDef':
            obj_ = altGlyphDefType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'script':
            obj_ = scriptType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'style':
            obj_ = styleType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'symbol':
            obj_ = symbolType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'marker':
            obj_ = markerType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_markerType(obj_)    # validate type markerType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'clipPath':
            obj_ = clipPathType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_clipPathType(obj_)    # validate type clipPathType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'mask':
            obj_ = maskType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_maskType(obj_)    # validate type maskType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'linearGradient':
            obj_ = linearGradientType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_linearGradientType(obj_)    # validate type linearGradientType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'radialGradient':
            obj_ = radialGradientType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_radialGradientType(obj_)    # validate type radialGradientType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'pattern':
            obj_ = patternType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_patternType(obj_)    # validate type patternType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'filter':
            obj_ = filterType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_filterType(obj_)    # validate type filterType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'cursor':
            obj_ = cursorType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'font':
            obj_ = fontType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animate':
            obj_ = animateType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'set':
            obj_ = setType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animateMotion':
            obj_ = animateMotionType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animateColor':
            obj_ = animateColorType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animateTransform':
            obj_ = animateTransformType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_animateTransformType(obj_)    # validate type animateTransformType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'color-profile':
            obj_ = color_profile.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'font-face':
            obj_ = font_face.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
# end class patternType


class clipPathType(object):
    subclass = None
    superclass = None
    def __init__(self, stroke_linejoin=None, font_size=None, text_rendering=None, requiredExtensions=None, letter_spacing=None, shape_rendering=None, word_spacing=None, stroke=None, stroke_linecap=None, baseline_shift=None, stroke_width=None, id=None, fill=None, cursor=None, style=None, space=None, fill_opacity=None, transform=None, font_style=None, font_stretch=None, stroke_miterlimit=None, font_variant=None, glyph_orientation_horizontal=None, font_weight=None, opacity=None, direction=None, clip_path=None, alignment_baseline=None, glyph_orientation_vertical=None, visibility=None, unicode_bidi=None, systemLanguage=None, clip_rule=None, dominant_baseline=None, image_rendering=None, externalResourcesRequired=None, font_family=None, classxx=None, lang=None, clipPathUnits=None, writing_mode=None, stroke_opacity=None, font_size_adjust=None, fill_rule=None, mask=None, stroke_dashoffset=None, text_anchor=None, text_decoration=None, filter=None, pointer_events=None, requiredFeatures=None, base=None, stroke_dasharray=None, display=None):
        self.internalName = "clipPath"
        self.stroke_linejoin = stroke_linejoin
        self.font_size = font_size
        self.text_rendering = text_rendering
        self.requiredExtensions = requiredExtensions
        self.letter_spacing = letter_spacing
        self.shape_rendering = shape_rendering
        self.word_spacing = word_spacing
        self.stroke = stroke
        self.stroke_linecap = stroke_linecap
        self.baseline_shift = baseline_shift
        self.stroke_width = stroke_width
        self.id = id
        self.fill = fill
        self.cursor = cursor
        self.style = style
        self.space = space
        self.fill_opacity = fill_opacity
        self.transform = transform
        self.font_style = font_style
        self.font_stretch = font_stretch
        self.stroke_miterlimit = stroke_miterlimit
        self.font_variant = font_variant
        self.glyph_orientation_horizontal = glyph_orientation_horizontal
        self.font_weight = font_weight
        self.opacity = opacity
        self.direction = direction
        self.clip_path = clip_path
        self.alignment_baseline = alignment_baseline
        self.glyph_orientation_vertical = glyph_orientation_vertical
        self.visibility = visibility
        self.unicode_bidi = unicode_bidi
        self.systemLanguage = systemLanguage
        self.clip_rule = clip_rule
        self.dominant_baseline = dominant_baseline
        self.image_rendering = image_rendering
        self.externalResourcesRequired = externalResourcesRequired
        self.font_family = font_family
        self.classxx = classxx
        self.lang = lang
        self.clipPathUnits = clipPathUnits
        self.writing_mode = writing_mode
        self.stroke_opacity = stroke_opacity
        self.font_size_adjust = font_size_adjust
        self.fill_rule = fill_rule
        self.mask = mask
        self.stroke_dashoffset = stroke_dashoffset
        self.text_anchor = text_anchor
        self.text_decoration = text_decoration
        self.filter = filter
        self.pointer_events = pointer_events
        self.requiredFeatures = requiredFeatures
        self.base = base
        self.stroke_dasharray = stroke_dasharray
        self.display = display
        self.internalElements = []
    def factory(*args_, **kwargs_):
        if clipPathType.subclass:
            return clipPathType.subclass(*args_, **kwargs_)
        else:
            return clipPathType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def addElement(self, value): self.internalElements.append(value)
    def validate_textType(self, value):
        # validate type textType
        pass
    def validate_animateTransformType(self, value):
        # validate type animateTransformType
        pass
    def get_stroke_linejoin(self): return self.stroke_linejoin
    def set_stroke_linejoin(self, stroke_linejoin): self.stroke_linejoin = stroke_linejoin
    def get_font_size(self): return self.font_size
    def set_font_size(self, font_size): self.font_size = font_size
    def get_text_rendering(self): return self.text_rendering
    def set_text_rendering(self, text_rendering): self.text_rendering = text_rendering
    def get_requiredExtensions(self): return self.requiredExtensions
    def set_requiredExtensions(self, requiredExtensions): self.requiredExtensions = requiredExtensions
    def get_letter_spacing(self): return self.letter_spacing
    def set_letter_spacing(self, letter_spacing): self.letter_spacing = letter_spacing
    def get_shape_rendering(self): return self.shape_rendering
    def set_shape_rendering(self, shape_rendering): self.shape_rendering = shape_rendering
    def get_word_spacing(self): return self.word_spacing
    def set_word_spacing(self, word_spacing): self.word_spacing = word_spacing
    def get_stroke(self): return self.stroke
    def set_stroke(self, stroke): self.stroke = stroke
    def get_stroke_linecap(self): return self.stroke_linecap
    def set_stroke_linecap(self, stroke_linecap): self.stroke_linecap = stroke_linecap
    def get_baseline_shift(self): return self.baseline_shift
    def set_baseline_shift(self, baseline_shift): self.baseline_shift = baseline_shift
    def get_stroke_width(self): return self.stroke_width
    def set_stroke_width(self, stroke_width): self.stroke_width = stroke_width
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_fill(self): return self.fill
    def set_fill(self, fill): self.fill = fill
    def get_cursor(self): return self.cursor
    def set_cursor(self, cursor): self.cursor = cursor
    def get_style(self): return self.style
    def set_style(self, style): self.style = style
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_fill_opacity(self): return self.fill_opacity
    def set_fill_opacity(self, fill_opacity): self.fill_opacity = fill_opacity
    def get_transform(self): return self.transform
    def set_transform(self, transform): self.transform = transform
    def get_font_style(self): return self.font_style
    def set_font_style(self, font_style): self.font_style = font_style
    def get_font_stretch(self): return self.font_stretch
    def set_font_stretch(self, font_stretch): self.font_stretch = font_stretch
    def get_stroke_miterlimit(self): return self.stroke_miterlimit
    def set_stroke_miterlimit(self, stroke_miterlimit): self.stroke_miterlimit = stroke_miterlimit
    def get_font_variant(self): return self.font_variant
    def set_font_variant(self, font_variant): self.font_variant = font_variant
    def get_glyph_orientation_horizontal(self): return self.glyph_orientation_horizontal
    def set_glyph_orientation_horizontal(self, glyph_orientation_horizontal): self.glyph_orientation_horizontal = glyph_orientation_horizontal
    def get_font_weight(self): return self.font_weight
    def set_font_weight(self, font_weight): self.font_weight = font_weight
    def get_opacity(self): return self.opacity
    def set_opacity(self, opacity): self.opacity = opacity
    def get_direction(self): return self.direction
    def set_direction(self, direction): self.direction = direction
    def get_clip_path(self): return self.clip_path
    def set_clip_path(self, clip_path): self.clip_path = clip_path
    def get_alignment_baseline(self): return self.alignment_baseline
    def set_alignment_baseline(self, alignment_baseline): self.alignment_baseline = alignment_baseline
    def get_glyph_orientation_vertical(self): return self.glyph_orientation_vertical
    def set_glyph_orientation_vertical(self, glyph_orientation_vertical): self.glyph_orientation_vertical = glyph_orientation_vertical
    def get_visibility(self): return self.visibility
    def set_visibility(self, visibility): self.visibility = visibility
    def get_unicode_bidi(self): return self.unicode_bidi
    def set_unicode_bidi(self, unicode_bidi): self.unicode_bidi = unicode_bidi
    def get_systemLanguage(self): return self.systemLanguage
    def set_systemLanguage(self, systemLanguage): self.systemLanguage = systemLanguage
    def get_clip_rule(self): return self.clip_rule
    def set_clip_rule(self, clip_rule): self.clip_rule = clip_rule
    def get_dominant_baseline(self): return self.dominant_baseline
    def set_dominant_baseline(self, dominant_baseline): self.dominant_baseline = dominant_baseline
    def get_image_rendering(self): return self.image_rendering
    def set_image_rendering(self, image_rendering): self.image_rendering = image_rendering
    def get_externalResourcesRequired(self): return self.externalResourcesRequired
    def set_externalResourcesRequired(self, externalResourcesRequired): self.externalResourcesRequired = externalResourcesRequired
    def get_font_family(self): return self.font_family
    def set_font_family(self, font_family): self.font_family = font_family
    def get_class(self): return self.classxx
    def set_class(self, classxx): self.classxx = classxx
    def get_lang(self): return self.lang
    def set_lang(self, lang): self.lang = lang
    def get_clipPathUnits(self): return self.clipPathUnits
    def set_clipPathUnits(self, clipPathUnits): self.clipPathUnits = clipPathUnits
    def get_writing_mode(self): return self.writing_mode
    def set_writing_mode(self, writing_mode): self.writing_mode = writing_mode
    def get_stroke_opacity(self): return self.stroke_opacity
    def set_stroke_opacity(self, stroke_opacity): self.stroke_opacity = stroke_opacity
    def get_font_size_adjust(self): return self.font_size_adjust
    def set_font_size_adjust(self, font_size_adjust): self.font_size_adjust = font_size_adjust
    def get_fill_rule(self): return self.fill_rule
    def set_fill_rule(self, fill_rule): self.fill_rule = fill_rule
    def get_mask(self): return self.mask
    def set_mask(self, mask): self.mask = mask
    def get_stroke_dashoffset(self): return self.stroke_dashoffset
    def set_stroke_dashoffset(self, stroke_dashoffset): self.stroke_dashoffset = stroke_dashoffset
    def get_text_anchor(self): return self.text_anchor
    def set_text_anchor(self, text_anchor): self.text_anchor = text_anchor
    def get_text_decoration(self): return self.text_decoration
    def set_text_decoration(self, text_decoration): self.text_decoration = text_decoration
    def get_filter(self): return self.filter
    def set_filter(self, filter): self.filter = filter
    def get_pointer_events(self): return self.pointer_events
    def set_pointer_events(self, pointer_events): self.pointer_events = pointer_events
    def get_requiredFeatures(self): return self.requiredFeatures
    def set_requiredFeatures(self, requiredFeatures): self.requiredFeatures = requiredFeatures
    def get_base(self): return self.base
    def set_base(self, base): self.base = base
    def get_stroke_dasharray(self): return self.stroke_dasharray
    def set_stroke_dasharray(self, stroke_dasharray): self.stroke_dasharray = stroke_dasharray
    def get_display(self): return self.display
    def set_display(self, display): self.display = display
    def export(self, outfile, level, namespace_='svg:', name_='clipPathType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, self.internalName, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='clipPathType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, self.internalName))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='svg:', name_='clipPathType'):
        if self.stroke_linejoin is not None:
            outfile.write(' stroke-linejoin=%s' % (quote_attrib(self.stroke_linejoin), ))
        if self.font_size is not None:
            outfile.write(' font-size=%s' % (quote_attrib(self.font_size), ))
        if self.text_rendering is not None:
            outfile.write(' text-rendering=%s' % (quote_attrib(self.text_rendering), ))
        if self.requiredExtensions is not None:
            outfile.write(' requiredExtensions=%s' % (quote_attrib(self.requiredExtensions), ))
        if self.letter_spacing is not None:
            outfile.write(' letter-spacing=%s' % (quote_attrib(self.letter_spacing), ))
        if self.shape_rendering is not None:
            outfile.write(' shape-rendering=%s' % (quote_attrib(self.shape_rendering), ))
        if self.word_spacing is not None:
            outfile.write(' word-spacing=%s' % (quote_attrib(self.word_spacing), ))
        if self.stroke is not None:
            outfile.write(' stroke=%s' % (quote_attrib(self.stroke), ))
        if self.stroke_linecap is not None:
            outfile.write(' stroke-linecap=%s' % (quote_attrib(self.stroke_linecap), ))
        if self.baseline_shift is not None:
            outfile.write(' baseline-shift=%s' % (quote_attrib(self.baseline_shift), ))
        if self.stroke_width is not None:
            outfile.write(' stroke-width=%s' % (quote_attrib(self.stroke_width), ))
        if self.id is not None:
            outfile.write(' id=%s' % (quote_attrib(self.id), ))
        if self.fill is not None:
            outfile.write(' fill=%s' % (quote_attrib(self.fill), ))
        if self.cursor is not None:
            outfile.write(' cursor=%s' % (quote_attrib(self.cursor), ))
        if self.style is not None:
            outfile.write(' style=%s' % (quote_attrib(self.style), ))
        if self.space is not None:
            outfile.write(' space=%s' % (quote_attrib(self.space), ))
        if self.fill_opacity is not None:
            outfile.write(' fill-opacity=%s' % (quote_attrib(self.fill_opacity), ))
        if self.transform is not None:
            outfile.write(' transform=%s' % (quote_attrib(self.transform), ))
        if self.font_style is not None:
            outfile.write(' font-style=%s' % (quote_attrib(self.font_style), ))
        if self.font_stretch is not None:
            outfile.write(' font-stretch=%s' % (quote_attrib(self.font_stretch), ))
        if self.stroke_miterlimit is not None:
            outfile.write(' stroke-miterlimit=%s' % (quote_attrib(self.stroke_miterlimit), ))
        if self.font_variant is not None:
            outfile.write(' font-variant=%s' % (quote_attrib(self.font_variant), ))
        if self.glyph_orientation_horizontal is not None:
            outfile.write(' glyph-orientation-horizontal=%s' % (quote_attrib(self.glyph_orientation_horizontal), ))
        if self.font_weight is not None:
            outfile.write(' font-weight=%s' % (quote_attrib(self.font_weight), ))
        if self.opacity is not None:
            outfile.write(' opacity=%s' % (quote_attrib(self.opacity), ))
        if self.direction is not None:
            outfile.write(' direction=%s' % (quote_attrib(self.direction), ))
        if self.clip_path is not None:
            outfile.write(' clip-path=%s' % (quote_attrib(self.clip_path), ))
        if self.alignment_baseline is not None:
            outfile.write(' alignment-baseline=%s' % (quote_attrib(self.alignment_baseline), ))
        if self.glyph_orientation_vertical is not None:
            outfile.write(' glyph-orientation-vertical=%s' % (quote_attrib(self.glyph_orientation_vertical), ))
        if self.visibility is not None:
            outfile.write(' visibility=%s' % (quote_attrib(self.visibility), ))
        if self.unicode_bidi is not None:
            outfile.write(' unicode-bidi=%s' % (quote_attrib(self.unicode_bidi), ))
        if self.systemLanguage is not None:
            outfile.write(' systemLanguage=%s' % (quote_attrib(self.systemLanguage), ))
        if self.clip_rule is not None:
            outfile.write(' clip-rule=%s' % (quote_attrib(self.clip_rule), ))
        if self.dominant_baseline is not None:
            outfile.write(' dominant-baseline=%s' % (quote_attrib(self.dominant_baseline), ))
        if self.image_rendering is not None:
            outfile.write(' image-rendering=%s' % (quote_attrib(self.image_rendering), ))
        if self.externalResourcesRequired is not None:
            outfile.write(' externalResourcesRequired="%s"' % str_lower(str(self.externalResourcesRequired)))
        if self.font_family is not None:
            outfile.write(' font-family=%s' % (quote_attrib(self.font_family), ))
        if self.classxx is not None:
            outfile.write(' class=%s' % (quote_attrib(self.classxx), ))
        if self.lang is not None:
            outfile.write(' lang=%s' % (quote_attrib(self.lang), ))
        if self.clipPathUnits is not None:
            outfile.write(' clipPathUnits=%s' % (quote_attrib(self.clipPathUnits), ))
        if self.writing_mode is not None:
            outfile.write(' writing-mode=%s' % (quote_attrib(self.writing_mode), ))
        if self.stroke_opacity is not None:
            outfile.write(' stroke-opacity=%s' % (quote_attrib(self.stroke_opacity), ))
        if self.font_size_adjust is not None:
            outfile.write(' font-size-adjust=%s' % (quote_attrib(self.font_size_adjust), ))
        if self.fill_rule is not None:
            outfile.write(' fill-rule=%s' % (quote_attrib(self.fill_rule), ))
        if self.mask is not None:
            outfile.write(' mask=%s' % (quote_attrib(self.mask), ))
        if self.stroke_dashoffset is not None:
            outfile.write(' stroke-dashoffset=%s' % (quote_attrib(self.stroke_dashoffset), ))
        if self.text_anchor is not None:
            outfile.write(' text-anchor=%s' % (quote_attrib(self.text_anchor), ))
        if self.text_decoration is not None:
            outfile.write(' text-decoration=%s' % (quote_attrib(self.text_decoration), ))
        if self.filter is not None:
            outfile.write(' filter=%s' % (quote_attrib(self.filter), ))
        if self.pointer_events is not None:
            outfile.write(' pointer-events=%s' % (quote_attrib(self.pointer_events), ))
        if self.requiredFeatures is not None:
            outfile.write(' requiredFeatures=%s' % (quote_attrib(self.requiredFeatures), ))
        if self.base is not None:
            outfile.write(' base=%s' % (quote_attrib(self.base), ))
        if self.stroke_dasharray is not None:
            outfile.write(' stroke-dasharray=%s' % (quote_attrib(self.stroke_dasharray), ))
        if self.display is not None:
            outfile.write(' display=%s' % (quote_attrib(self.display), ))
    def exportChildren(self, outfile, level, namespace_='svg:', name_='clipPathType'):
        for element_ in self.internalElements:
            element_.export(outfile, level, namespace_, name_='path')
    def hasContent_(self):
        if (
         len(self.internalElements)>0
            ):
            return True
        else:
            return False
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('stroke-linejoin'):
            self.stroke_linejoin = attrs.get('stroke-linejoin').value
        if attrs.get('font-size'):
            self.font_size = attrs.get('font-size').value
        if attrs.get('text-rendering'):
            self.text_rendering = attrs.get('text-rendering').value
        if attrs.get('requiredExtensions'):
            self.requiredExtensions = attrs.get('requiredExtensions').value
        if attrs.get('letter-spacing'):
            self.letter_spacing = attrs.get('letter-spacing').value
        if attrs.get('shape-rendering'):
            self.shape_rendering = attrs.get('shape-rendering').value
        if attrs.get('word-spacing'):
            self.word_spacing = attrs.get('word-spacing').value
        if attrs.get('stroke'):
            self.stroke = attrs.get('stroke').value
        if attrs.get('stroke-linecap'):
            self.stroke_linecap = attrs.get('stroke-linecap').value
        if attrs.get('baseline-shift'):
            self.baseline_shift = attrs.get('baseline-shift').value
        if attrs.get('stroke-width'):
            self.stroke_width = attrs.get('stroke-width').value
        if attrs.get('id'):
            self.id = attrs.get('id').value
        if attrs.get('fill'):
            self.fill = attrs.get('fill').value
        if attrs.get('cursor'):
            self.cursor = attrs.get('cursor').value
        if attrs.get('style'):
            self.style = attrs.get('style').value
        if attrs.get('space'):
            self.space = attrs.get('space').value
        if attrs.get('fill-opacity'):
            self.fill_opacity = attrs.get('fill-opacity').value
        if attrs.get('transform'):
            self.transform = attrs.get('transform').value
        if attrs.get('font-style'):
            self.font_style = attrs.get('font-style').value
        if attrs.get('font-stretch'):
            self.font_stretch = attrs.get('font-stretch').value
        if attrs.get('stroke-miterlimit'):
            self.stroke_miterlimit = attrs.get('stroke-miterlimit').value
        if attrs.get('font-variant'):
            self.font_variant = attrs.get('font-variant').value
        if attrs.get('glyph-orientation-horizontal'):
            self.glyph_orientation_horizontal = attrs.get('glyph-orientation-horizontal').value
        if attrs.get('font-weight'):
            self.font_weight = attrs.get('font-weight').value
        if attrs.get('opacity'):
            self.opacity = attrs.get('opacity').value
        if attrs.get('direction'):
            self.direction = attrs.get('direction').value
        if attrs.get('clip-path'):
            self.clip_path = attrs.get('clip-path').value
        if attrs.get('alignment-baseline'):
            self.alignment_baseline = attrs.get('alignment-baseline').value
        if attrs.get('glyph-orientation-vertical'):
            self.glyph_orientation_vertical = attrs.get('glyph-orientation-vertical').value
        if attrs.get('visibility'):
            self.visibility = attrs.get('visibility').value
        if attrs.get('unicode-bidi'):
            self.unicode_bidi = attrs.get('unicode-bidi').value
        if attrs.get('systemLanguage'):
            self.systemLanguage = attrs.get('systemLanguage').value
        if attrs.get('clip-rule'):
            self.clip_rule = attrs.get('clip-rule').value
        if attrs.get('dominant-baseline'):
            self.dominant_baseline = attrs.get('dominant-baseline').value
        if attrs.get('image-rendering'):
            self.image_rendering = attrs.get('image-rendering').value
        if attrs.get('externalResourcesRequired'):
            if attrs.get('externalResourcesRequired').value in ('true', '1'):
                self.externalResourcesRequired = True
            elif attrs.get('externalResourcesRequired').value in ('false', '0'):
                self.externalResourcesRequired = False
            else:
                raise ValueError('Bad boolean attribute (externalResourcesRequired)')
        if attrs.get('font-family'):
            self.font_family = attrs.get('font-family').value
        if attrs.get('class'):
            self.classxx = attrs.get('class').value
        if attrs.get('lang'):
            self.lang = attrs.get('lang').value
        if attrs.get('clipPathUnits'):
            self.clipPathUnits = attrs.get('clipPathUnits').value
        if attrs.get('writing-mode'):
            self.writing_mode = attrs.get('writing-mode').value
        if attrs.get('stroke-opacity'):
            self.stroke_opacity = attrs.get('stroke-opacity').value
        if attrs.get('font-size-adjust'):
            self.font_size_adjust = attrs.get('font-size-adjust').value
        if attrs.get('fill-rule'):
            self.fill_rule = attrs.get('fill-rule').value
        if attrs.get('mask'):
            self.mask = attrs.get('mask').value
        if attrs.get('stroke-dashoffset'):
            self.stroke_dashoffset = attrs.get('stroke-dashoffset').value
        if attrs.get('text-anchor'):
            self.text_anchor = attrs.get('text-anchor').value
        if attrs.get('text-decoration'):
            self.text_decoration = attrs.get('text-decoration').value
        if attrs.get('filter'):
            self.filter = attrs.get('filter').value
        if attrs.get('pointer-events'):
            self.pointer_events = attrs.get('pointer-events').value
        if attrs.get('requiredFeatures'):
            self.requiredFeatures = attrs.get('requiredFeatures').value
        if attrs.get('base'):
            self.base = attrs.get('base').value
        if attrs.get('stroke-dasharray'):
            self.stroke_dasharray = attrs.get('stroke-dasharray').value
        if attrs.get('display'):
            self.display = attrs.get('display').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'path':
            obj_ = pathType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'text':
            obj_ = textType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_textType(obj_)    # validate type textType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'rect':
            obj_ = rectType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'circle':
            obj_ = circleType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'ellipse':
            obj_ = ellipseType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'line':
            obj_ = lineType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'polyline':
            obj_ = polylineType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'polygon':
            obj_ = polygonType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'use':
            obj_ = useType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animate':
            obj_ = animateType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'set':
            obj_ = setType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animateMotion':
            obj_ = animateMotionType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animateColor':
            obj_ = animateColorType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animateTransform':
            obj_ = animateTransformType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_animateTransformType(obj_)    # validate type animateTransformType
# end class clipPathType


class maskType(object):
    subclass = None
    superclass = None
    def __init__(self, lang=None, systemLanguage=None, id=None, requiredExtensions=None, space=None, transform=None, height=None, width=None, requiredFeatures=None, base=None, style_attr=None, y=None, x=None, externalResourcesRequired=None, maskUnits=None, classxx=None):
        self.internalName = "mask"
        self.lang = lang
        self.systemLanguage = systemLanguage
        self.id = id
        self.requiredExtensions = requiredExtensions
        self.space = space
        self.transform = transform
        self.height = height
        self.width = width
        self.requiredFeatures = requiredFeatures
        self.base = base
        self.style_attr = style_attr
        self.y = y
        self.x = x
        self.externalResourcesRequired = externalResourcesRequired
        self.maskUnits = maskUnits
        self.classxx = classxx
        self.internalElements = []
    def factory(*args_, **kwargs_):
        if maskType.subclass:
            return maskType.subclass(*args_, **kwargs_)
        else:
            return maskType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def addElement(self, value): self.internalElements.append(value)
    def validate_textType(self, value):
        # validate type textType
        pass
    def validate_svgType(self, value):
        # validate type svgType
        pass
    def validate_viewType(self, value):
        # validate type viewType
        pass
    def validate_markerType(self, value):
        # validate type markerType
        pass
    def validate_clipPathType(self, value):
        # validate type clipPathType
        pass
    def validate_maskType(self, value):
        # validate type maskType
        pass
    def validate_linearGradientType(self, value):
        # validate type linearGradientType
        pass
    def validate_radialGradientType(self, value):
        # validate type radialGradientType
        pass
    def validate_patternType(self, value):
        # validate type patternType
        pass
    def validate_filterType(self, value):
        # validate type filterType
        pass
    def validate_animateTransformType(self, value):
        # validate type animateTransformType
        pass
    def get_lang(self): return self.lang
    def set_lang(self, lang): self.lang = lang
    def get_systemLanguage(self): return self.systemLanguage
    def set_systemLanguage(self, systemLanguage): self.systemLanguage = systemLanguage
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_requiredExtensions(self): return self.requiredExtensions
    def set_requiredExtensions(self, requiredExtensions): self.requiredExtensions = requiredExtensions
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_transform(self): return self.transform
    def set_transform(self, transform): self.transform = transform
    def get_height(self): return self.height
    def set_height(self, height): self.height = height
    def get_width(self): return self.width
    def set_width(self, width): self.width = width
    def get_requiredFeatures(self): return self.requiredFeatures
    def set_requiredFeatures(self, requiredFeatures): self.requiredFeatures = requiredFeatures
    def get_base(self): return self.base
    def set_base(self, base): self.base = base
    def get_style_attr(self): return self.style_attr
    def set_style_attr(self, style_attr): self.style_attr = style_attr
    def get_y(self): return self.y
    def set_y(self, y): self.y = y
    def get_x(self): return self.x
    def set_x(self, x): self.x = x
    def get_externalResourcesRequired(self): return self.externalResourcesRequired
    def set_externalResourcesRequired(self, externalResourcesRequired): self.externalResourcesRequired = externalResourcesRequired
    def get_maskUnits(self): return self.maskUnits
    def set_maskUnits(self, maskUnits): self.maskUnits = maskUnits
    def get_class(self): return self.classxx
    def set_class(self, classxx): self.classxx = classxx
    def export(self, outfile, level, namespace_='svg:', name_='maskType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, self.internalName, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='maskType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, self.internalName))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='svg:', name_='maskType'):
        if self.lang is not None:
            outfile.write(' lang=%s' % (quote_attrib(self.lang), ))
        if self.systemLanguage is not None:
            outfile.write(' systemLanguage=%s' % (quote_attrib(self.systemLanguage), ))
        if self.id is not None:
            outfile.write(' id=%s' % (quote_attrib(self.id), ))
        if self.requiredExtensions is not None:
            outfile.write(' requiredExtensions=%s' % (quote_attrib(self.requiredExtensions), ))
        if self.space is not None:
            outfile.write(' space=%s' % (quote_attrib(self.space), ))
        if self.transform is not None:
            outfile.write(' transform=%s' % (quote_attrib(self.transform), ))
        if self.height is not None:
            outfile.write(' height=%s' % (quote_attrib(self.height), ))
        if self.width is not None:
            outfile.write(' width=%s' % (quote_attrib(self.width), ))
        if self.requiredFeatures is not None:
            outfile.write(' requiredFeatures=%s' % (quote_attrib(self.requiredFeatures), ))
        if self.base is not None:
            outfile.write(' base=%s' % (quote_attrib(self.base), ))
        if self.style_attr is not None:
            outfile.write(' style_attr=%s' % (quote_attrib(self.style_attr), ))
        if self.y is not None:
            outfile.write(' y=%s' % (quote_attrib(self.y), ))
        if self.x is not None:
            outfile.write(' x=%s' % (quote_attrib(self.x), ))
        if self.externalResourcesRequired is not None:
            outfile.write(' externalResourcesRequired="%s"' % str_lower(str(self.externalResourcesRequired)))
        if self.maskUnits is not None:
            outfile.write(' maskUnits=%s' % (quote_attrib(self.maskUnits), ))
        if self.classxx is not None:
            outfile.write(' class=%s' % (quote_attrib(self.classxx), ))
    def exportChildren(self, outfile, level, namespace_='svg:', name_='maskType'):
        for element_ in self.internalElements:
            element_.export(outfile, level, namespace_, name_='desc')
    def hasContent_(self):
        if (
         len(self.internalElements)>0
            ):
            return True
        else:
            return False
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('lang'):
            self.lang = attrs.get('lang').value
        if attrs.get('systemLanguage'):
            self.systemLanguage = attrs.get('systemLanguage').value
        if attrs.get('id'):
            self.id = attrs.get('id').value
        if attrs.get('requiredExtensions'):
            self.requiredExtensions = attrs.get('requiredExtensions').value
        if attrs.get('space'):
            self.space = attrs.get('space').value
        if attrs.get('transform'):
            self.transform = attrs.get('transform').value
        if attrs.get('height'):
            self.height = attrs.get('height').value
        if attrs.get('width'):
            self.width = attrs.get('width').value
        if attrs.get('requiredFeatures'):
            self.requiredFeatures = attrs.get('requiredFeatures').value
        if attrs.get('base'):
            self.base = attrs.get('base').value
        if attrs.get('style_attr'):
            self.style_attr = attrs.get('style_attr').value
        if attrs.get('y'):
            self.y = attrs.get('y').value
        if attrs.get('x'):
            self.x = attrs.get('x').value
        if attrs.get('externalResourcesRequired'):
            if attrs.get('externalResourcesRequired').value in ('true', '1'):
                self.externalResourcesRequired = True
            elif attrs.get('externalResourcesRequired').value in ('false', '0'):
                self.externalResourcesRequired = False
            else:
                raise ValueError('Bad boolean attribute (externalResourcesRequired)')
        if attrs.get('maskUnits'):
            self.maskUnits = attrs.get('maskUnits').value
        if attrs.get('class'):
            self.classxx = attrs.get('class').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'desc':
            obj_ = descType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'title':
            obj_ = titleType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'metadata':
            obj_ = metadataType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'defs':
            obj_ = defsType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'path':
            obj_ = pathType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'text':
            obj_ = textType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_textType(obj_)    # validate type textType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'rect':
            obj_ = rectType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'circle':
            obj_ = circleType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'ellipse':
            obj_ = ellipseType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'line':
            obj_ = lineType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'polyline':
            obj_ = polylineType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'polygon':
            obj_ = polygonType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'use':
            obj_ = useType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'image':
            obj_ = imageType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'svg':
            obj_ = svgType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_svgType(obj_)    # validate type svgType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'g':
            obj_ = gType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'view':
            obj_ = viewType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_viewType(obj_)    # validate type viewType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'switch':
            obj_ = switchType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'a':
            obj_ = aType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'altGlyphDef':
            obj_ = altGlyphDefType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'script':
            obj_ = scriptType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'style':
            obj_ = styleType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'symbol':
            obj_ = symbolType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'marker':
            obj_ = markerType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_markerType(obj_)    # validate type markerType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'clipPath':
            obj_ = clipPathType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_clipPathType(obj_)    # validate type clipPathType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'mask':
            obj_ = maskType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_maskType(obj_)    # validate type maskType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'linearGradient':
            obj_ = linearGradientType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_linearGradientType(obj_)    # validate type linearGradientType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'radialGradient':
            obj_ = radialGradientType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_radialGradientType(obj_)    # validate type radialGradientType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'pattern':
            obj_ = patternType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_patternType(obj_)    # validate type patternType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'filter':
            obj_ = filterType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_filterType(obj_)    # validate type filterType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'cursor':
            obj_ = cursorType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'font':
            obj_ = fontType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animate':
            obj_ = animateType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'set':
            obj_ = setType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animateMotion':
            obj_ = animateMotionType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animateColor':
            obj_ = animateColorType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animateTransform':
            obj_ = animateTransformType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_animateTransformType(obj_)    # validate type animateTransformType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'color-profile':
            obj_ = color_profile.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'font-face':
            obj_ = font_face.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
# end class maskType


class filterType(object):
    subclass = None
    superclass = None
    def __init__(self, lang=None, style=None, filterRes=None, primitiveUnits=None, show='other', type_=None, id=None, title=None, actuate=None, space=None, height=None, width=None, href=None, role=None, arcrole=None, base=None, y=None, x=None, externalResourcesRequired=None, filterUnits=None, classxx=None):
        self.internalName = "filter"
        self.lang = lang
        self.style = style
        self.filterRes = filterRes
        self.primitiveUnits = primitiveUnits
        self.show = show
        self.type_ = type_
        self.id = id
        self.title = title
        self.actuate = actuate
        self.space = space
        self.height = height
        self.width = width
        self.href = href
        self.role = role
        self.arcrole = arcrole
        self.base = base
        self.y = y
        self.x = x
        self.externalResourcesRequired = externalResourcesRequired
        self.filterUnits = filterUnits
        self.classxx = classxx
        self.internalElements = []
    def factory(*args_, **kwargs_):
        if filterType.subclass:
            return filterType.subclass(*args_, **kwargs_)
        else:
            return filterType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def addElement(self, value): self.internalElements.append(value)
    def validate_feBlendType(self, value):
        # validate type feBlendType
        pass
    def validate_feColorMatrixType(self, value):
        # validate type feColorMatrixType
        pass
    def validate_feCompositeType(self, value):
        # validate type feCompositeType
        pass
    def validate_feConvolveMatrixType(self, value):
        # validate type feConvolveMatrixType
        pass
    def validate_feDisplacementMapType(self, value):
        # validate type feDisplacementMapType
        pass
    def validate_feMorphologyType(self, value):
        # validate type feMorphologyType
        pass
    def validate_feTurbulenceType(self, value):
        # validate type feTurbulenceType
        pass
    def get_lang(self): return self.lang
    def set_lang(self, lang): self.lang = lang
    def get_style(self): return self.style
    def set_style(self, style): self.style = style
    def get_filterRes(self): return self.filterRes
    def set_filterRes(self, filterRes): self.filterRes = filterRes
    def get_primitiveUnits(self): return self.primitiveUnits
    def set_primitiveUnits(self, primitiveUnits): self.primitiveUnits = primitiveUnits
    def get_show(self): return self.show
    def set_show(self, show): self.show = show
    def get_type(self): return self.type_
    def set_type(self, type_): self.type_ = type_
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_title(self): return self.title
    def set_title(self, title): self.title = title
    def get_actuate(self): return self.actuate
    def set_actuate(self, actuate): self.actuate = actuate
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_height(self): return self.height
    def set_height(self, height): self.height = height
    def get_width(self): return self.width
    def set_width(self, width): self.width = width
    def get_href(self): return self.href
    def set_href(self, href): self.href = href
    def get_role(self): return self.role
    def set_role(self, role): self.role = role
    def get_arcrole(self): return self.arcrole
    def set_arcrole(self, arcrole): self.arcrole = arcrole
    def get_base(self): return self.base
    def set_base(self, base): self.base = base
    def get_y(self): return self.y
    def set_y(self, y): self.y = y
    def get_x(self): return self.x
    def set_x(self, x): self.x = x
    def get_externalResourcesRequired(self): return self.externalResourcesRequired
    def set_externalResourcesRequired(self, externalResourcesRequired): self.externalResourcesRequired = externalResourcesRequired
    def get_filterUnits(self): return self.filterUnits
    def set_filterUnits(self, filterUnits): self.filterUnits = filterUnits
    def get_class(self): return self.classxx
    def set_class(self, classxx): self.classxx = classxx
    def export(self, outfile, level, namespace_='svg:', name_='filterType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, self.internalName, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='filterType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, self.internalName))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='svg:', name_='filterType'):
        if self.lang is not None:
            outfile.write(' lang=%s' % (quote_attrib(self.lang), ))
        if self.style is not None:
            outfile.write(' style=%s' % (quote_attrib(self.style), ))
        if self.filterRes is not None:
            outfile.write(' filterRes=%s' % (quote_attrib(self.filterRes), ))
        if self.primitiveUnits is not None:
            outfile.write(' primitiveUnits=%s' % (quote_attrib(self.primitiveUnits), ))
        if self.show is not None:
            outfile.write(' show=%s' % (quote_attrib(self.show), ))
        if self.type_ is not None:
            outfile.write(' type=%s' % (quote_attrib(self.type_), ))
        if self.id is not None:
            outfile.write(' id=%s' % (quote_attrib(self.id), ))
        if self.title is not None:
            outfile.write(' title=%s' % (quote_attrib(self.title), ))
        if self.actuate is not None:
            outfile.write(' actuate=%s' % (quote_attrib(self.actuate), ))
        if self.space is not None:
            outfile.write(' space=%s' % (quote_attrib(self.space), ))
        if self.height is not None:
            outfile.write(' height=%s' % (quote_attrib(self.height), ))
        if self.width is not None:
            outfile.write(' width=%s' % (quote_attrib(self.width), ))
        if self.href is not None:
            outfile.write(' href=%s' % (quote_attrib(self.href), ))
        if self.role is not None:
            outfile.write(' role=%s' % (quote_attrib(self.role), ))
        if self.arcrole is not None:
            outfile.write(' arcrole=%s' % (quote_attrib(self.arcrole), ))
        if self.base is not None:
            outfile.write(' base=%s' % (quote_attrib(self.base), ))
        if self.y is not None:
            outfile.write(' y=%s' % (quote_attrib(self.y), ))
        if self.x is not None:
            outfile.write(' x=%s' % (quote_attrib(self.x), ))
        if self.externalResourcesRequired is not None:
            outfile.write(' externalResourcesRequired="%s"' % str_lower(str(self.externalResourcesRequired)))
        if self.filterUnits is not None:
            outfile.write(' filterUnits=%s' % (quote_attrib(self.filterUnits), ))
        if self.classxx is not None:
            outfile.write(' class=%s' % (quote_attrib(self.classxx), ))
    def exportChildren(self, outfile, level, namespace_='svg:', name_='filterType'):
        for element_ in self.internalElements:
            element_.export(outfile, level, namespace_, name_='feBlend')
    def hasContent_(self):
        if (
         len(self.internalElements)>0
            ):
            return True
        else:
            return False
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('lang'):
            self.lang = attrs.get('lang').value
        if attrs.get('style'):
            self.style = attrs.get('style').value
        if attrs.get('filterRes'):
            self.filterRes = attrs.get('filterRes').value
        if attrs.get('primitiveUnits'):
            self.primitiveUnits = attrs.get('primitiveUnits').value
        if attrs.get('show'):
            self.show = attrs.get('show').value
        if attrs.get('type'):
            self.type_ = attrs.get('type').value
        if attrs.get('id'):
            self.id = attrs.get('id').value
        if attrs.get('title'):
            self.title = attrs.get('title').value
        if attrs.get('actuate'):
            self.actuate = attrs.get('actuate').value
        if attrs.get('space'):
            self.space = attrs.get('space').value
        if attrs.get('height'):
            self.height = attrs.get('height').value
        if attrs.get('width'):
            self.width = attrs.get('width').value
        if attrs.get('href'):
            self.href = attrs.get('href').value
        if attrs.get('role'):
            self.role = attrs.get('role').value
        if attrs.get('arcrole'):
            self.arcrole = attrs.get('arcrole').value
        if attrs.get('base'):
            self.base = attrs.get('base').value
        if attrs.get('y'):
            self.y = attrs.get('y').value
        if attrs.get('x'):
            self.x = attrs.get('x').value
        if attrs.get('externalResourcesRequired'):
            if attrs.get('externalResourcesRequired').value in ('true', '1'):
                self.externalResourcesRequired = True
            elif attrs.get('externalResourcesRequired').value in ('false', '0'):
                self.externalResourcesRequired = False
            else:
                raise ValueError('Bad boolean attribute (externalResourcesRequired)')
        if attrs.get('filterUnits'):
            self.filterUnits = attrs.get('filterUnits').value
        if attrs.get('class'):
            self.classxx = attrs.get('class').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'feBlend':
            obj_ = feBlendType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_feBlendType(obj_)    # validate type feBlendType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'feFlood':
            obj_ = feFloodType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'feColorMatrix':
            obj_ = feColorMatrixType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_feColorMatrixType(obj_)    # validate type feColorMatrixType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'feComponentTransfer':
            obj_ = feComponentTransferType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'feComposite':
            obj_ = feCompositeType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_feCompositeType(obj_)    # validate type feCompositeType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'feConvolveMatrix':
            obj_ = feConvolveMatrixType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_feConvolveMatrixType(obj_)    # validate type feConvolveMatrixType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'feDiffuseLighting':
            obj_ = feDiffuseLightingType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'feDisplacementMap':
            obj_ = feDisplacementMapType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_feDisplacementMapType(obj_)    # validate type feDisplacementMapType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'feGaussianBlur':
            obj_ = feGaussianBlurType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'feImage':
            obj_ = feImageType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'feMerge':
            obj_ = feMergeType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'feMorphology':
            obj_ = feMorphologyType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_feMorphologyType(obj_)    # validate type feMorphologyType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'feOffset':
            obj_ = feOffsetType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'feSpecularLighting':
            obj_ = feSpecularLightingType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'feTile':
            obj_ = feTileType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'feTurbulence':
            obj_ = feTurbulenceType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_feTurbulenceType(obj_)    # validate type feTurbulenceType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animate':
            obj_ = animateType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'set':
            obj_ = setType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
# end class filterType


class feDistantLightType(object):
    subclass = None
    superclass = None
    def __init__(self, base=None, elevation=None, id=None, azimuth=None):
        self.internalName = "feDistantLight"
        self.base = base
        self.elevation = elevation
        self.id = id
        self.azimuth = azimuth
        self.internalElements = []
    def factory(*args_, **kwargs_):
        if feDistantLightType.subclass:
            return feDistantLightType.subclass(*args_, **kwargs_)
        else:
            return feDistantLightType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def addElement(self, value): self.internalElements.append(value)
    def get_base(self): return self.base
    def set_base(self, base): self.base = base
    def get_elevation(self): return self.elevation
    def set_elevation(self, elevation): self.elevation = elevation
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_azimuth(self): return self.azimuth
    def set_azimuth(self, azimuth): self.azimuth = azimuth
    def export(self, outfile, level, namespace_='svg:', name_='feDistantLightType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, self.internalName, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='feDistantLightType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, self.internalName))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='svg:', name_='feDistantLightType'):
        if self.base is not None:
            outfile.write(' base=%s' % (quote_attrib(self.base), ))
        if self.elevation is not None:
            outfile.write(' elevation="%e"' % self.elevation)
        if self.id is not None:
            outfile.write(' id=%s' % (quote_attrib(self.id), ))
        if self.azimuth is not None:
            outfile.write(' azimuth="%e"' % self.azimuth)
    def exportChildren(self, outfile, level, namespace_='svg:', name_='feDistantLightType'):
        for element_ in self.internalElements:
            element_.export(outfile, level, namespace_, name_='animate')
    def hasContent_(self):
        if (
         len(self.internalElements)>0
            ):
            return True
        else:
            return False
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('base'):
            self.base = attrs.get('base').value
        if attrs.get('elevation'):
            try:
                self.elevation = float(attrs.get('elevation').value)
            except ValueError, exp:
                raise ValueError('Bad float/double attribute (elevation): %s' % exp)
        if attrs.get('id'):
            self.id = attrs.get('id').value
        if attrs.get('azimuth'):
            try:
                self.azimuth = float(attrs.get('azimuth').value)
            except ValueError, exp:
                raise ValueError('Bad float/double attribute (azimuth): %s' % exp)
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animate':
            obj_ = animateType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'set':
            obj_ = setType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
# end class feDistantLightType


class fePointLightType(object):
    subclass = None
    superclass = None
    def __init__(self, y=None, x=None, z=None, id=None, base=None):
        self.internalName = "fePointLight"
        self.y = y
        self.x = x
        self.z = z
        self.id = id
        self.base = base
        self.internalElements = []
    def factory(*args_, **kwargs_):
        if fePointLightType.subclass:
            return fePointLightType.subclass(*args_, **kwargs_)
        else:
            return fePointLightType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def addElement(self, value): self.internalElements.append(value)
    def get_y(self): return self.y
    def set_y(self, y): self.y = y
    def get_x(self): return self.x
    def set_x(self, x): self.x = x
    def get_z(self): return self.z
    def set_z(self, z): self.z = z
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_base(self): return self.base
    def set_base(self, base): self.base = base
    def export(self, outfile, level, namespace_='svg:', name_='fePointLightType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, self.internalName, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='fePointLightType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, self.internalName))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='svg:', name_='fePointLightType'):
        if self.y is not None:
            outfile.write(' y="%e"' % self.y)
        if self.x is not None:
            outfile.write(' x="%e"' % self.x)
        if self.z is not None:
            outfile.write(' z="%e"' % self.z)
        if self.id is not None:
            outfile.write(' id=%s' % (quote_attrib(self.id), ))
        if self.base is not None:
            outfile.write(' base=%s' % (quote_attrib(self.base), ))
    def exportChildren(self, outfile, level, namespace_='svg:', name_='fePointLightType'):
        for element_ in self.internalElements:
            element_.export(outfile, level, namespace_, name_='animate')
    def hasContent_(self):
        if (
         len(self.internalElements)>0
            ):
            return True
        else:
            return False
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('y'):
            try:
                self.y = float(attrs.get('y').value)
            except ValueError, exp:
                raise ValueError('Bad float/double attribute (y): %s' % exp)
        if attrs.get('x'):
            try:
                self.x = float(attrs.get('x').value)
            except ValueError, exp:
                raise ValueError('Bad float/double attribute (x): %s' % exp)
        if attrs.get('z'):
            try:
                self.z = float(attrs.get('z').value)
            except ValueError, exp:
                raise ValueError('Bad float/double attribute (z): %s' % exp)
        if attrs.get('id'):
            self.id = attrs.get('id').value
        if attrs.get('base'):
            self.base = attrs.get('base').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animate':
            obj_ = animateType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'set':
            obj_ = setType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
# end class fePointLightType


class feSpotLightType(object):
    subclass = None
    superclass = None
    def __init__(self, pointsAtX=None, limitingConeAngle=None, base=None, specularExponent=None, pointsAtZ=None, y=None, x=None, pointsAtY=None, z=None, id=None):
        self.internalName = "feSpotLight"
        self.pointsAtX = pointsAtX
        self.limitingConeAngle = limitingConeAngle
        self.base = base
        self.specularExponent = specularExponent
        self.pointsAtZ = pointsAtZ
        self.y = y
        self.x = x
        self.pointsAtY = pointsAtY
        self.z = z
        self.id = id
        self.internalElements = []
    def factory(*args_, **kwargs_):
        if feSpotLightType.subclass:
            return feSpotLightType.subclass(*args_, **kwargs_)
        else:
            return feSpotLightType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def addElement(self, value): self.internalElements.append(value)
    def get_pointsAtX(self): return self.pointsAtX
    def set_pointsAtX(self, pointsAtX): self.pointsAtX = pointsAtX
    def get_limitingConeAngle(self): return self.limitingConeAngle
    def set_limitingConeAngle(self, limitingConeAngle): self.limitingConeAngle = limitingConeAngle
    def get_base(self): return self.base
    def set_base(self, base): self.base = base
    def get_specularExponent(self): return self.specularExponent
    def set_specularExponent(self, specularExponent): self.specularExponent = specularExponent
    def get_pointsAtZ(self): return self.pointsAtZ
    def set_pointsAtZ(self, pointsAtZ): self.pointsAtZ = pointsAtZ
    def get_y(self): return self.y
    def set_y(self, y): self.y = y
    def get_x(self): return self.x
    def set_x(self, x): self.x = x
    def get_pointsAtY(self): return self.pointsAtY
    def set_pointsAtY(self, pointsAtY): self.pointsAtY = pointsAtY
    def get_z(self): return self.z
    def set_z(self, z): self.z = z
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='svg:', name_='feSpotLightType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, self.internalName, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='feSpotLightType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, self.internalName))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='svg:', name_='feSpotLightType'):
        if self.pointsAtX is not None:
            outfile.write(' pointsAtX="%e"' % self.pointsAtX)
        if self.limitingConeAngle is not None:
            outfile.write(' limitingConeAngle="%e"' % self.limitingConeAngle)
        if self.base is not None:
            outfile.write(' base=%s' % (quote_attrib(self.base), ))
        if self.specularExponent is not None:
            outfile.write(' specularExponent="%e"' % self.specularExponent)
        if self.pointsAtZ is not None:
            outfile.write(' pointsAtZ="%e"' % self.pointsAtZ)
        if self.y is not None:
            outfile.write(' y="%e"' % self.y)
        if self.x is not None:
            outfile.write(' x="%e"' % self.x)
        if self.pointsAtY is not None:
            outfile.write(' pointsAtY="%e"' % self.pointsAtY)
        if self.z is not None:
            outfile.write(' z="%e"' % self.z)
        if self.id is not None:
            outfile.write(' id=%s' % (quote_attrib(self.id), ))
    def exportChildren(self, outfile, level, namespace_='svg:', name_='feSpotLightType'):
        for element_ in self.internalElements:
            element_.export(outfile, level, namespace_, name_='animate')
    def hasContent_(self):
        if (
         len(self.internalElements)>0
            ):
            return True
        else:
            return False
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('pointsAtX'):
            try:
                self.pointsAtX = float(attrs.get('pointsAtX').value)
            except ValueError, exp:
                raise ValueError('Bad float/double attribute (pointsAtX): %s' % exp)
        if attrs.get('limitingConeAngle'):
            try:
                self.limitingConeAngle = float(attrs.get('limitingConeAngle').value)
            except ValueError, exp:
                raise ValueError('Bad float/double attribute (limitingConeAngle): %s' % exp)
        if attrs.get('base'):
            self.base = attrs.get('base').value
        if attrs.get('specularExponent'):
            try:
                self.specularExponent = float(attrs.get('specularExponent').value)
            except ValueError, exp:
                raise ValueError('Bad float/double attribute (specularExponent): %s' % exp)
        if attrs.get('pointsAtZ'):
            try:
                self.pointsAtZ = float(attrs.get('pointsAtZ').value)
            except ValueError, exp:
                raise ValueError('Bad float/double attribute (pointsAtZ): %s' % exp)
        if attrs.get('y'):
            try:
                self.y = float(attrs.get('y').value)
            except ValueError, exp:
                raise ValueError('Bad float/double attribute (y): %s' % exp)
        if attrs.get('x'):
            try:
                self.x = float(attrs.get('x').value)
            except ValueError, exp:
                raise ValueError('Bad float/double attribute (x): %s' % exp)
        if attrs.get('pointsAtY'):
            try:
                self.pointsAtY = float(attrs.get('pointsAtY').value)
            except ValueError, exp:
                raise ValueError('Bad float/double attribute (pointsAtY): %s' % exp)
        if attrs.get('z'):
            try:
                self.z = float(attrs.get('z').value)
            except ValueError, exp:
                raise ValueError('Bad float/double attribute (z): %s' % exp)
        if attrs.get('id'):
            self.id = attrs.get('id').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animate':
            obj_ = animateType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'set':
            obj_ = setType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
# end class feSpotLightType


class feBlendType(object):
    subclass = None
    superclass = None
    def __init__(self, base=None, mode='normal', in2=None, id=None):
        self.internalName = "feBlend"
        self.base = base
        self.mode = mode
        self.in2 = in2
        self.id = id
        self.internalElements = []
    def factory(*args_, **kwargs_):
        if feBlendType.subclass:
            return feBlendType.subclass(*args_, **kwargs_)
        else:
            return feBlendType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def addElement(self, value): self.internalElements.append(value)
    def get_base(self): return self.base
    def set_base(self, base): self.base = base
    def get_mode(self): return self.mode
    def set_mode(self, mode): self.mode = mode
    def get_in2(self): return self.in2
    def set_in2(self, in2): self.in2 = in2
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='svg:', name_='feBlendType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, self.internalName, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='feBlendType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, self.internalName))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='svg:', name_='feBlendType'):
        if self.base is not None:
            outfile.write(' base=%s' % (quote_attrib(self.base), ))
        if self.mode is not None:
            outfile.write(' mode=%s' % (quote_attrib(self.mode), ))
        outfile.write(' in2=%s' % (quote_attrib(self.in2), ))
        if self.id is not None:
            outfile.write(' id=%s' % (quote_attrib(self.id), ))
    def exportChildren(self, outfile, level, namespace_='svg:', name_='feBlendType'):
        for element_ in self.internalElements:
            element_.export(outfile, level, namespace_, name_='animate')
    def hasContent_(self):
        if (
         len(self.internalElements)>0
            ):
            return True
        else:
            return False
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('base'):
            self.base = attrs.get('base').value
        if attrs.get('mode'):
            self.mode = attrs.get('mode').value
        if attrs.get('in2'):
            self.in2 = attrs.get('in2').value
        if attrs.get('id'):
            self.id = attrs.get('id').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animate':
            obj_ = animateType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'set':
            obj_ = setType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
# end class feBlendType


class feColorMatrixType(object):
    subclass = None
    superclass = None
    def __init__(self, values=None, base=None, type_='matrix', id=None):
        self.internalName = "feColorMatrix"
        self.values = values
        self.base = base
        self.type_ = type_
        self.id = id
        self.internalElements = []
    def factory(*args_, **kwargs_):
        if feColorMatrixType.subclass:
            return feColorMatrixType.subclass(*args_, **kwargs_)
        else:
            return feColorMatrixType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def addElement(self, value): self.internalElements.append(value)
    def get_values(self): return self.values
    def set_values(self, values): self.values = values
    def get_base(self): return self.base
    def set_base(self, base): self.base = base
    def get_type(self): return self.type_
    def set_type(self, type_): self.type_ = type_
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='svg:', name_='feColorMatrixType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, self.internalName, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='feColorMatrixType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, self.internalName))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='svg:', name_='feColorMatrixType'):
        if self.values is not None:
            outfile.write(' values=%s' % (quote_attrib(self.values), ))
        if self.base is not None:
            outfile.write(' base=%s' % (quote_attrib(self.base), ))
        if self.type_ is not None:
            outfile.write(' type=%s' % (quote_attrib(self.type_), ))
        if self.id is not None:
            outfile.write(' id=%s' % (quote_attrib(self.id), ))
    def exportChildren(self, outfile, level, namespace_='svg:', name_='feColorMatrixType'):
        for element_ in self.internalElements:
            element_.export(outfile, level, namespace_, name_='animate')
    def hasContent_(self):
        if (
         len(self.internalElements)>0
            ):
            return True
        else:
            return False
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('values'):
            self.values = attrs.get('values').value
        if attrs.get('base'):
            self.base = attrs.get('base').value
        if attrs.get('type'):
            self.type_ = attrs.get('type').value
        if attrs.get('id'):
            self.id = attrs.get('id').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animate':
            obj_ = animateType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'set':
            obj_ = setType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
# end class feColorMatrixType


class feComponentTransferType(object):
    subclass = None
    superclass = None
    def __init__(self, base=None, id=None, feFuncR=None, feFuncG=None, feFuncB=None, feFuncA=None):
        self.internalName = "feComponentTransfer"
        self.base = base
        self.id = id
        self.feFuncR = feFuncR
        self.feFuncG = feFuncG
        self.feFuncB = feFuncB
        self.feFuncA = feFuncA
    def factory(*args_, **kwargs_):
        if feComponentTransferType.subclass:
            return feComponentTransferType.subclass(*args_, **kwargs_)
        else:
            return feComponentTransferType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_feFuncR(self): return self.feFuncR
    def set_feFuncR(self, feFuncR): self.feFuncR = feFuncR
    def validate_feFuncRType(self, value):
        # validate type feFuncRType
        pass
    def get_feFuncG(self): return self.feFuncG
    def set_feFuncG(self, feFuncG): self.feFuncG = feFuncG
    def validate_feFuncGType(self, value):
        # validate type feFuncGType
        pass
    def get_feFuncB(self): return self.feFuncB
    def set_feFuncB(self, feFuncB): self.feFuncB = feFuncB
    def validate_feFuncBType(self, value):
        # validate type feFuncBType
        pass
    def get_feFuncA(self): return self.feFuncA
    def set_feFuncA(self, feFuncA): self.feFuncA = feFuncA
    def validate_feFuncAType(self, value):
        # validate type feFuncAType
        pass
    def get_base(self): return self.base
    def set_base(self, base): self.base = base
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='svg:', name_='feComponentTransferType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, self.internalName, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='feComponentTransferType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, self.internalName))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='svg:', name_='feComponentTransferType'):
        if self.base is not None:
            outfile.write(' base=%s' % (quote_attrib(self.base), ))
        if self.id is not None:
            outfile.write(' id=%s' % (quote_attrib(self.id), ))
    def exportChildren(self, outfile, level, namespace_='svg:', name_='feComponentTransferType'):
        if self.feFuncR:
            self.feFuncR.export(outfile, level, namespace_, name_='feFuncR')
        if self.feFuncG:
            self.feFuncG.export(outfile, level, namespace_, name_='feFuncG')
        if self.feFuncB:
            self.feFuncB.export(outfile, level, namespace_, name_='feFuncB')
        if self.feFuncA:
            self.feFuncA.export(outfile, level, namespace_, name_='feFuncA')
    def hasContent_(self):
        if (
            self.feFuncR or
            self.feFuncG or
            self.feFuncB or
            self.feFuncA
            ):
            return True
        else:
            return False
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('base'):
            self.base = attrs.get('base').value
        if attrs.get('id'):
            self.id = attrs.get('id').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'feFuncR':
            obj_ = feFuncRType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            self.set_feFuncR(obj_)
            self.validate_feFuncRType(obj_)    # validate type feFuncRType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'feFuncG':
            obj_ = feFuncGType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            self.set_feFuncG(obj_)
            self.validate_feFuncGType(obj_)    # validate type feFuncGType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'feFuncB':
            obj_ = feFuncBType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            self.set_feFuncB(obj_)
            self.validate_feFuncBType(obj_)    # validate type feFuncBType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'feFuncA':
            obj_ = feFuncAType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            self.set_feFuncA(obj_)
            self.validate_feFuncAType(obj_)    # validate type feFuncAType
# end class feComponentTransferType


class feFuncRType(object):
    subclass = None
    superclass = None
    def __init__(self, slope=None, tableValues=None, intercept=None, base=None, amplitude=None, offset=None, type_=None, id=None, exponent=None):
        self.internalName = "feFuncR"
        self.slope = slope
        self.tableValues = tableValues
        self.intercept = intercept
        self.base = base
        self.amplitude = amplitude
        self.offset = offset
        self.type_ = type_
        self.id = id
        self.exponent = exponent
        self.internalElements = []
    def factory(*args_, **kwargs_):
        if feFuncRType.subclass:
            return feFuncRType.subclass(*args_, **kwargs_)
        else:
            return feFuncRType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def addElement(self, value): self.internalElements.append(value)
    def get_slope(self): return self.slope
    def set_slope(self, slope): self.slope = slope
    def get_tableValues(self): return self.tableValues
    def set_tableValues(self, tableValues): self.tableValues = tableValues
    def get_intercept(self): return self.intercept
    def set_intercept(self, intercept): self.intercept = intercept
    def get_base(self): return self.base
    def set_base(self, base): self.base = base
    def get_amplitude(self): return self.amplitude
    def set_amplitude(self, amplitude): self.amplitude = amplitude
    def get_offset(self): return self.offset
    def set_offset(self, offset): self.offset = offset
    def get_type(self): return self.type_
    def set_type(self, type_): self.type_ = type_
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_exponent(self): return self.exponent
    def set_exponent(self, exponent): self.exponent = exponent
    def export(self, outfile, level, namespace_='svg:', name_='feFuncRType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, self.internalName, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='feFuncRType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, self.internalName))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='svg:', name_='feFuncRType'):
        if self.slope is not None:
            outfile.write(' slope="%e"' % self.slope)
        if self.tableValues is not None:
            outfile.write(' tableValues=%s' % (quote_attrib(self.tableValues), ))
        if self.intercept is not None:
            outfile.write(' intercept="%e"' % self.intercept)
        if self.base is not None:
            outfile.write(' base=%s' % (quote_attrib(self.base), ))
        if self.amplitude is not None:
            outfile.write(' amplitude="%e"' % self.amplitude)
        if self.offset is not None:
            outfile.write(' offset="%e"' % self.offset)
        outfile.write(' type=%s' % (quote_attrib(self.type_), ))
        if self.id is not None:
            outfile.write(' id=%s' % (quote_attrib(self.id), ))
        if self.exponent is not None:
            outfile.write(' exponent="%e"' % self.exponent)
    def exportChildren(self, outfile, level, namespace_='svg:', name_='feFuncRType'):
        for element_ in self.internalElements:
            element_.export(outfile, level, namespace_, name_='animate')
    def hasContent_(self):
        if (
         len(self.internalElements)>0
            ):
            return True
        else:
            return False
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('slope'):
            try:
                self.slope = float(attrs.get('slope').value)
            except ValueError, exp:
                raise ValueError('Bad float/double attribute (slope): %s' % exp)
        if attrs.get('tableValues'):
            self.tableValues = attrs.get('tableValues').value
        if attrs.get('intercept'):
            try:
                self.intercept = float(attrs.get('intercept').value)
            except ValueError, exp:
                raise ValueError('Bad float/double attribute (intercept): %s' % exp)
        if attrs.get('base'):
            self.base = attrs.get('base').value
        if attrs.get('amplitude'):
            try:
                self.amplitude = float(attrs.get('amplitude').value)
            except ValueError, exp:
                raise ValueError('Bad float/double attribute (amplitude): %s' % exp)
        if attrs.get('offset'):
            try:
                self.offset = float(attrs.get('offset').value)
            except ValueError, exp:
                raise ValueError('Bad float/double attribute (offset): %s' % exp)
        if attrs.get('type'):
            self.type_ = attrs.get('type').value
        if attrs.get('id'):
            self.id = attrs.get('id').value
        if attrs.get('exponent'):
            try:
                self.exponent = float(attrs.get('exponent').value)
            except ValueError, exp:
                raise ValueError('Bad float/double attribute (exponent): %s' % exp)
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animate':
            obj_ = animateType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'set':
            obj_ = setType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
# end class feFuncRType


class feFuncGType(object):
    subclass = None
    superclass = None
    def __init__(self, slope=None, tableValues=None, intercept=None, base=None, amplitude=None, offset=None, type_=None, id=None, exponent=None):
        self.internalName = "feFuncG"
        self.slope = slope
        self.tableValues = tableValues
        self.intercept = intercept
        self.base = base
        self.amplitude = amplitude
        self.offset = offset
        self.type_ = type_
        self.id = id
        self.exponent = exponent
        self.internalElements = []
    def factory(*args_, **kwargs_):
        if feFuncGType.subclass:
            return feFuncGType.subclass(*args_, **kwargs_)
        else:
            return feFuncGType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def addElement(self, value): self.internalElements.append(value)
    def get_slope(self): return self.slope
    def set_slope(self, slope): self.slope = slope
    def get_tableValues(self): return self.tableValues
    def set_tableValues(self, tableValues): self.tableValues = tableValues
    def get_intercept(self): return self.intercept
    def set_intercept(self, intercept): self.intercept = intercept
    def get_base(self): return self.base
    def set_base(self, base): self.base = base
    def get_amplitude(self): return self.amplitude
    def set_amplitude(self, amplitude): self.amplitude = amplitude
    def get_offset(self): return self.offset
    def set_offset(self, offset): self.offset = offset
    def get_type(self): return self.type_
    def set_type(self, type_): self.type_ = type_
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_exponent(self): return self.exponent
    def set_exponent(self, exponent): self.exponent = exponent
    def export(self, outfile, level, namespace_='svg:', name_='feFuncGType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, self.internalName, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='feFuncGType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, self.internalName))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='svg:', name_='feFuncGType'):
        if self.slope is not None:
            outfile.write(' slope="%e"' % self.slope)
        if self.tableValues is not None:
            outfile.write(' tableValues=%s' % (quote_attrib(self.tableValues), ))
        if self.intercept is not None:
            outfile.write(' intercept="%e"' % self.intercept)
        if self.base is not None:
            outfile.write(' base=%s' % (quote_attrib(self.base), ))
        if self.amplitude is not None:
            outfile.write(' amplitude="%e"' % self.amplitude)
        if self.offset is not None:
            outfile.write(' offset="%e"' % self.offset)
        outfile.write(' type=%s' % (quote_attrib(self.type_), ))
        if self.id is not None:
            outfile.write(' id=%s' % (quote_attrib(self.id), ))
        if self.exponent is not None:
            outfile.write(' exponent="%e"' % self.exponent)
    def exportChildren(self, outfile, level, namespace_='svg:', name_='feFuncGType'):
        for element_ in self.internalElements:
            element_.export(outfile, level, namespace_, name_='animate')
    def hasContent_(self):
        if (
         len(self.internalElements)>0
            ):
            return True
        else:
            return False
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('slope'):
            try:
                self.slope = float(attrs.get('slope').value)
            except ValueError, exp:
                raise ValueError('Bad float/double attribute (slope): %s' % exp)
        if attrs.get('tableValues'):
            self.tableValues = attrs.get('tableValues').value
        if attrs.get('intercept'):
            try:
                self.intercept = float(attrs.get('intercept').value)
            except ValueError, exp:
                raise ValueError('Bad float/double attribute (intercept): %s' % exp)
        if attrs.get('base'):
            self.base = attrs.get('base').value
        if attrs.get('amplitude'):
            try:
                self.amplitude = float(attrs.get('amplitude').value)
            except ValueError, exp:
                raise ValueError('Bad float/double attribute (amplitude): %s' % exp)
        if attrs.get('offset'):
            try:
                self.offset = float(attrs.get('offset').value)
            except ValueError, exp:
                raise ValueError('Bad float/double attribute (offset): %s' % exp)
        if attrs.get('type'):
            self.type_ = attrs.get('type').value
        if attrs.get('id'):
            self.id = attrs.get('id').value
        if attrs.get('exponent'):
            try:
                self.exponent = float(attrs.get('exponent').value)
            except ValueError, exp:
                raise ValueError('Bad float/double attribute (exponent): %s' % exp)
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animate':
            obj_ = animateType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'set':
            obj_ = setType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
# end class feFuncGType


class feFuncBType(object):
    subclass = None
    superclass = None
    def __init__(self, slope=None, tableValues=None, intercept=None, base=None, amplitude=None, offset=None, type_=None, id=None, exponent=None):
        self.internalName = "feFuncB"
        self.slope = slope
        self.tableValues = tableValues
        self.intercept = intercept
        self.base = base
        self.amplitude = amplitude
        self.offset = offset
        self.type_ = type_
        self.id = id
        self.exponent = exponent
        self.internalElements = []
    def factory(*args_, **kwargs_):
        if feFuncBType.subclass:
            return feFuncBType.subclass(*args_, **kwargs_)
        else:
            return feFuncBType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def addElement(self, value): self.internalElements.append(value)
    def get_slope(self): return self.slope
    def set_slope(self, slope): self.slope = slope
    def get_tableValues(self): return self.tableValues
    def set_tableValues(self, tableValues): self.tableValues = tableValues
    def get_intercept(self): return self.intercept
    def set_intercept(self, intercept): self.intercept = intercept
    def get_base(self): return self.base
    def set_base(self, base): self.base = base
    def get_amplitude(self): return self.amplitude
    def set_amplitude(self, amplitude): self.amplitude = amplitude
    def get_offset(self): return self.offset
    def set_offset(self, offset): self.offset = offset
    def get_type(self): return self.type_
    def set_type(self, type_): self.type_ = type_
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_exponent(self): return self.exponent
    def set_exponent(self, exponent): self.exponent = exponent
    def export(self, outfile, level, namespace_='svg:', name_='feFuncBType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, self.internalName, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='feFuncBType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, self.internalName))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='svg:', name_='feFuncBType'):
        if self.slope is not None:
            outfile.write(' slope="%e"' % self.slope)
        if self.tableValues is not None:
            outfile.write(' tableValues=%s' % (quote_attrib(self.tableValues), ))
        if self.intercept is not None:
            outfile.write(' intercept="%e"' % self.intercept)
        if self.base is not None:
            outfile.write(' base=%s' % (quote_attrib(self.base), ))
        if self.amplitude is not None:
            outfile.write(' amplitude="%e"' % self.amplitude)
        if self.offset is not None:
            outfile.write(' offset="%e"' % self.offset)
        outfile.write(' type=%s' % (quote_attrib(self.type_), ))
        if self.id is not None:
            outfile.write(' id=%s' % (quote_attrib(self.id), ))
        if self.exponent is not None:
            outfile.write(' exponent="%e"' % self.exponent)
    def exportChildren(self, outfile, level, namespace_='svg:', name_='feFuncBType'):
        for element_ in self.internalElements:
            element_.export(outfile, level, namespace_, name_='animate')
    def hasContent_(self):
        if (
         len(self.internalElements)>0
            ):
            return True
        else:
            return False
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('slope'):
            try:
                self.slope = float(attrs.get('slope').value)
            except ValueError, exp:
                raise ValueError('Bad float/double attribute (slope): %s' % exp)
        if attrs.get('tableValues'):
            self.tableValues = attrs.get('tableValues').value
        if attrs.get('intercept'):
            try:
                self.intercept = float(attrs.get('intercept').value)
            except ValueError, exp:
                raise ValueError('Bad float/double attribute (intercept): %s' % exp)
        if attrs.get('base'):
            self.base = attrs.get('base').value
        if attrs.get('amplitude'):
            try:
                self.amplitude = float(attrs.get('amplitude').value)
            except ValueError, exp:
                raise ValueError('Bad float/double attribute (amplitude): %s' % exp)
        if attrs.get('offset'):
            try:
                self.offset = float(attrs.get('offset').value)
            except ValueError, exp:
                raise ValueError('Bad float/double attribute (offset): %s' % exp)
        if attrs.get('type'):
            self.type_ = attrs.get('type').value
        if attrs.get('id'):
            self.id = attrs.get('id').value
        if attrs.get('exponent'):
            try:
                self.exponent = float(attrs.get('exponent').value)
            except ValueError, exp:
                raise ValueError('Bad float/double attribute (exponent): %s' % exp)
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animate':
            obj_ = animateType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'set':
            obj_ = setType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
# end class feFuncBType


class feFuncAType(object):
    subclass = None
    superclass = None
    def __init__(self, slope=None, tableValues=None, intercept=None, base=None, amplitude=None, offset=None, type_=None, id=None, exponent=None):
        self.internalName = "feFuncA"
        self.slope = slope
        self.tableValues = tableValues
        self.intercept = intercept
        self.base = base
        self.amplitude = amplitude
        self.offset = offset
        self.type_ = type_
        self.id = id
        self.exponent = exponent
        self.internalElements = []
    def factory(*args_, **kwargs_):
        if feFuncAType.subclass:
            return feFuncAType.subclass(*args_, **kwargs_)
        else:
            return feFuncAType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def addElement(self, value): self.internalElements.append(value)
    def get_slope(self): return self.slope
    def set_slope(self, slope): self.slope = slope
    def get_tableValues(self): return self.tableValues
    def set_tableValues(self, tableValues): self.tableValues = tableValues
    def get_intercept(self): return self.intercept
    def set_intercept(self, intercept): self.intercept = intercept
    def get_base(self): return self.base
    def set_base(self, base): self.base = base
    def get_amplitude(self): return self.amplitude
    def set_amplitude(self, amplitude): self.amplitude = amplitude
    def get_offset(self): return self.offset
    def set_offset(self, offset): self.offset = offset
    def get_type(self): return self.type_
    def set_type(self, type_): self.type_ = type_
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_exponent(self): return self.exponent
    def set_exponent(self, exponent): self.exponent = exponent
    def export(self, outfile, level, namespace_='svg:', name_='feFuncAType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, self.internalName, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='feFuncAType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, self.internalName))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='svg:', name_='feFuncAType'):
        if self.slope is not None:
            outfile.write(' slope="%e"' % self.slope)
        if self.tableValues is not None:
            outfile.write(' tableValues=%s' % (quote_attrib(self.tableValues), ))
        if self.intercept is not None:
            outfile.write(' intercept="%e"' % self.intercept)
        if self.base is not None:
            outfile.write(' base=%s' % (quote_attrib(self.base), ))
        if self.amplitude is not None:
            outfile.write(' amplitude="%e"' % self.amplitude)
        if self.offset is not None:
            outfile.write(' offset="%e"' % self.offset)
        outfile.write(' type=%s' % (quote_attrib(self.type_), ))
        if self.id is not None:
            outfile.write(' id=%s' % (quote_attrib(self.id), ))
        if self.exponent is not None:
            outfile.write(' exponent="%e"' % self.exponent)
    def exportChildren(self, outfile, level, namespace_='svg:', name_='feFuncAType'):
        for element_ in self.internalElements:
            element_.export(outfile, level, namespace_, name_='animate')
    def hasContent_(self):
        if (
         len(self.internalElements)>0
            ):
            return True
        else:
            return False
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('slope'):
            try:
                self.slope = float(attrs.get('slope').value)
            except ValueError, exp:
                raise ValueError('Bad float/double attribute (slope): %s' % exp)
        if attrs.get('tableValues'):
            self.tableValues = attrs.get('tableValues').value
        if attrs.get('intercept'):
            try:
                self.intercept = float(attrs.get('intercept').value)
            except ValueError, exp:
                raise ValueError('Bad float/double attribute (intercept): %s' % exp)
        if attrs.get('base'):
            self.base = attrs.get('base').value
        if attrs.get('amplitude'):
            try:
                self.amplitude = float(attrs.get('amplitude').value)
            except ValueError, exp:
                raise ValueError('Bad float/double attribute (amplitude): %s' % exp)
        if attrs.get('offset'):
            try:
                self.offset = float(attrs.get('offset').value)
            except ValueError, exp:
                raise ValueError('Bad float/double attribute (offset): %s' % exp)
        if attrs.get('type'):
            self.type_ = attrs.get('type').value
        if attrs.get('id'):
            self.id = attrs.get('id').value
        if attrs.get('exponent'):
            try:
                self.exponent = float(attrs.get('exponent').value)
            except ValueError, exp:
                raise ValueError('Bad float/double attribute (exponent): %s' % exp)
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animate':
            obj_ = animateType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'set':
            obj_ = setType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
# end class feFuncAType


class feCompositeType(object):
    subclass = None
    superclass = None
    def __init__(self, in2=None, k3=None, k2=None, k1=None, base=None, k4=None, operator='over', id=None):
        self.internalName = "feComposite"
        self.in2 = in2
        self.k3 = k3
        self.k2 = k2
        self.k1 = k1
        self.base = base
        self.k4 = k4
        self.operator = operator
        self.id = id
        self.internalElements = []
    def factory(*args_, **kwargs_):
        if feCompositeType.subclass:
            return feCompositeType.subclass(*args_, **kwargs_)
        else:
            return feCompositeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def addElement(self, value): self.internalElements.append(value)
    def get_in2(self): return self.in2
    def set_in2(self, in2): self.in2 = in2
    def get_k3(self): return self.k3
    def set_k3(self, k3): self.k3 = k3
    def get_k2(self): return self.k2
    def set_k2(self, k2): self.k2 = k2
    def get_k1(self): return self.k1
    def set_k1(self, k1): self.k1 = k1
    def get_base(self): return self.base
    def set_base(self, base): self.base = base
    def get_k4(self): return self.k4
    def set_k4(self, k4): self.k4 = k4
    def get_operator(self): return self.operator
    def set_operator(self, operator): self.operator = operator
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='svg:', name_='feCompositeType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, self.internalName, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='feCompositeType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, self.internalName))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='svg:', name_='feCompositeType'):
        outfile.write(' in2=%s' % (quote_attrib(self.in2), ))
        if self.k3 is not None:
            outfile.write(' k3="%e"' % self.k3)
        if self.k2 is not None:
            outfile.write(' k2="%e"' % self.k2)
        if self.k1 is not None:
            outfile.write(' k1="%e"' % self.k1)
        if self.base is not None:
            outfile.write(' base=%s' % (quote_attrib(self.base), ))
        if self.k4 is not None:
            outfile.write(' k4="%e"' % self.k4)
        if self.operator is not None:
            outfile.write(' operator=%s' % (quote_attrib(self.operator), ))
        if self.id is not None:
            outfile.write(' id=%s' % (quote_attrib(self.id), ))
    def exportChildren(self, outfile, level, namespace_='svg:', name_='feCompositeType'):
        for element_ in self.internalElements:
            element_.export(outfile, level, namespace_, name_='animate')
    def hasContent_(self):
        if (
         len(self.internalElements)>0
            ):
            return True
        else:
            return False
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('in2'):
            self.in2 = attrs.get('in2').value
        if attrs.get('k3'):
            try:
                self.k3 = float(attrs.get('k3').value)
            except ValueError, exp:
                raise ValueError('Bad float/double attribute (k3): %s' % exp)
        if attrs.get('k2'):
            try:
                self.k2 = float(attrs.get('k2').value)
            except ValueError, exp:
                raise ValueError('Bad float/double attribute (k2): %s' % exp)
        if attrs.get('k1'):
            try:
                self.k1 = float(attrs.get('k1').value)
            except ValueError, exp:
                raise ValueError('Bad float/double attribute (k1): %s' % exp)
        if attrs.get('base'):
            self.base = attrs.get('base').value
        if attrs.get('k4'):
            try:
                self.k4 = float(attrs.get('k4').value)
            except ValueError, exp:
                raise ValueError('Bad float/double attribute (k4): %s' % exp)
        if attrs.get('operator'):
            self.operator = attrs.get('operator').value
        if attrs.get('id'):
            self.id = attrs.get('id').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animate':
            obj_ = animateType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'set':
            obj_ = setType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
# end class feCompositeType


class feConvolveMatrixType(object):
    subclass = None
    superclass = None
    def __init__(self, divisor=None, kernelMatrix=None, kernelUnitLength=None, edgeMode='duplicate', bias=None, targetX=None, targetY=None, preserveAlpha=None, order=None):
        self.internalName = "feConvolveMatrix"
        self.divisor = divisor
        self.kernelMatrix = kernelMatrix
        self.kernelUnitLength = kernelUnitLength
        self.edgeMode = edgeMode
        self.bias = bias
        self.targetX = targetX
        self.targetY = targetY
        self.preserveAlpha = preserveAlpha
        self.order = order
        self.internalElements = []
    def factory(*args_, **kwargs_):
        if feConvolveMatrixType.subclass:
            return feConvolveMatrixType.subclass(*args_, **kwargs_)
        else:
            return feConvolveMatrixType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def addElement(self, value): self.internalElements.append(value)
    def get_divisor(self): return self.divisor
    def set_divisor(self, divisor): self.divisor = divisor
    def get_kernelMatrix(self): return self.kernelMatrix
    def set_kernelMatrix(self, kernelMatrix): self.kernelMatrix = kernelMatrix
    def get_kernelUnitLength(self): return self.kernelUnitLength
    def set_kernelUnitLength(self, kernelUnitLength): self.kernelUnitLength = kernelUnitLength
    def get_edgeMode(self): return self.edgeMode
    def set_edgeMode(self, edgeMode): self.edgeMode = edgeMode
    def get_bias(self): return self.bias
    def set_bias(self, bias): self.bias = bias
    def get_targetX(self): return self.targetX
    def set_targetX(self, targetX): self.targetX = targetX
    def get_targetY(self): return self.targetY
    def set_targetY(self, targetY): self.targetY = targetY
    def get_preserveAlpha(self): return self.preserveAlpha
    def set_preserveAlpha(self, preserveAlpha): self.preserveAlpha = preserveAlpha
    def get_order(self): return self.order
    def set_order(self, order): self.order = order
    def export(self, outfile, level, namespace_='svg:', name_='feConvolveMatrixType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, self.internalName, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='feConvolveMatrixType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, self.internalName))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='svg:', name_='feConvolveMatrixType'):
        if self.divisor is not None:
            outfile.write(' divisor="%e"' % self.divisor)
        outfile.write(' kernelMatrix=%s' % (quote_attrib(self.kernelMatrix), ))
        if self.kernelUnitLength is not None:
            outfile.write(' kernelUnitLength=%s' % (quote_attrib(self.kernelUnitLength), ))
        if self.edgeMode is not None:
            outfile.write(' edgeMode=%s' % (quote_attrib(self.edgeMode), ))
        if self.bias is not None:
            outfile.write(' bias="%e"' % self.bias)
        if self.targetX is not None:
            outfile.write(' targetX="%d"' % self.targetX)
        if self.targetY is not None:
            outfile.write(' targetY="%d"' % self.targetY)
        if self.preserveAlpha is not None:
            outfile.write(' preserveAlpha="%s"' % str_lower(str(self.preserveAlpha)))
        outfile.write(' order=%s' % (quote_attrib(self.order), ))
    def exportChildren(self, outfile, level, namespace_='svg:', name_='feConvolveMatrixType'):
        for element_ in self.internalElements:
            element_.export(outfile, level, namespace_, name_='animate')
    def hasContent_(self):
        if (
         len(self.internalElements)>0
            ):
            return True
        else:
            return False
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('divisor'):
            try:
                self.divisor = float(attrs.get('divisor').value)
            except ValueError, exp:
                raise ValueError('Bad float/double attribute (divisor): %s' % exp)
        if attrs.get('kernelMatrix'):
            self.kernelMatrix = attrs.get('kernelMatrix').value
        if attrs.get('kernelUnitLength'):
            self.kernelUnitLength = attrs.get('kernelUnitLength').value
        if attrs.get('edgeMode'):
            self.edgeMode = attrs.get('edgeMode').value
        if attrs.get('bias'):
            try:
                self.bias = float(attrs.get('bias').value)
            except ValueError, exp:
                raise ValueError('Bad float/double attribute (bias): %s' % exp)
        if attrs.get('targetX'):
            try:
                self.targetX = int(attrs.get('targetX').value)
            except ValueError, exp:
                raise ValueError('Bad integer attribute (targetX): %s' % exp)
        if attrs.get('targetY'):
            try:
                self.targetY = int(attrs.get('targetY').value)
            except ValueError, exp:
                raise ValueError('Bad integer attribute (targetY): %s' % exp)
        if attrs.get('preserveAlpha'):
            if attrs.get('preserveAlpha').value in ('true', '1'):
                self.preserveAlpha = True
            elif attrs.get('preserveAlpha').value in ('false', '0'):
                self.preserveAlpha = False
            else:
                raise ValueError('Bad boolean attribute (preserveAlpha)')
        if attrs.get('order'):
            self.order = attrs.get('order').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animate':
            obj_ = animateType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'set':
            obj_ = setType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
# end class feConvolveMatrixType


class feDiffuseLightingType(object):
    subclass = None
    superclass = None
    def __init__(self, lighting_color=None, style=None, diffuseConstant=None, classxx=None, base=None, surfaceScale=None, id=None):
        self.internalName = "feDiffuseLighting"
        self.lighting_color = lighting_color
        self.style = style
        self.diffuseConstant = diffuseConstant
        self.classxx = classxx
        self.base = base
        self.surfaceScale = surfaceScale
        self.id = id
        self.internalElements = []
    def factory(*args_, **kwargs_):
        if feDiffuseLightingType.subclass:
            return feDiffuseLightingType.subclass(*args_, **kwargs_)
        else:
            return feDiffuseLightingType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def addElement(self, value): self.internalElements.append(value)
    def get_lighting_color(self): return self.lighting_color
    def set_lighting_color(self, lighting_color): self.lighting_color = lighting_color
    def get_style(self): return self.style
    def set_style(self, style): self.style = style
    def get_diffuseConstant(self): return self.diffuseConstant
    def set_diffuseConstant(self, diffuseConstant): self.diffuseConstant = diffuseConstant
    def get_class(self): return self.classxx
    def set_class(self, classxx): self.classxx = classxx
    def get_base(self): return self.base
    def set_base(self, base): self.base = base
    def get_surfaceScale(self): return self.surfaceScale
    def set_surfaceScale(self, surfaceScale): self.surfaceScale = surfaceScale
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='svg:', name_='feDiffuseLightingType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, self.internalName, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='feDiffuseLightingType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, self.internalName))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='svg:', name_='feDiffuseLightingType'):
        if self.lighting_color is not None:
            outfile.write(' lighting-color=%s' % (quote_attrib(self.lighting_color), ))
        if self.style is not None:
            outfile.write(' style=%s' % (quote_attrib(self.style), ))
        if self.diffuseConstant is not None:
            outfile.write(' diffuseConstant="%e"' % self.diffuseConstant)
        if self.classxx is not None:
            outfile.write(' class=%s' % (quote_attrib(self.classxx), ))
        if self.base is not None:
            outfile.write(' base=%s' % (quote_attrib(self.base), ))
        if self.surfaceScale is not None:
            outfile.write(' surfaceScale="%e"' % self.surfaceScale)
        if self.id is not None:
            outfile.write(' id=%s' % (quote_attrib(self.id), ))
    def exportChildren(self, outfile, level, namespace_='svg:', name_='feDiffuseLightingType'):
        for element_ in self.internalElements:
            element_.export(outfile, level, namespace_, name_='feDistantLight')
    def hasContent_(self):
        if (
         len(self.internalElements)>0
            ):
            return True
        else:
            return False
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('lighting-color'):
            self.lighting_color = attrs.get('lighting-color').value
        if attrs.get('style'):
            self.style = attrs.get('style').value
        if attrs.get('diffuseConstant'):
            try:
                self.diffuseConstant = float(attrs.get('diffuseConstant').value)
            except ValueError, exp:
                raise ValueError('Bad float/double attribute (diffuseConstant): %s' % exp)
        if attrs.get('class'):
            self.classxx = attrs.get('class').value
        if attrs.get('base'):
            self.base = attrs.get('base').value
        if attrs.get('surfaceScale'):
            try:
                self.surfaceScale = float(attrs.get('surfaceScale').value)
            except ValueError, exp:
                raise ValueError('Bad float/double attribute (surfaceScale): %s' % exp)
        if attrs.get('id'):
            self.id = attrs.get('id').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'feDistantLight':
            obj_ = feDistantLightType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'fePointLight':
            obj_ = fePointLightType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'feSpotLight':
            obj_ = feSpotLightType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animate':
            obj_ = animateType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'set':
            obj_ = setType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animateColor':
            obj_ = animateColorType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
# end class feDiffuseLightingType


class feDisplacementMapType(object):
    subclass = None
    superclass = None
    def __init__(self, scale=None, yChannelSelector='A', in2=None, base=None, xChannelSelector='A', id=None):
        self.internalName = "feDisplacementMap"
        self.scale = scale
        self.yChannelSelector = yChannelSelector
        self.in2 = in2
        self.base = base
        self.xChannelSelector = xChannelSelector
        self.id = id
        self.internalElements = []
    def factory(*args_, **kwargs_):
        if feDisplacementMapType.subclass:
            return feDisplacementMapType.subclass(*args_, **kwargs_)
        else:
            return feDisplacementMapType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def addElement(self, value): self.internalElements.append(value)
    def get_scale(self): return self.scale
    def set_scale(self, scale): self.scale = scale
    def get_yChannelSelector(self): return self.yChannelSelector
    def set_yChannelSelector(self, yChannelSelector): self.yChannelSelector = yChannelSelector
    def get_in2(self): return self.in2
    def set_in2(self, in2): self.in2 = in2
    def get_base(self): return self.base
    def set_base(self, base): self.base = base
    def get_xChannelSelector(self): return self.xChannelSelector
    def set_xChannelSelector(self, xChannelSelector): self.xChannelSelector = xChannelSelector
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='svg:', name_='feDisplacementMapType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, self.internalName, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='feDisplacementMapType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, self.internalName))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='svg:', name_='feDisplacementMapType'):
        if self.scale is not None:
            outfile.write(' scale="%e"' % self.scale)
        if self.yChannelSelector is not None:
            outfile.write(' yChannelSelector=%s' % (quote_attrib(self.yChannelSelector), ))
        outfile.write(' in2=%s' % (quote_attrib(self.in2), ))
        if self.base is not None:
            outfile.write(' base=%s' % (quote_attrib(self.base), ))
        if self.xChannelSelector is not None:
            outfile.write(' xChannelSelector=%s' % (quote_attrib(self.xChannelSelector), ))
        if self.id is not None:
            outfile.write(' id=%s' % (quote_attrib(self.id), ))
    def exportChildren(self, outfile, level, namespace_='svg:', name_='feDisplacementMapType'):
        for element_ in self.internalElements:
            element_.export(outfile, level, namespace_, name_='animate')
    def hasContent_(self):
        if (
         len(self.internalElements)>0
            ):
            return True
        else:
            return False
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('scale'):
            try:
                self.scale = float(attrs.get('scale').value)
            except ValueError, exp:
                raise ValueError('Bad float/double attribute (scale): %s' % exp)
        if attrs.get('yChannelSelector'):
            self.yChannelSelector = attrs.get('yChannelSelector').value
        if attrs.get('in2'):
            self.in2 = attrs.get('in2').value
        if attrs.get('base'):
            self.base = attrs.get('base').value
        if attrs.get('xChannelSelector'):
            self.xChannelSelector = attrs.get('xChannelSelector').value
        if attrs.get('id'):
            self.id = attrs.get('id').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animate':
            obj_ = animateType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'set':
            obj_ = setType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
# end class feDisplacementMapType


class feFloodType(object):
    subclass = None
    superclass = None
    def __init__(self, style=None, flood_opacity=None, flood_color=None, id=None, base=None, classxx=None):
        self.internalName = "feFlood"
        self.style = style
        self.flood_opacity = flood_opacity
        self.flood_color = flood_color
        self.id = id
        self.base = base
        self.classxx = classxx
        self.internalElements = []
    def factory(*args_, **kwargs_):
        if feFloodType.subclass:
            return feFloodType.subclass(*args_, **kwargs_)
        else:
            return feFloodType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def addElement(self, value): self.internalElements.append(value)
    def get_style(self): return self.style
    def set_style(self, style): self.style = style
    def get_flood_opacity(self): return self.flood_opacity
    def set_flood_opacity(self, flood_opacity): self.flood_opacity = flood_opacity
    def get_flood_color(self): return self.flood_color
    def set_flood_color(self, flood_color): self.flood_color = flood_color
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_base(self): return self.base
    def set_base(self, base): self.base = base
    def get_class(self): return self.classxx
    def set_class(self, classxx): self.classxx = classxx
    def export(self, outfile, level, namespace_='svg:', name_='feFloodType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, self.internalName, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='feFloodType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, self.internalName))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='svg:', name_='feFloodType'):
        if self.style is not None:
            outfile.write(' style=%s' % (quote_attrib(self.style), ))
        if self.flood_opacity is not None:
            outfile.write(' flood-opacity=%s' % (quote_attrib(self.flood_opacity), ))
        if self.flood_color is not None:
            outfile.write(' flood-color=%s' % (quote_attrib(self.flood_color), ))
        if self.id is not None:
            outfile.write(' id=%s' % (quote_attrib(self.id), ))
        if self.base is not None:
            outfile.write(' base=%s' % (quote_attrib(self.base), ))
        if self.classxx is not None:
            outfile.write(' class=%s' % (quote_attrib(self.classxx), ))
    def exportChildren(self, outfile, level, namespace_='svg:', name_='feFloodType'):
        for element_ in self.internalElements:
            element_.export(outfile, level, namespace_, name_='animate')
    def hasContent_(self):
        if (
         len(self.internalElements)>0
            ):
            return True
        else:
            return False
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('style'):
            self.style = attrs.get('style').value
        if attrs.get('flood-opacity'):
            self.flood_opacity = attrs.get('flood-opacity').value
        if attrs.get('flood-color'):
            self.flood_color = attrs.get('flood-color').value
        if attrs.get('id'):
            self.id = attrs.get('id').value
        if attrs.get('base'):
            self.base = attrs.get('base').value
        if attrs.get('class'):
            self.classxx = attrs.get('class').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animate':
            obj_ = animateType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'set':
            obj_ = setType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animateColor':
            obj_ = animateColorType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
# end class feFloodType


class feGaussianBlurType(object):
    subclass = None
    superclass = None
    def __init__(self, base=None, stdDeviation=None, id=None):
        self.internalName = "feGaussianBlur"
        self.base = base
        self.stdDeviation = stdDeviation
        self.id = id
        self.internalElements = []
    def factory(*args_, **kwargs_):
        if feGaussianBlurType.subclass:
            return feGaussianBlurType.subclass(*args_, **kwargs_)
        else:
            return feGaussianBlurType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def addElement(self, value): self.internalElements.append(value)
    def get_base(self): return self.base
    def set_base(self, base): self.base = base
    def get_stdDeviation(self): return self.stdDeviation
    def set_stdDeviation(self, stdDeviation): self.stdDeviation = stdDeviation
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='svg:', name_='feGaussianBlurType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, self.internalName, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='feGaussianBlurType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, self.internalName))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='svg:', name_='feGaussianBlurType'):
        if self.base is not None:
            outfile.write(' base=%s' % (quote_attrib(self.base), ))
        if self.stdDeviation is not None:
            outfile.write(' stdDeviation=%s' % (quote_attrib(self.stdDeviation), ))
        if self.id is not None:
            outfile.write(' id=%s' % (quote_attrib(self.id), ))
    def exportChildren(self, outfile, level, namespace_='svg:', name_='feGaussianBlurType'):
        for element_ in self.internalElements:
            element_.export(outfile, level, namespace_, name_='animate')
    def hasContent_(self):
        if (
         len(self.internalElements)>0
            ):
            return True
        else:
            return False
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('base'):
            self.base = attrs.get('base').value
        if attrs.get('stdDeviation'):
            self.stdDeviation = attrs.get('stdDeviation').value
        if attrs.get('id'):
            self.id = attrs.get('id').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animate':
            obj_ = animateType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'set':
            obj_ = setType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
# end class feGaussianBlurType


class feImageType(object):
    subclass = None
    superclass = None
    def __init__(self, lang=None, style=None, space=None, show='other', title=None, actuate=None, transform=None, id=None, width=None, href=None, role=None, arcrole=None, base=None, y=None, x=None, externalResourcesRequired=None, height=None, type_=None, classxx=None, result=None):
        self.internalName = "feImage"
        self.lang = lang
        self.style = style
        self.space = space
        self.show = show
        self.title = title
        self.actuate = actuate
        self.transform = transform
        self.id = id
        self.width = width
        self.href = href
        self.role = role
        self.arcrole = arcrole
        self.base = base
        self.y = y
        self.x = x
        self.externalResourcesRequired = externalResourcesRequired
        self.height = height
        self.type_ = type_
        self.classxx = classxx
        self.result = result
        self.internalElements = []
    def factory(*args_, **kwargs_):
        if feImageType.subclass:
            return feImageType.subclass(*args_, **kwargs_)
        else:
            return feImageType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def addElement(self, value): self.internalElements.append(value)
    def validate_animateTransformType(self, value):
        # validate type animateTransformType
        pass
    def get_lang(self): return self.lang
    def set_lang(self, lang): self.lang = lang
    def get_style(self): return self.style
    def set_style(self, style): self.style = style
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_show(self): return self.show
    def set_show(self, show): self.show = show
    def get_title(self): return self.title
    def set_title(self, title): self.title = title
    def get_actuate(self): return self.actuate
    def set_actuate(self, actuate): self.actuate = actuate
    def get_transform(self): return self.transform
    def set_transform(self, transform): self.transform = transform
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_width(self): return self.width
    def set_width(self, width): self.width = width
    def get_href(self): return self.href
    def set_href(self, href): self.href = href
    def get_role(self): return self.role
    def set_role(self, role): self.role = role
    def get_arcrole(self): return self.arcrole
    def set_arcrole(self, arcrole): self.arcrole = arcrole
    def get_base(self): return self.base
    def set_base(self, base): self.base = base
    def get_y(self): return self.y
    def set_y(self, y): self.y = y
    def get_x(self): return self.x
    def set_x(self, x): self.x = x
    def get_externalResourcesRequired(self): return self.externalResourcesRequired
    def set_externalResourcesRequired(self, externalResourcesRequired): self.externalResourcesRequired = externalResourcesRequired
    def get_height(self): return self.height
    def set_height(self, height): self.height = height
    def get_type(self): return self.type_
    def set_type(self, type_): self.type_ = type_
    def get_class(self): return self.classxx
    def set_class(self, classxx): self.classxx = classxx
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def export(self, outfile, level, namespace_='svg:', name_='feImageType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, self.internalName, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='feImageType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, self.internalName))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='svg:', name_='feImageType'):
        if self.lang is not None:
            outfile.write(' lang=%s' % (quote_attrib(self.lang), ))
        if self.style is not None:
            outfile.write(' style=%s' % (quote_attrib(self.style), ))
        if self.space is not None:
            outfile.write(' space=%s' % (quote_attrib(self.space), ))
        if self.show is not None:
            outfile.write(' show=%s' % (quote_attrib(self.show), ))
        if self.title is not None:
            outfile.write(' title=%s' % (quote_attrib(self.title), ))
        if self.actuate is not None:
            outfile.write(' actuate=%s' % (quote_attrib(self.actuate), ))
        if self.transform is not None:
            outfile.write(' transform=%s' % (quote_attrib(self.transform), ))
        if self.id is not None:
            outfile.write(' id=%s' % (quote_attrib(self.id), ))
        if self.width is not None:
            outfile.write(' width=%s' % (quote_attrib(self.width), ))
        if self.href is not None:
            outfile.write(' href=%s' % (quote_attrib(self.href), ))
        if self.role is not None:
            outfile.write(' role=%s' % (quote_attrib(self.role), ))
        if self.arcrole is not None:
            outfile.write(' arcrole=%s' % (quote_attrib(self.arcrole), ))
        if self.base is not None:
            outfile.write(' base=%s' % (quote_attrib(self.base), ))
        if self.y is not None:
            outfile.write(' y=%s' % (quote_attrib(self.y), ))
        if self.x is not None:
            outfile.write(' x=%s' % (quote_attrib(self.x), ))
        if self.externalResourcesRequired is not None:
            outfile.write(' externalResourcesRequired="%s"' % str_lower(str(self.externalResourcesRequired)))
        if self.height is not None:
            outfile.write(' height=%s' % (quote_attrib(self.height), ))
        if self.type_ is not None:
            outfile.write(' type=%s' % (quote_attrib(self.type_), ))
        if self.classxx is not None:
            outfile.write(' class=%s' % (quote_attrib(self.classxx), ))
        if self.result is not None:
            outfile.write(' result=%s' % (quote_attrib(self.result), ))
    def exportChildren(self, outfile, level, namespace_='svg:', name_='feImageType'):
        for element_ in self.internalElements:
            element_.export(outfile, level, namespace_, name_='animate')
    def hasContent_(self):
        if (
         len(self.internalElements)>0
            ):
            return True
        else:
            return False
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('lang'):
            self.lang = attrs.get('lang').value
        if attrs.get('style'):
            self.style = attrs.get('style').value
        if attrs.get('space'):
            self.space = attrs.get('space').value
        if attrs.get('show'):
            self.show = attrs.get('show').value
        if attrs.get('title'):
            self.title = attrs.get('title').value
        if attrs.get('actuate'):
            self.actuate = attrs.get('actuate').value
        if attrs.get('transform'):
            self.transform = attrs.get('transform').value
        if attrs.get('id'):
            self.id = attrs.get('id').value
        if attrs.get('width'):
            self.width = attrs.get('width').value
        if attrs.get('href'):
            self.href = attrs.get('href').value
        if attrs.get('role'):
            self.role = attrs.get('role').value
        if attrs.get('arcrole'):
            self.arcrole = attrs.get('arcrole').value
        if attrs.get('base'):
            self.base = attrs.get('base').value
        if attrs.get('y'):
            self.y = attrs.get('y').value
        if attrs.get('x'):
            self.x = attrs.get('x').value
        if attrs.get('externalResourcesRequired'):
            if attrs.get('externalResourcesRequired').value in ('true', '1'):
                self.externalResourcesRequired = True
            elif attrs.get('externalResourcesRequired').value in ('false', '0'):
                self.externalResourcesRequired = False
            else:
                raise ValueError('Bad boolean attribute (externalResourcesRequired)')
        if attrs.get('height'):
            self.height = attrs.get('height').value
        if attrs.get('type'):
            self.type_ = attrs.get('type').value
        if attrs.get('class'):
            self.classxx = attrs.get('class').value
        if attrs.get('result'):
            self.result = attrs.get('result').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animate':
            obj_ = animateType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'set':
            obj_ = setType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animateTransform':
            obj_ = animateTransformType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_animateTransformType(obj_)    # validate type animateTransformType
# end class feImageType


class feMergeType(object):
    subclass = None
    superclass = None
    def __init__(self, height=None, width=None, base=None, result=None, y=None, x=None, id=None, feMergeNode=None):
        self.internalName = "feMerge"
        self.height = height
        self.width = width
        self.base = base
        self.result = result
        self.y = y
        self.x = x
        self.id = id
        self.feMergeNode = feMergeNode
    def factory(*args_, **kwargs_):
        if feMergeType.subclass:
            return feMergeType.subclass(*args_, **kwargs_)
        else:
            return feMergeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_feMergeNode(self): return self.feMergeNode
    def set_feMergeNode(self, feMergeNode): self.feMergeNode = feMergeNode
    def get_height(self): return self.height
    def set_height(self, height): self.height = height
    def get_width(self): return self.width
    def set_width(self, width): self.width = width
    def get_base(self): return self.base
    def set_base(self, base): self.base = base
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_y(self): return self.y
    def set_y(self, y): self.y = y
    def get_x(self): return self.x
    def set_x(self, x): self.x = x
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='svg:', name_='feMergeType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, self.internalName, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='feMergeType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, self.internalName))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='svg:', name_='feMergeType'):
        if self.height is not None:
            outfile.write(' height=%s' % (quote_attrib(self.height), ))
        if self.width is not None:
            outfile.write(' width=%s' % (quote_attrib(self.width), ))
        if self.base is not None:
            outfile.write(' base=%s' % (quote_attrib(self.base), ))
        if self.result is not None:
            outfile.write(' result=%s' % (quote_attrib(self.result), ))
        if self.y is not None:
            outfile.write(' y=%s' % (quote_attrib(self.y), ))
        if self.x is not None:
            outfile.write(' x=%s' % (quote_attrib(self.x), ))
        if self.id is not None:
            outfile.write(' id=%s' % (quote_attrib(self.id), ))
    def exportChildren(self, outfile, level, namespace_='svg:', name_='feMergeType'):
        if self.feMergeNode:
            self.feMergeNode.export(outfile, level, namespace_, name_='feMergeNode', )
    def hasContent_(self):
        if (
            self.feMergeNode
            ):
            return True
        else:
            return False
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('height'):
            self.height = attrs.get('height').value
        if attrs.get('width'):
            self.width = attrs.get('width').value
        if attrs.get('base'):
            self.base = attrs.get('base').value
        if attrs.get('result'):
            self.result = attrs.get('result').value
        if attrs.get('y'):
            self.y = attrs.get('y').value
        if attrs.get('x'):
            self.x = attrs.get('x').value
        if attrs.get('id'):
            self.id = attrs.get('id').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'feMergeNode':
            obj_ = feMergeNodeType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            self.set_feMergeNode(obj_)
# end class feMergeType


class feMergeNodeType(object):
    subclass = None
    superclass = None
    def __init__(self, base=None, id=None, inxx=None):
        self.internalName = "feMergeNode"
        self.base = base
        self.id = id
        self.inxx = inxx
        self.internalElements = []
    def factory(*args_, **kwargs_):
        if feMergeNodeType.subclass:
            return feMergeNodeType.subclass(*args_, **kwargs_)
        else:
            return feMergeNodeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def addElement(self, value): self.internalElements.append(value)
    def get_base(self): return self.base
    def set_base(self, base): self.base = base
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_in(self): return self.inxx
    def set_in(self, inxx): self.inxx = inxx
    def export(self, outfile, level, namespace_='svg:', name_='feMergeNodeType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, self.internalName, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='feMergeNodeType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, self.internalName))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='svg:', name_='feMergeNodeType'):
        if self.base is not None:
            outfile.write(' base=%s' % (quote_attrib(self.base), ))
        if self.id is not None:
            outfile.write(' id=%s' % (quote_attrib(self.id), ))
        if self.inxx is not None:
            outfile.write(' in=%s' % (quote_attrib(self.inxx), ))
    def exportChildren(self, outfile, level, namespace_='svg:', name_='feMergeNodeType'):
        for element_ in self.internalElements:
            element_.export(outfile, level, namespace_, name_='animate')
    def hasContent_(self):
        if (
         len(self.internalElements)>0
            ):
            return True
        else:
            return False
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('base'):
            self.base = attrs.get('base').value
        if attrs.get('id'):
            self.id = attrs.get('id').value
        if attrs.get('in'):
            self.inxx = attrs.get('in').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animate':
            obj_ = animateType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'set':
            obj_ = setType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
# end class feMergeNodeType


class feMorphologyType(object):
    subclass = None
    superclass = None
    def __init__(self, operator='erode', base=None, radius=None, id=None):
        self.internalName = "feMorphology"
        self.operator = operator
        self.base = base
        self.radius = radius
        self.id = id
        self.internalElements = []
    def factory(*args_, **kwargs_):
        if feMorphologyType.subclass:
            return feMorphologyType.subclass(*args_, **kwargs_)
        else:
            return feMorphologyType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def addElement(self, value): self.internalElements.append(value)
    def get_operator(self): return self.operator
    def set_operator(self, operator): self.operator = operator
    def get_base(self): return self.base
    def set_base(self, base): self.base = base
    def get_radius(self): return self.radius
    def set_radius(self, radius): self.radius = radius
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='svg:', name_='feMorphologyType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, self.internalName, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='feMorphologyType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, self.internalName))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='svg:', name_='feMorphologyType'):
        if self.operator is not None:
            outfile.write(' operator=%s' % (quote_attrib(self.operator), ))
        if self.base is not None:
            outfile.write(' base=%s' % (quote_attrib(self.base), ))
        if self.radius is not None:
            outfile.write(' radius=%s' % (quote_attrib(self.radius), ))
        if self.id is not None:
            outfile.write(' id=%s' % (quote_attrib(self.id), ))
    def exportChildren(self, outfile, level, namespace_='svg:', name_='feMorphologyType'):
        for element_ in self.internalElements:
            element_.export(outfile, level, namespace_, name_='animate')
    def hasContent_(self):
        if (
         len(self.internalElements)>0
            ):
            return True
        else:
            return False
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('operator'):
            self.operator = attrs.get('operator').value
        if attrs.get('base'):
            self.base = attrs.get('base').value
        if attrs.get('radius'):
            self.radius = attrs.get('radius').value
        if attrs.get('id'):
            self.id = attrs.get('id').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animate':
            obj_ = animateType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'set':
            obj_ = setType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
# end class feMorphologyType


class feOffsetType(object):
    subclass = None
    superclass = None
    def __init__(self, base=None, id=None, dx=None, dy=None):
        self.internalName = "feOffset"
        self.base = base
        self.id = id
        self.dx = dx
        self.dy = dy
        self.internalElements = []
    def factory(*args_, **kwargs_):
        if feOffsetType.subclass:
            return feOffsetType.subclass(*args_, **kwargs_)
        else:
            return feOffsetType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def addElement(self, value): self.internalElements.append(value)
    def get_base(self): return self.base
    def set_base(self, base): self.base = base
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_dx(self): return self.dx
    def set_dx(self, dx): self.dx = dx
    def get_dy(self): return self.dy
    def set_dy(self, dy): self.dy = dy
    def export(self, outfile, level, namespace_='svg:', name_='feOffsetType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, self.internalName, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='feOffsetType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, self.internalName))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='svg:', name_='feOffsetType'):
        if self.base is not None:
            outfile.write(' base=%s' % (quote_attrib(self.base), ))
        if self.id is not None:
            outfile.write(' id=%s' % (quote_attrib(self.id), ))
        if self.dx is not None:
            outfile.write(' dx=%s' % (quote_attrib(self.dx), ))
        if self.dy is not None:
            outfile.write(' dy=%s' % (quote_attrib(self.dy), ))
    def exportChildren(self, outfile, level, namespace_='svg:', name_='feOffsetType'):
        for element_ in self.internalElements:
            element_.export(outfile, level, namespace_, name_='animate')
    def hasContent_(self):
        if (
         len(self.internalElements)>0
            ):
            return True
        else:
            return False
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('base'):
            self.base = attrs.get('base').value
        if attrs.get('id'):
            self.id = attrs.get('id').value
        if attrs.get('dx'):
            self.dx = attrs.get('dx').value
        if attrs.get('dy'):
            self.dy = attrs.get('dy').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animate':
            obj_ = animateType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'set':
            obj_ = setType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
# end class feOffsetType


class feSpecularLightingType(object):
    subclass = None
    superclass = None
    def __init__(self, lighting_color=None, style=None, specularConstant=None, surfaceScale=None, base=None, specularExponent=None, id=None, classxx=None):
        self.internalName = "feSpecularLighting"
        self.lighting_color = lighting_color
        self.style = style
        self.specularConstant = specularConstant
        self.surfaceScale = surfaceScale
        self.base = base
        self.specularExponent = specularExponent
        self.id = id
        self.classxx = classxx
        self.internalElements = []
    def factory(*args_, **kwargs_):
        if feSpecularLightingType.subclass:
            return feSpecularLightingType.subclass(*args_, **kwargs_)
        else:
            return feSpecularLightingType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def addElement(self, value): self.internalElements.append(value)
    def get_lighting_color(self): return self.lighting_color
    def set_lighting_color(self, lighting_color): self.lighting_color = lighting_color
    def get_style(self): return self.style
    def set_style(self, style): self.style = style
    def get_specularConstant(self): return self.specularConstant
    def set_specularConstant(self, specularConstant): self.specularConstant = specularConstant
    def get_surfaceScale(self): return self.surfaceScale
    def set_surfaceScale(self, surfaceScale): self.surfaceScale = surfaceScale
    def get_base(self): return self.base
    def set_base(self, base): self.base = base
    def get_specularExponent(self): return self.specularExponent
    def set_specularExponent(self, specularExponent): self.specularExponent = specularExponent
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_class(self): return self.classxx
    def set_class(self, classxx): self.classxx = classxx
    def export(self, outfile, level, namespace_='svg:', name_='feSpecularLightingType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, self.internalName, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='feSpecularLightingType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, self.internalName))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='svg:', name_='feSpecularLightingType'):
        if self.lighting_color is not None:
            outfile.write(' lighting-color=%s' % (quote_attrib(self.lighting_color), ))
        if self.style is not None:
            outfile.write(' style=%s' % (quote_attrib(self.style), ))
        if self.specularConstant is not None:
            outfile.write(' specularConstant="%e"' % self.specularConstant)
        if self.surfaceScale is not None:
            outfile.write(' surfaceScale="%e"' % self.surfaceScale)
        if self.base is not None:
            outfile.write(' base=%s' % (quote_attrib(self.base), ))
        if self.specularExponent is not None:
            outfile.write(' specularExponent="%e"' % self.specularExponent)
        if self.id is not None:
            outfile.write(' id=%s' % (quote_attrib(self.id), ))
        if self.classxx is not None:
            outfile.write(' class=%s' % (quote_attrib(self.classxx), ))
    def exportChildren(self, outfile, level, namespace_='svg:', name_='feSpecularLightingType'):
        for element_ in self.internalElements:
            element_.export(outfile, level, namespace_, name_='feDistantLight')
    def hasContent_(self):
        if (
         len(self.internalElements)>0
            ):
            return True
        else:
            return False
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('lighting-color'):
            self.lighting_color = attrs.get('lighting-color').value
        if attrs.get('style'):
            self.style = attrs.get('style').value
        if attrs.get('specularConstant'):
            try:
                self.specularConstant = float(attrs.get('specularConstant').value)
            except ValueError, exp:
                raise ValueError('Bad float/double attribute (specularConstant): %s' % exp)
        if attrs.get('surfaceScale'):
            try:
                self.surfaceScale = float(attrs.get('surfaceScale').value)
            except ValueError, exp:
                raise ValueError('Bad float/double attribute (surfaceScale): %s' % exp)
        if attrs.get('base'):
            self.base = attrs.get('base').value
        if attrs.get('specularExponent'):
            try:
                self.specularExponent = float(attrs.get('specularExponent').value)
            except ValueError, exp:
                raise ValueError('Bad float/double attribute (specularExponent): %s' % exp)
        if attrs.get('id'):
            self.id = attrs.get('id').value
        if attrs.get('class'):
            self.classxx = attrs.get('class').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'feDistantLight':
            obj_ = feDistantLightType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'fePointLight':
            obj_ = fePointLightType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'feSpotLight':
            obj_ = feSpotLightType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animate':
            obj_ = animateType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'set':
            obj_ = setType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animateColor':
            obj_ = animateColorType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
# end class feSpecularLightingType


class feTileType(object):
    subclass = None
    superclass = None
    def __init__(self, base=None, id=None):
        self.internalName = "feTile"
        self.base = base
        self.id = id
        self.internalElements = []
    def factory(*args_, **kwargs_):
        if feTileType.subclass:
            return feTileType.subclass(*args_, **kwargs_)
        else:
            return feTileType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def addElement(self, value): self.internalElements.append(value)
    def get_base(self): return self.base
    def set_base(self, base): self.base = base
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='svg:', name_='feTileType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, self.internalName, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='feTileType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, self.internalName))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='svg:', name_='feTileType'):
        if self.base is not None:
            outfile.write(' base=%s' % (quote_attrib(self.base), ))
        if self.id is not None:
            outfile.write(' id=%s' % (quote_attrib(self.id), ))
    def exportChildren(self, outfile, level, namespace_='svg:', name_='feTileType'):
        for element_ in self.internalElements:
            element_.export(outfile, level, namespace_, name_='animate')
    def hasContent_(self):
        if (
         len(self.internalElements)>0
            ):
            return True
        else:
            return False
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('base'):
            self.base = attrs.get('base').value
        if attrs.get('id'):
            self.id = attrs.get('id').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animate':
            obj_ = animateType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'set':
            obj_ = setType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
# end class feTileType


class feTurbulenceType(object):
    subclass = None
    superclass = None
    def __init__(self, baseFrequency=None, type_='turbulence', stitchTiles='noStitch', height=None, width=None, base=None, result=None, x=None, y=None, numOctaves=None, seed=None, id=None):
        self.internalName = "feTurbulence"
        self.baseFrequency = baseFrequency
        self.type_ = type_
        self.stitchTiles = stitchTiles
        self.height = height
        self.width = width
        self.base = base
        self.result = result
        self.x = x
        self.y = y
        self.numOctaves = numOctaves
        self.seed = seed
        self.id = id
        self.internalElements = []
    def factory(*args_, **kwargs_):
        if feTurbulenceType.subclass:
            return feTurbulenceType.subclass(*args_, **kwargs_)
        else:
            return feTurbulenceType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def addElement(self, value): self.internalElements.append(value)
    def get_baseFrequency(self): return self.baseFrequency
    def set_baseFrequency(self, baseFrequency): self.baseFrequency = baseFrequency
    def get_type(self): return self.type_
    def set_type(self, type_): self.type_ = type_
    def get_stitchTiles(self): return self.stitchTiles
    def set_stitchTiles(self, stitchTiles): self.stitchTiles = stitchTiles
    def get_height(self): return self.height
    def set_height(self, height): self.height = height
    def get_width(self): return self.width
    def set_width(self, width): self.width = width
    def get_base(self): return self.base
    def set_base(self, base): self.base = base
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_x(self): return self.x
    def set_x(self, x): self.x = x
    def get_y(self): return self.y
    def set_y(self, y): self.y = y
    def get_numOctaves(self): return self.numOctaves
    def set_numOctaves(self, numOctaves): self.numOctaves = numOctaves
    def get_seed(self): return self.seed
    def set_seed(self, seed): self.seed = seed
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='svg:', name_='feTurbulenceType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, self.internalName, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='feTurbulenceType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, self.internalName))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='svg:', name_='feTurbulenceType'):
        if self.baseFrequency is not None:
            outfile.write(' baseFrequency=%s' % (quote_attrib(self.baseFrequency), ))
        if self.type_ is not None:
            outfile.write(' type=%s' % (quote_attrib(self.type_), ))
        if self.stitchTiles is not None:
            outfile.write(' stitchTiles=%s' % (quote_attrib(self.stitchTiles), ))
        if self.height is not None:
            outfile.write(' height=%s' % (quote_attrib(self.height), ))
        if self.width is not None:
            outfile.write(' width=%s' % (quote_attrib(self.width), ))
        if self.base is not None:
            outfile.write(' base=%s' % (quote_attrib(self.base), ))
        if self.result is not None:
            outfile.write(' result=%s' % (quote_attrib(self.result), ))
        if self.x is not None:
            outfile.write(' x=%s' % (quote_attrib(self.x), ))
        if self.y is not None:
            outfile.write(' y=%s' % (quote_attrib(self.y), ))
        if self.numOctaves is not None:
            outfile.write(' numOctaves="%d"' % self.numOctaves)
        if self.seed is not None:
            outfile.write(' seed="%e"' % self.seed)
        if self.id is not None:
            outfile.write(' id=%s' % (quote_attrib(self.id), ))
    def exportChildren(self, outfile, level, namespace_='svg:', name_='feTurbulenceType'):
        for element_ in self.internalElements:
            element_.export(outfile, level, namespace_, name_='animate')
    def hasContent_(self):
        if (
         len(self.internalElements)>0
            ):
            return True
        else:
            return False
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('baseFrequency'):
            self.baseFrequency = attrs.get('baseFrequency').value
        if attrs.get('type'):
            self.type_ = attrs.get('type').value
        if attrs.get('stitchTiles'):
            self.stitchTiles = attrs.get('stitchTiles').value
        if attrs.get('height'):
            self.height = attrs.get('height').value
        if attrs.get('width'):
            self.width = attrs.get('width').value
        if attrs.get('base'):
            self.base = attrs.get('base').value
        if attrs.get('result'):
            self.result = attrs.get('result').value
        if attrs.get('x'):
            self.x = attrs.get('x').value
        if attrs.get('y'):
            self.y = attrs.get('y').value
        if attrs.get('numOctaves'):
            try:
                self.numOctaves = int(attrs.get('numOctaves').value)
            except ValueError, exp:
                raise ValueError('Bad integer attribute (numOctaves): %s' % exp)
        if attrs.get('seed'):
            try:
                self.seed = float(attrs.get('seed').value)
            except ValueError, exp:
                raise ValueError('Bad float/double attribute (seed): %s' % exp)
        if attrs.get('id'):
            self.id = attrs.get('id').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animate':
            obj_ = animateType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'set':
            obj_ = setType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
# end class feTurbulenceType


class cursorType(object):
    subclass = None
    superclass = None
    def __init__(self, show='other', requiredExtensions=None, systemLanguage=None, title=None, actuate=None, requiredFeatures=None, href=None, role=None, arcrole=None, base=None, y=None, x=None, externalResourcesRequired=None, type_=None, id=None, valueOf_=''):
        self.internalName = "cursor"
        self.show = show
        self.requiredExtensions = requiredExtensions
        self.systemLanguage = systemLanguage
        self.title = title
        self.actuate = actuate
        self.requiredFeatures = requiredFeatures
        self.href = href
        self.role = role
        self.arcrole = arcrole
        self.base = base
        self.y = y
        self.x = x
        self.externalResourcesRequired = externalResourcesRequired
        self.type_ = type_
        self.id = id
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if cursorType.subclass:
            return cursorType.subclass(*args_, **kwargs_)
        else:
            return cursorType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_show(self): return self.show
    def set_show(self, show): self.show = show
    def get_requiredExtensions(self): return self.requiredExtensions
    def set_requiredExtensions(self, requiredExtensions): self.requiredExtensions = requiredExtensions
    def get_systemLanguage(self): return self.systemLanguage
    def set_systemLanguage(self, systemLanguage): self.systemLanguage = systemLanguage
    def get_title(self): return self.title
    def set_title(self, title): self.title = title
    def get_actuate(self): return self.actuate
    def set_actuate(self, actuate): self.actuate = actuate
    def get_requiredFeatures(self): return self.requiredFeatures
    def set_requiredFeatures(self, requiredFeatures): self.requiredFeatures = requiredFeatures
    def get_href(self): return self.href
    def set_href(self, href): self.href = href
    def get_role(self): return self.role
    def set_role(self, role): self.role = role
    def get_arcrole(self): return self.arcrole
    def set_arcrole(self, arcrole): self.arcrole = arcrole
    def get_base(self): return self.base
    def set_base(self, base): self.base = base
    def get_y(self): return self.y
    def set_y(self, y): self.y = y
    def get_x(self): return self.x
    def set_x(self, x): self.x = x
    def get_externalResourcesRequired(self): return self.externalResourcesRequired
    def set_externalResourcesRequired(self, externalResourcesRequired): self.externalResourcesRequired = externalResourcesRequired
    def get_type(self): return self.type_
    def set_type(self, type_): self.type_ = type_
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def getValueOf_(self): return self.valueOf_
    def setValueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='svg:', name_='cursorType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, self.internalName, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='cursorType')
        outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='svg:', name_='cursorType'):
        if self.show is not None:
            outfile.write(' show=%s' % (quote_attrib(self.show), ))
        if self.requiredExtensions is not None:
            outfile.write(' requiredExtensions=%s' % (quote_attrib(self.requiredExtensions), ))
        if self.systemLanguage is not None:
            outfile.write(' systemLanguage=%s' % (quote_attrib(self.systemLanguage), ))
        if self.title is not None:
            outfile.write(' title=%s' % (quote_attrib(self.title), ))
        if self.actuate is not None:
            outfile.write(' actuate=%s' % (quote_attrib(self.actuate), ))
        if self.requiredFeatures is not None:
            outfile.write(' requiredFeatures=%s' % (quote_attrib(self.requiredFeatures), ))
        if self.href is not None:
            outfile.write(' href=%s' % (quote_attrib(self.href), ))
        if self.role is not None:
            outfile.write(' role=%s' % (quote_attrib(self.role), ))
        if self.arcrole is not None:
            outfile.write(' arcrole=%s' % (quote_attrib(self.arcrole), ))
        if self.base is not None:
            outfile.write(' base=%s' % (quote_attrib(self.base), ))
        if self.y is not None:
            outfile.write(' y=%s' % (quote_attrib(self.y), ))
        if self.x is not None:
            outfile.write(' x=%s' % (quote_attrib(self.x), ))
        if self.externalResourcesRequired is not None:
            outfile.write(' externalResourcesRequired="%s"' % str_lower(str(self.externalResourcesRequired)))
        if self.type_ is not None:
            outfile.write(' type=%s' % (quote_attrib(self.type_), ))
        if self.id is not None:
            outfile.write(' id=%s' % (quote_attrib(self.id), ))
    def exportChildren(self, outfile, level, namespace_='svg:', name_='cursorType'):
        if self.valueOf_.find('![CDATA')>-1:
            value=quote_xml('%s' % self.valueOf_)
            value=value.replace('![CDATA','<![CDATA')
            value=value.replace(']]',']]>')
            outfile.write(value)
        else:
            outfile.write(quote_xml('%s' % self.valueOf_))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        self.valueOf_ = ''
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('show'):
            self.show = attrs.get('show').value
        if attrs.get('requiredExtensions'):
            self.requiredExtensions = attrs.get('requiredExtensions').value
        if attrs.get('systemLanguage'):
            self.systemLanguage = attrs.get('systemLanguage').value
        if attrs.get('title'):
            self.title = attrs.get('title').value
        if attrs.get('actuate'):
            self.actuate = attrs.get('actuate').value
        if attrs.get('requiredFeatures'):
            self.requiredFeatures = attrs.get('requiredFeatures').value
        if attrs.get('href'):
            self.href = attrs.get('href').value
        if attrs.get('role'):
            self.role = attrs.get('role').value
        if attrs.get('arcrole'):
            self.arcrole = attrs.get('arcrole').value
        if attrs.get('base'):
            self.base = attrs.get('base').value
        if attrs.get('y'):
            self.y = attrs.get('y').value
        if attrs.get('x'):
            self.x = attrs.get('x').value
        if attrs.get('externalResourcesRequired'):
            if attrs.get('externalResourcesRequired').value in ('true', '1'):
                self.externalResourcesRequired = True
            elif attrs.get('externalResourcesRequired').value in ('false', '0'):
                self.externalResourcesRequired = False
            else:
                raise ValueError('Bad boolean attribute (externalResourcesRequired)')
        if attrs.get('type'):
            self.type_ = attrs.get('type').value
        if attrs.get('id'):
            self.id = attrs.get('id').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.TEXT_NODE:
            self.valueOf_ += child_.nodeValue
        elif child_.nodeType == Node.CDATA_SECTION_NODE:
            self.valueOf_ += '![CDATA['+child_.nodeValue+']]'
# end class cursorType


class aType(object):
    subclass = None
    superclass = None
    def __init__(self, show=None, onfocusout=None, actuate=None, onmousedown=None, href=None, arcrole=None, id=None, onload=None, title_attr=None, space=None, requiredExtensions=None, transform=None, onmouseup=None, role=None, onactivate=None, onmousemove=None, type_=None, onfocusin=None, onclick=None, onmouseout=None, systemLanguage=None, onmouseover=None, externalResourcesRequired=None, classxx=None, lang=None, target=None, requiredFeatures=None, base=None, style_attr=None, mixedclass_=None, content_=None):
        self.internalName = "a"
        self.show = show
        self.onfocusout = onfocusout
        self.actuate = actuate
        self.onmousedown = onmousedown
        self.href = href
        self.arcrole = arcrole
        self.id = id
        self.onload = onload
        self.title_attr = title_attr
        self.space = space
        self.requiredExtensions = requiredExtensions
        self.transform = transform
        self.onmouseup = onmouseup
        self.role = role
        self.onactivate = onactivate
        self.onmousemove = onmousemove
        self.type_ = type_
        self.onfocusin = onfocusin
        self.onclick = onclick
        self.onmouseout = onmouseout
        self.systemLanguage = systemLanguage
        self.onmouseover = onmouseover
        self.externalResourcesRequired = externalResourcesRequired
        self.classxx = classxx
        self.lang = lang
        self.target = target
        self.requiredFeatures = requiredFeatures
        self.base = base
        self.style_attr = style_attr
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
    def factory(*args_, **kwargs_):
        if aType.subclass:
            return aType.subclass(*args_, **kwargs_)
        else:
            return aType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def addElement(self, value): self.internalElements.append(value)
    def validate_textType(self, value):
        # validate type textType
        pass
    def validate_svgType(self, value):
        # validate type svgType
        pass
    def validate_viewType(self, value):
        # validate type viewType
        pass
    def validate_markerType(self, value):
        # validate type markerType
        pass
    def validate_clipPathType(self, value):
        # validate type clipPathType
        pass
    def validate_maskType(self, value):
        # validate type maskType
        pass
    def validate_linearGradientType(self, value):
        # validate type linearGradientType
        pass
    def validate_radialGradientType(self, value):
        # validate type radialGradientType
        pass
    def validate_patternType(self, value):
        # validate type patternType
        pass
    def validate_filterType(self, value):
        # validate type filterType
        pass
    def validate_animateTransformType(self, value):
        # validate type animateTransformType
        pass
    def get_show(self): return self.show
    def set_show(self, show): self.show = show
    def get_onfocusout(self): return self.onfocusout
    def set_onfocusout(self, onfocusout): self.onfocusout = onfocusout
    def get_actuate(self): return self.actuate
    def set_actuate(self, actuate): self.actuate = actuate
    def get_onmousedown(self): return self.onmousedown
    def set_onmousedown(self, onmousedown): self.onmousedown = onmousedown
    def get_href(self): return self.href
    def set_href(self, href): self.href = href
    def get_arcrole(self): return self.arcrole
    def set_arcrole(self, arcrole): self.arcrole = arcrole
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_onload(self): return self.onload
    def set_onload(self, onload): self.onload = onload
    def get_title_attr(self): return self.title_attr
    def set_title_attr(self, title_attr): self.title_attr = title_attr
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_requiredExtensions(self): return self.requiredExtensions
    def set_requiredExtensions(self, requiredExtensions): self.requiredExtensions = requiredExtensions
    def get_transform(self): return self.transform
    def set_transform(self, transform): self.transform = transform
    def get_onmouseup(self): return self.onmouseup
    def set_onmouseup(self, onmouseup): self.onmouseup = onmouseup
    def get_role(self): return self.role
    def set_role(self, role): self.role = role
    def get_onactivate(self): return self.onactivate
    def set_onactivate(self, onactivate): self.onactivate = onactivate
    def get_onmousemove(self): return self.onmousemove
    def set_onmousemove(self, onmousemove): self.onmousemove = onmousemove
    def get_type(self): return self.type_
    def set_type(self, type_): self.type_ = type_
    def get_onfocusin(self): return self.onfocusin
    def set_onfocusin(self, onfocusin): self.onfocusin = onfocusin
    def get_onclick(self): return self.onclick
    def set_onclick(self, onclick): self.onclick = onclick
    def get_onmouseout(self): return self.onmouseout
    def set_onmouseout(self, onmouseout): self.onmouseout = onmouseout
    def get_systemLanguage(self): return self.systemLanguage
    def set_systemLanguage(self, systemLanguage): self.systemLanguage = systemLanguage
    def get_onmouseover(self): return self.onmouseover
    def set_onmouseover(self, onmouseover): self.onmouseover = onmouseover
    def get_externalResourcesRequired(self): return self.externalResourcesRequired
    def set_externalResourcesRequired(self, externalResourcesRequired): self.externalResourcesRequired = externalResourcesRequired
    def get_class(self): return self.classxx
    def set_class(self, classxx): self.classxx = classxx
    def get_lang(self): return self.lang
    def set_lang(self, lang): self.lang = lang
    def get_target(self): return self.target
    def set_target(self, target): self.target = target
    def get_requiredFeatures(self): return self.requiredFeatures
    def set_requiredFeatures(self, requiredFeatures): self.requiredFeatures = requiredFeatures
    def get_base(self): return self.base
    def set_base(self, base): self.base = base
    def get_style_attr(self): return self.style_attr
    def set_style_attr(self, style_attr): self.style_attr = style_attr
    def export(self, outfile, level, namespace_='svg:', name_='aType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, self.internalName, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='aType')
        outfile.write('>')
        self.exportChildren(outfile, level + 1, namespace_, name_)
        outfile.write('</%s%s>\n' % (namespace_, self.internalName))
    def exportAttributes(self, outfile, level, namespace_='svg:', name_='aType'):
        if self.show is not None:
            outfile.write(' show=%s' % (quote_attrib(self.show), ))
        if self.onfocusout is not None:
            outfile.write(' onfocusout=%s' % (quote_attrib(self.onfocusout), ))
        if self.actuate is not None:
            outfile.write(' actuate=%s' % (quote_attrib(self.actuate), ))
        if self.onmousedown is not None:
            outfile.write(' onmousedown=%s' % (quote_attrib(self.onmousedown), ))
        if self.href is not None:
            outfile.write(' href=%s' % (quote_attrib(self.href), ))
        if self.arcrole is not None:
            outfile.write(' arcrole=%s' % (quote_attrib(self.arcrole), ))
        if self.id is not None:
            outfile.write(' id=%s' % (quote_attrib(self.id), ))
        if self.onload is not None:
            outfile.write(' onload=%s' % (quote_attrib(self.onload), ))
        if self.title_attr is not None:
            outfile.write(' title_attr=%s' % (quote_attrib(self.title_attr), ))
        if self.space is not None:
            outfile.write(' space=%s' % (quote_attrib(self.space), ))
        if self.requiredExtensions is not None:
            outfile.write(' requiredExtensions=%s' % (quote_attrib(self.requiredExtensions), ))
        if self.transform is not None:
            outfile.write(' transform=%s' % (quote_attrib(self.transform), ))
        if self.onmouseup is not None:
            outfile.write(' onmouseup=%s' % (quote_attrib(self.onmouseup), ))
        if self.role is not None:
            outfile.write(' role=%s' % (quote_attrib(self.role), ))
        if self.onactivate is not None:
            outfile.write(' onactivate=%s' % (quote_attrib(self.onactivate), ))
        if self.onmousemove is not None:
            outfile.write(' onmousemove=%s' % (quote_attrib(self.onmousemove), ))
        if self.type_ is not None:
            outfile.write(' type=%s' % (quote_attrib(self.type_), ))
        if self.onfocusin is not None:
            outfile.write(' onfocusin=%s' % (quote_attrib(self.onfocusin), ))
        if self.onclick is not None:
            outfile.write(' onclick=%s' % (quote_attrib(self.onclick), ))
        if self.onmouseout is not None:
            outfile.write(' onmouseout=%s' % (quote_attrib(self.onmouseout), ))
        if self.systemLanguage is not None:
            outfile.write(' systemLanguage=%s' % (quote_attrib(self.systemLanguage), ))
        if self.onmouseover is not None:
            outfile.write(' onmouseover=%s' % (quote_attrib(self.onmouseover), ))
        if self.externalResourcesRequired is not None:
            outfile.write(' externalResourcesRequired="%s"' % str_lower(str(self.externalResourcesRequired)))
        if self.classxx is not None:
            outfile.write(' class=%s' % (quote_attrib(self.classxx), ))
        if self.lang is not None:
            outfile.write(' lang=%s' % (quote_attrib(self.lang), ))
        if self.target is not None:
            outfile.write(' target=%s' % (quote_attrib(self.target), ))
        if self.requiredFeatures is not None:
            outfile.write(' requiredFeatures=%s' % (quote_attrib(self.requiredFeatures), ))
        if self.base is not None:
            outfile.write(' base=%s' % (quote_attrib(self.base), ))
        if self.style_attr is not None:
            outfile.write(' style_attr=%s' % (quote_attrib(self.style_attr), ))
    def exportChildren(self, outfile, level, namespace_='svg:', name_='aType'):
        for item_ in self.content_:
            item_.export(outfile, level, item_.name, namespace_)
    def hasContent_(self):
        if (
         len(self.internalElements)>0
            ):
            return True
        else:
            return False
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('show'):
            self.show = attrs.get('show').value
        if attrs.get('onfocusout'):
            self.onfocusout = attrs.get('onfocusout').value
        if attrs.get('actuate'):
            self.actuate = attrs.get('actuate').value
        if attrs.get('onmousedown'):
            self.onmousedown = attrs.get('onmousedown').value
        if attrs.get('href'):
            self.href = attrs.get('href').value
        if attrs.get('arcrole'):
            self.arcrole = attrs.get('arcrole').value
        if attrs.get('id'):
            self.id = attrs.get('id').value
        if attrs.get('onload'):
            self.onload = attrs.get('onload').value
        if attrs.get('title_attr'):
            self.title_attr = attrs.get('title_attr').value
        if attrs.get('space'):
            self.space = attrs.get('space').value
        if attrs.get('requiredExtensions'):
            self.requiredExtensions = attrs.get('requiredExtensions').value
        if attrs.get('transform'):
            self.transform = attrs.get('transform').value
        if attrs.get('onmouseup'):
            self.onmouseup = attrs.get('onmouseup').value
        if attrs.get('role'):
            self.role = attrs.get('role').value
        if attrs.get('onactivate'):
            self.onactivate = attrs.get('onactivate').value
        if attrs.get('onmousemove'):
            self.onmousemove = attrs.get('onmousemove').value
        if attrs.get('type'):
            self.type_ = attrs.get('type').value
        if attrs.get('onfocusin'):
            self.onfocusin = attrs.get('onfocusin').value
        if attrs.get('onclick'):
            self.onclick = attrs.get('onclick').value
        if attrs.get('onmouseout'):
            self.onmouseout = attrs.get('onmouseout').value
        if attrs.get('systemLanguage'):
            self.systemLanguage = attrs.get('systemLanguage').value
        if attrs.get('onmouseover'):
            self.onmouseover = attrs.get('onmouseover').value
        if attrs.get('externalResourcesRequired'):
            if attrs.get('externalResourcesRequired').value in ('true', '1'):
                self.externalResourcesRequired = True
            elif attrs.get('externalResourcesRequired').value in ('false', '0'):
                self.externalResourcesRequired = False
            else:
                raise ValueError('Bad boolean attribute (externalResourcesRequired)')
        if attrs.get('class'):
            self.classxx = attrs.get('class').value
        if attrs.get('lang'):
            self.lang = attrs.get('lang').value
        if attrs.get('target'):
            self.target = attrs.get('target').value
        if attrs.get('requiredFeatures'):
            self.requiredFeatures = attrs.get('requiredFeatures').value
        if attrs.get('base'):
            self.base = attrs.get('base').value
        if attrs.get('style_attr'):
            self.style_attr = attrs.get('style_attr').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'desc':
            childobj_ = descType.factory()
            childobj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'desc', childobj_)
            self.content_.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'title':
            childobj_ = titleType.factory()
            childobj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'title', childobj_)
            self.content_.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'metadata':
            childobj_ = metadataType.factory()
            childobj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'metadata', childobj_)
            self.content_.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'defs':
            childobj_ = defsType.factory()
            childobj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'defs', childobj_)
            self.content_.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'path':
            childobj_ = pathType.factory()
            childobj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'path', childobj_)
            self.content_.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'text':
            childobj_ = textType.factory()
            childobj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'text', childobj_)
            self.content_.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'rect':
            childobj_ = rectType.factory()
            childobj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'rect', childobj_)
            self.content_.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'circle':
            childobj_ = circleType.factory()
            childobj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'circle', childobj_)
            self.content_.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'ellipse':
            childobj_ = ellipseType.factory()
            childobj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'ellipse', childobj_)
            self.content_.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'line':
            childobj_ = lineType.factory()
            childobj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'line', childobj_)
            self.content_.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'polyline':
            childobj_ = polylineType.factory()
            childobj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'polyline', childobj_)
            self.content_.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'polygon':
            childobj_ = polygonType.factory()
            childobj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'polygon', childobj_)
            self.content_.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'use':
            childobj_ = useType.factory()
            childobj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'use', childobj_)
            self.content_.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'image':
            childobj_ = imageType.factory()
            childobj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'image', childobj_)
            self.content_.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'svg':
            childobj_ = svgType.factory()
            childobj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'svg', childobj_)
            self.content_.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'g':
            childobj_ = gType.factory()
            childobj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'g', childobj_)
            self.content_.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'view':
            childobj_ = viewType.factory()
            childobj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'view', childobj_)
            self.content_.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'switch':
            childobj_ = switchType.factory()
            childobj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'switch', childobj_)
            self.content_.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'a':
            childobj_ = aType.factory()
            childobj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'a', childobj_)
            self.content_.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'altGlyphDef':
            childobj_ = altGlyphDefType.factory()
            childobj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'altGlyphDef', childobj_)
            self.content_.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'script':
            childobj_ = scriptType.factory()
            childobj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'script', childobj_)
            self.content_.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'style':
            childobj_ = styleType.factory()
            childobj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'style', childobj_)
            self.content_.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'symbol':
            childobj_ = symbolType.factory()
            childobj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'symbol', childobj_)
            self.content_.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'marker':
            childobj_ = markerType.factory()
            childobj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'marker', childobj_)
            self.content_.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'clipPath':
            childobj_ = clipPathType.factory()
            childobj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'clipPath', childobj_)
            self.content_.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'mask':
            childobj_ = maskType.factory()
            childobj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'mask', childobj_)
            self.content_.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'linearGradient':
            childobj_ = linearGradientType.factory()
            childobj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'linearGradient', childobj_)
            self.content_.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'radialGradient':
            childobj_ = radialGradientType.factory()
            childobj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'radialGradient', childobj_)
            self.content_.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'pattern':
            childobj_ = patternType.factory()
            childobj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'pattern', childobj_)
            self.content_.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'filter':
            childobj_ = filterType.factory()
            childobj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'filter', childobj_)
            self.content_.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'cursor':
            childobj_ = cursorType.factory()
            childobj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'cursor', childobj_)
            self.content_.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'font':
            childobj_ = fontType.factory()
            childobj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'font', childobj_)
            self.content_.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animate':
            childobj_ = animateType.factory()
            childobj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'animate', childobj_)
            self.content_.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'set':
            childobj_ = setType.factory()
            childobj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'set', childobj_)
            self.content_.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animateMotion':
            childobj_ = animateMotionType.factory()
            childobj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'animateMotion', childobj_)
            self.content_.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animateColor':
            childobj_ = animateColorType.factory()
            childobj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'animateColor', childobj_)
            self.content_.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animateTransform':
            childobj_ = animateTransformType.factory()
            childobj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'animateTransform', childobj_)
            self.content_.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'color-profile':
            childobj_ = color_profile.factory()
            childobj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'color-profile', childobj_)
            self.content_.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'font-face':
            childobj_ = font_face.factory()
            childobj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'font-face', childobj_)
            self.content_.append(obj_)
        elif child_.nodeType == Node.TEXT_NODE:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.nodeValue)
            self.content_.append(obj_)
# end class aType


class viewType(object):
    subclass = None
    superclass = None
    def __init__(self, viewTarget=None, viewBox=None, base=None, id=None, preserveAspectRatio=None, zoomAndPan='magnify', externalResourcesRequired=None, valueOf_=''):
        self.internalName = "view"
        self.viewTarget = viewTarget
        self.viewBox = viewBox
        self.base = base
        self.id = id
        self.preserveAspectRatio = preserveAspectRatio
        self.zoomAndPan = zoomAndPan
        self.externalResourcesRequired = externalResourcesRequired
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if viewType.subclass:
            return viewType.subclass(*args_, **kwargs_)
        else:
            return viewType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_viewTarget(self): return self.viewTarget
    def set_viewTarget(self, viewTarget): self.viewTarget = viewTarget
    def get_viewBox(self): return self.viewBox
    def set_viewBox(self, viewBox): self.viewBox = viewBox
    def get_base(self): return self.base
    def set_base(self, base): self.base = base
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_preserveAspectRatio(self): return self.preserveAspectRatio
    def set_preserveAspectRatio(self, preserveAspectRatio): self.preserveAspectRatio = preserveAspectRatio
    def get_zoomAndPan(self): return self.zoomAndPan
    def set_zoomAndPan(self, zoomAndPan): self.zoomAndPan = zoomAndPan
    def get_externalResourcesRequired(self): return self.externalResourcesRequired
    def set_externalResourcesRequired(self, externalResourcesRequired): self.externalResourcesRequired = externalResourcesRequired
    def getValueOf_(self): return self.valueOf_
    def setValueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='svg:', name_='viewType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, self.internalName, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='viewType')
        outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='svg:', name_='viewType'):
        if self.viewTarget is not None:
            outfile.write(' viewTarget=%s' % (quote_attrib(self.viewTarget), ))
        if self.viewBox is not None:
            outfile.write(' viewBox=%s' % (quote_attrib(self.viewBox), ))
        if self.base is not None:
            outfile.write(' base=%s' % (quote_attrib(self.base), ))
        if self.id is not None:
            outfile.write(' id=%s' % (quote_attrib(self.id), ))
        if self.preserveAspectRatio is not None:
            outfile.write(' preserveAspectRatio=%s' % (quote_attrib(self.preserveAspectRatio), ))
        if self.zoomAndPan is not None:
            outfile.write(' zoomAndPan=%s' % (quote_attrib(self.zoomAndPan), ))
        if self.externalResourcesRequired is not None:
            outfile.write(' externalResourcesRequired="%s"' % str_lower(str(self.externalResourcesRequired)))
    def exportChildren(self, outfile, level, namespace_='svg:', name_='viewType'):
        if self.valueOf_.find('![CDATA')>-1:
            value=quote_xml('%s' % self.valueOf_)
            value=value.replace('![CDATA','<![CDATA')
            value=value.replace(']]',']]>')
            outfile.write(value)
        else:
            outfile.write(quote_xml('%s' % self.valueOf_))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        self.valueOf_ = ''
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('viewTarget'):
            self.viewTarget = attrs.get('viewTarget').value
        if attrs.get('viewBox'):
            self.viewBox = attrs.get('viewBox').value
        if attrs.get('base'):
            self.base = attrs.get('base').value
        if attrs.get('id'):
            self.id = attrs.get('id').value
        if attrs.get('preserveAspectRatio'):
            self.preserveAspectRatio = attrs.get('preserveAspectRatio').value
        if attrs.get('zoomAndPan'):
            self.zoomAndPan = attrs.get('zoomAndPan').value
        if attrs.get('externalResourcesRequired'):
            if attrs.get('externalResourcesRequired').value in ('true', '1'):
                self.externalResourcesRequired = True
            elif attrs.get('externalResourcesRequired').value in ('false', '0'):
                self.externalResourcesRequired = False
            else:
                raise ValueError('Bad boolean attribute (externalResourcesRequired)')
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.TEXT_NODE:
            self.valueOf_ += child_.nodeValue
        elif child_.nodeType == Node.CDATA_SECTION_NODE:
            self.valueOf_ += '![CDATA['+child_.nodeValue+']]'
# end class viewType


class scriptType(object):
    subclass = None
    superclass = None
    def __init__(self, show='other', title=None, actuate=None, href=None, role=None, arcrole=None, base=None, externalResourcesRequired=None, type_=None, id=None, valueOf_='', mixedclass_=None, content_=None):
        self.internalName = "script"
        self.show = show
        self.title = title
        self.actuate = actuate
        self.href = href
        self.role = role
        self.arcrole = arcrole
        self.base = base
        self.externalResourcesRequired = externalResourcesRequired
        self.type_ = type_
        self.id = id
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
    def factory(*args_, **kwargs_):
        if scriptType.subclass:
            return scriptType.subclass(*args_, **kwargs_)
        else:
            return scriptType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_show(self): return self.show
    def set_show(self, show): self.show = show
    def get_title(self): return self.title
    def set_title(self, title): self.title = title
    def get_actuate(self): return self.actuate
    def set_actuate(self, actuate): self.actuate = actuate
    def get_href(self): return self.href
    def set_href(self, href): self.href = href
    def get_role(self): return self.role
    def set_role(self, role): self.role = role
    def get_arcrole(self): return self.arcrole
    def set_arcrole(self, arcrole): self.arcrole = arcrole
    def get_base(self): return self.base
    def set_base(self, base): self.base = base
    def get_externalResourcesRequired(self): return self.externalResourcesRequired
    def set_externalResourcesRequired(self, externalResourcesRequired): self.externalResourcesRequired = externalResourcesRequired
    def get_type(self): return self.type_
    def set_type(self, type_): self.type_ = type_
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def getValueOf_(self): return self.valueOf_
    def setValueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='svg:', name_='scriptType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, self.internalName, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='scriptType')
        outfile.write('>')
        self.exportChildren(outfile, level + 1, namespace_, name_)
        outfile.write('</%s%s>\n' % (namespace_, self.internalName))
    def exportAttributes(self, outfile, level, namespace_='svg:', name_='scriptType'):
        if self.show is not None:
            outfile.write(' show=%s' % (quote_attrib(self.show), ))
        if self.title is not None:
            outfile.write(' title=%s' % (quote_attrib(self.title), ))
        if self.actuate is not None:
            outfile.write(' actuate=%s' % (quote_attrib(self.actuate), ))
        if self.href is not None:
            outfile.write(' href=%s' % (quote_attrib(self.href), ))
        if self.role is not None:
            outfile.write(' role=%s' % (quote_attrib(self.role), ))
        if self.arcrole is not None:
            outfile.write(' arcrole=%s' % (quote_attrib(self.arcrole), ))
        if self.base is not None:
            outfile.write(' base=%s' % (quote_attrib(self.base), ))
        if self.externalResourcesRequired is not None:
            outfile.write(' externalResourcesRequired="%s"' % str_lower(str(self.externalResourcesRequired)))
        if self.type_ is not None:
            outfile.write(' type=%s' % (quote_attrib(self.type_), ))
        if self.id is not None:
            outfile.write(' id=%s' % (quote_attrib(self.id), ))
    def exportChildren(self, outfile, level, namespace_='svg:', name_='scriptType'):
        if self.valueOf_.find('![CDATA')>-1:
            value=quote_xml('%s' % self.valueOf_)
            value=value.replace('![CDATA','<![CDATA')
            value=value.replace(']]',']]>')
            outfile.write(value)
        else:
            outfile.write(quote_xml('%s' % self.valueOf_))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        self.valueOf_ = ''
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('show'):
            self.show = attrs.get('show').value
        if attrs.get('title'):
            self.title = attrs.get('title').value
        if attrs.get('actuate'):
            self.actuate = attrs.get('actuate').value
        if attrs.get('href'):
            self.href = attrs.get('href').value
        if attrs.get('role'):
            self.role = attrs.get('role').value
        if attrs.get('arcrole'):
            self.arcrole = attrs.get('arcrole').value
        if attrs.get('base'):
            self.base = attrs.get('base').value
        if attrs.get('externalResourcesRequired'):
            if attrs.get('externalResourcesRequired').value in ('true', '1'):
                self.externalResourcesRequired = True
            elif attrs.get('externalResourcesRequired').value in ('false', '0'):
                self.externalResourcesRequired = False
            else:
                raise ValueError('Bad boolean attribute (externalResourcesRequired)')
        if attrs.get('type'):
            self.type_ = attrs.get('type').value
        if attrs.get('id'):
            self.id = attrs.get('id').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.TEXT_NODE:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.nodeValue)
            self.content_.append(obj_)
        if child_.nodeType == Node.TEXT_NODE:
            self.valueOf_ += child_.nodeValue
        elif child_.nodeType == Node.CDATA_SECTION_NODE:
            self.valueOf_ += '![CDATA['+child_.nodeValue+']]'
# end class scriptType


class animateType(object):
    subclass = None
    superclass = None
    def __init__(self, keySplines=None, repeatCount=None, additive='replace', repeatDur=None, id=None, fill='remove', end=None, calcMode='linear', min=None, requiredExtensions=None, to=None, dur=None, onend=None, begin=None, max=None, onbegin=None, systemLanguage=None, accumulate='none', fromxx=None, externalResourcesRequired=None, by=None, restart='always', requiredFeatures=None, base=None, values=None, keyTimes=None, onrepeat=None, valueOf_=''):
        self.internalName = "animate"
        self.keySplines = keySplines
        self.repeatCount = repeatCount
        self.additive = additive
        self.repeatDur = repeatDur
        self.id = id
        self.fill = fill
        self.end = end
        self.calcMode = calcMode
        self.min = min
        self.requiredExtensions = requiredExtensions
        self.to = to
        self.dur = dur
        self.onend = onend
        self.begin = begin
        self.max = max
        self.onbegin = onbegin
        self.systemLanguage = systemLanguage
        self.accumulate = accumulate
        self.fromxx = fromxx
        self.externalResourcesRequired = externalResourcesRequired
        self.by = by
        self.restart = restart
        self.requiredFeatures = requiredFeatures
        self.base = base
        self.values = values
        self.keyTimes = keyTimes
        self.onrepeat = onrepeat
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if animateType.subclass:
            return animateType.subclass(*args_, **kwargs_)
        else:
            return animateType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_keySplines(self): return self.keySplines
    def set_keySplines(self, keySplines): self.keySplines = keySplines
    def get_repeatCount(self): return self.repeatCount
    def set_repeatCount(self, repeatCount): self.repeatCount = repeatCount
    def get_additive(self): return self.additive
    def set_additive(self, additive): self.additive = additive
    def get_repeatDur(self): return self.repeatDur
    def set_repeatDur(self, repeatDur): self.repeatDur = repeatDur
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_fill(self): return self.fill
    def set_fill(self, fill): self.fill = fill
    def get_end(self): return self.end
    def set_end(self, end): self.end = end
    def get_calcMode(self): return self.calcMode
    def set_calcMode(self, calcMode): self.calcMode = calcMode
    def get_min(self): return self.min
    def set_min(self, min): self.min = min
    def get_requiredExtensions(self): return self.requiredExtensions
    def set_requiredExtensions(self, requiredExtensions): self.requiredExtensions = requiredExtensions
    def get_to(self): return self.to
    def set_to(self, to): self.to = to
    def get_dur(self): return self.dur
    def set_dur(self, dur): self.dur = dur
    def get_onend(self): return self.onend
    def set_onend(self, onend): self.onend = onend
    def get_begin(self): return self.begin
    def set_begin(self, begin): self.begin = begin
    def get_max(self): return self.max
    def set_max(self, max): self.max = max
    def get_onbegin(self): return self.onbegin
    def set_onbegin(self, onbegin): self.onbegin = onbegin
    def get_systemLanguage(self): return self.systemLanguage
    def set_systemLanguage(self, systemLanguage): self.systemLanguage = systemLanguage
    def get_accumulate(self): return self.accumulate
    def set_accumulate(self, accumulate): self.accumulate = accumulate
    def get_from(self): return self.fromxx
    def set_from(self, fromxx): self.fromxx = fromxx
    def get_externalResourcesRequired(self): return self.externalResourcesRequired
    def set_externalResourcesRequired(self, externalResourcesRequired): self.externalResourcesRequired = externalResourcesRequired
    def get_by(self): return self.by
    def set_by(self, by): self.by = by
    def get_restart(self): return self.restart
    def set_restart(self, restart): self.restart = restart
    def get_requiredFeatures(self): return self.requiredFeatures
    def set_requiredFeatures(self, requiredFeatures): self.requiredFeatures = requiredFeatures
    def get_base(self): return self.base
    def set_base(self, base): self.base = base
    def get_values(self): return self.values
    def set_values(self, values): self.values = values
    def get_keyTimes(self): return self.keyTimes
    def set_keyTimes(self, keyTimes): self.keyTimes = keyTimes
    def get_onrepeat(self): return self.onrepeat
    def set_onrepeat(self, onrepeat): self.onrepeat = onrepeat
    def getValueOf_(self): return self.valueOf_
    def setValueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='svg:', name_='animateType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, self.internalName, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='animateType')
        outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='svg:', name_='animateType'):
        if self.keySplines is not None:
            outfile.write(' keySplines=%s' % (quote_attrib(self.keySplines), ))
        if self.repeatCount is not None:
            outfile.write(' repeatCount=%s' % (quote_attrib(self.repeatCount), ))
        if self.additive is not None:
            outfile.write(' additive=%s' % (quote_attrib(self.additive), ))
        if self.repeatDur is not None:
            outfile.write(' repeatDur=%s' % (quote_attrib(self.repeatDur), ))
        if self.id is not None:
            outfile.write(' id=%s' % (quote_attrib(self.id), ))
        if self.fill is not None:
            outfile.write(' fill=%s' % (quote_attrib(self.fill), ))
        if self.end is not None:
            outfile.write(' end=%s' % (quote_attrib(self.end), ))
        if self.calcMode is not None:
            outfile.write(' calcMode=%s' % (quote_attrib(self.calcMode), ))
        if self.min is not None:
            outfile.write(' min=%s' % (quote_attrib(self.min), ))
        if self.requiredExtensions is not None:
            outfile.write(' requiredExtensions=%s' % (quote_attrib(self.requiredExtensions), ))
        if self.to is not None:
            outfile.write(' to=%s' % (quote_attrib(self.to), ))
        if self.dur is not None:
            outfile.write(' dur=%s' % (quote_attrib(self.dur), ))
        if self.onend is not None:
            outfile.write(' onend=%s' % (quote_attrib(self.onend), ))
        if self.begin is not None:
            outfile.write(' begin=%s' % (quote_attrib(self.begin), ))
        if self.max is not None:
            outfile.write(' max=%s' % (quote_attrib(self.max), ))
        if self.onbegin is not None:
            outfile.write(' onbegin=%s' % (quote_attrib(self.onbegin), ))
        if self.systemLanguage is not None:
            outfile.write(' systemLanguage=%s' % (quote_attrib(self.systemLanguage), ))
        if self.accumulate is not None:
            outfile.write(' accumulate=%s' % (quote_attrib(self.accumulate), ))
        if self.fromxx is not None:
            outfile.write(' from=%s' % (quote_attrib(self.fromxx), ))
        if self.externalResourcesRequired is not None:
            outfile.write(' externalResourcesRequired="%s"' % str_lower(str(self.externalResourcesRequired)))
        if self.by is not None:
            outfile.write(' by=%s' % (quote_attrib(self.by), ))
        if self.restart is not None:
            outfile.write(' restart=%s' % (quote_attrib(self.restart), ))
        if self.requiredFeatures is not None:
            outfile.write(' requiredFeatures=%s' % (quote_attrib(self.requiredFeatures), ))
        if self.base is not None:
            outfile.write(' base=%s' % (quote_attrib(self.base), ))
        if self.values is not None:
            outfile.write(' values=%s' % (quote_attrib(self.values), ))
        if self.keyTimes is not None:
            outfile.write(' keyTimes=%s' % (quote_attrib(self.keyTimes), ))
        if self.onrepeat is not None:
            outfile.write(' onrepeat=%s' % (quote_attrib(self.onrepeat), ))
    def exportChildren(self, outfile, level, namespace_='svg:', name_='animateType'):
        if self.valueOf_.find('![CDATA')>-1:
            value=quote_xml('%s' % self.valueOf_)
            value=value.replace('![CDATA','<![CDATA')
            value=value.replace(']]',']]>')
            outfile.write(value)
        else:
            outfile.write(quote_xml('%s' % self.valueOf_))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        self.valueOf_ = ''
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('keySplines'):
            self.keySplines = attrs.get('keySplines').value
        if attrs.get('repeatCount'):
            self.repeatCount = attrs.get('repeatCount').value
        if attrs.get('additive'):
            self.additive = attrs.get('additive').value
        if attrs.get('repeatDur'):
            self.repeatDur = attrs.get('repeatDur').value
        if attrs.get('id'):
            self.id = attrs.get('id').value
        if attrs.get('fill'):
            self.fill = attrs.get('fill').value
        if attrs.get('end'):
            self.end = attrs.get('end').value
        if attrs.get('calcMode'):
            self.calcMode = attrs.get('calcMode').value
        if attrs.get('min'):
            self.min = attrs.get('min').value
        if attrs.get('requiredExtensions'):
            self.requiredExtensions = attrs.get('requiredExtensions').value
        if attrs.get('to'):
            self.to = attrs.get('to').value
        if attrs.get('dur'):
            self.dur = attrs.get('dur').value
        if attrs.get('onend'):
            self.onend = attrs.get('onend').value
        if attrs.get('begin'):
            self.begin = attrs.get('begin').value
        if attrs.get('max'):
            self.max = attrs.get('max').value
        if attrs.get('onbegin'):
            self.onbegin = attrs.get('onbegin').value
        if attrs.get('systemLanguage'):
            self.systemLanguage = attrs.get('systemLanguage').value
        if attrs.get('accumulate'):
            self.accumulate = attrs.get('accumulate').value
        if attrs.get('from'):
            self.fromxx = attrs.get('from').value
        if attrs.get('externalResourcesRequired'):
            if attrs.get('externalResourcesRequired').value in ('true', '1'):
                self.externalResourcesRequired = True
            elif attrs.get('externalResourcesRequired').value in ('false', '0'):
                self.externalResourcesRequired = False
            else:
                raise ValueError('Bad boolean attribute (externalResourcesRequired)')
        if attrs.get('by'):
            self.by = attrs.get('by').value
        if attrs.get('restart'):
            self.restart = attrs.get('restart').value
        if attrs.get('requiredFeatures'):
            self.requiredFeatures = attrs.get('requiredFeatures').value
        if attrs.get('base'):
            self.base = attrs.get('base').value
        if attrs.get('values'):
            self.values = attrs.get('values').value
        if attrs.get('keyTimes'):
            self.keyTimes = attrs.get('keyTimes').value
        if attrs.get('onrepeat'):
            self.onrepeat = attrs.get('onrepeat').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.TEXT_NODE:
            self.valueOf_ += child_.nodeValue
        elif child_.nodeType == Node.CDATA_SECTION_NODE:
            self.valueOf_ += '![CDATA['+child_.nodeValue+']]'
# end class animateType


class setType(object):
    subclass = None
    superclass = None
    def __init__(self, begin=None, onbegin=None, end=None, dur=None, requiredExtensions=None, fill='remove', max=None, systemLanguage=None, min=None, to=None, requiredFeatures=None, base=None, repeatCount=None, externalResourcesRequired=None, onend=None, repeatDur=None, id=None, restart='always', onrepeat=None, valueOf_=''):
        self.internalName = "set"
        self.begin = begin
        self.onbegin = onbegin
        self.end = end
        self.dur = dur
        self.requiredExtensions = requiredExtensions
        self.fill = fill
        self.max = max
        self.systemLanguage = systemLanguage
        self.min = min
        self.to = to
        self.requiredFeatures = requiredFeatures
        self.base = base
        self.repeatCount = repeatCount
        self.externalResourcesRequired = externalResourcesRequired
        self.onend = onend
        self.repeatDur = repeatDur
        self.id = id
        self.restart = restart
        self.onrepeat = onrepeat
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if setType.subclass:
            return setType.subclass(*args_, **kwargs_)
        else:
            return setType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_begin(self): return self.begin
    def set_begin(self, begin): self.begin = begin
    def get_onbegin(self): return self.onbegin
    def set_onbegin(self, onbegin): self.onbegin = onbegin
    def get_end(self): return self.end
    def set_end(self, end): self.end = end
    def get_dur(self): return self.dur
    def set_dur(self, dur): self.dur = dur
    def get_requiredExtensions(self): return self.requiredExtensions
    def set_requiredExtensions(self, requiredExtensions): self.requiredExtensions = requiredExtensions
    def get_fill(self): return self.fill
    def set_fill(self, fill): self.fill = fill
    def get_max(self): return self.max
    def set_max(self, max): self.max = max
    def get_systemLanguage(self): return self.systemLanguage
    def set_systemLanguage(self, systemLanguage): self.systemLanguage = systemLanguage
    def get_min(self): return self.min
    def set_min(self, min): self.min = min
    def get_to(self): return self.to
    def set_to(self, to): self.to = to
    def get_requiredFeatures(self): return self.requiredFeatures
    def set_requiredFeatures(self, requiredFeatures): self.requiredFeatures = requiredFeatures
    def get_base(self): return self.base
    def set_base(self, base): self.base = base
    def get_repeatCount(self): return self.repeatCount
    def set_repeatCount(self, repeatCount): self.repeatCount = repeatCount
    def get_externalResourcesRequired(self): return self.externalResourcesRequired
    def set_externalResourcesRequired(self, externalResourcesRequired): self.externalResourcesRequired = externalResourcesRequired
    def get_onend(self): return self.onend
    def set_onend(self, onend): self.onend = onend
    def get_repeatDur(self): return self.repeatDur
    def set_repeatDur(self, repeatDur): self.repeatDur = repeatDur
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_restart(self): return self.restart
    def set_restart(self, restart): self.restart = restart
    def get_onrepeat(self): return self.onrepeat
    def set_onrepeat(self, onrepeat): self.onrepeat = onrepeat
    def getValueOf_(self): return self.valueOf_
    def setValueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='svg:', name_='setType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, self.internalName, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='setType')
        outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='svg:', name_='setType'):
        if self.begin is not None:
            outfile.write(' begin=%s' % (quote_attrib(self.begin), ))
        if self.onbegin is not None:
            outfile.write(' onbegin=%s' % (quote_attrib(self.onbegin), ))
        if self.end is not None:
            outfile.write(' end=%s' % (quote_attrib(self.end), ))
        if self.dur is not None:
            outfile.write(' dur=%s' % (quote_attrib(self.dur), ))
        if self.requiredExtensions is not None:
            outfile.write(' requiredExtensions=%s' % (quote_attrib(self.requiredExtensions), ))
        if self.fill is not None:
            outfile.write(' fill=%s' % (quote_attrib(self.fill), ))
        if self.max is not None:
            outfile.write(' max=%s' % (quote_attrib(self.max), ))
        if self.systemLanguage is not None:
            outfile.write(' systemLanguage=%s' % (quote_attrib(self.systemLanguage), ))
        if self.min is not None:
            outfile.write(' min=%s' % (quote_attrib(self.min), ))
        if self.to is not None:
            outfile.write(' to=%s' % (quote_attrib(self.to), ))
        if self.requiredFeatures is not None:
            outfile.write(' requiredFeatures=%s' % (quote_attrib(self.requiredFeatures), ))
        if self.base is not None:
            outfile.write(' base=%s' % (quote_attrib(self.base), ))
        if self.repeatCount is not None:
            outfile.write(' repeatCount=%s' % (quote_attrib(self.repeatCount), ))
        if self.externalResourcesRequired is not None:
            outfile.write(' externalResourcesRequired="%s"' % str_lower(str(self.externalResourcesRequired)))
        if self.onend is not None:
            outfile.write(' onend=%s' % (quote_attrib(self.onend), ))
        if self.repeatDur is not None:
            outfile.write(' repeatDur=%s' % (quote_attrib(self.repeatDur), ))
        if self.id is not None:
            outfile.write(' id=%s' % (quote_attrib(self.id), ))
        if self.restart is not None:
            outfile.write(' restart=%s' % (quote_attrib(self.restart), ))
        if self.onrepeat is not None:
            outfile.write(' onrepeat=%s' % (quote_attrib(self.onrepeat), ))
    def exportChildren(self, outfile, level, namespace_='svg:', name_='setType'):
        if self.valueOf_.find('![CDATA')>-1:
            value=quote_xml('%s' % self.valueOf_)
            value=value.replace('![CDATA','<![CDATA')
            value=value.replace(']]',']]>')
            outfile.write(value)
        else:
            outfile.write(quote_xml('%s' % self.valueOf_))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        self.valueOf_ = ''
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('begin'):
            self.begin = attrs.get('begin').value
        if attrs.get('onbegin'):
            self.onbegin = attrs.get('onbegin').value
        if attrs.get('end'):
            self.end = attrs.get('end').value
        if attrs.get('dur'):
            self.dur = attrs.get('dur').value
        if attrs.get('requiredExtensions'):
            self.requiredExtensions = attrs.get('requiredExtensions').value
        if attrs.get('fill'):
            self.fill = attrs.get('fill').value
        if attrs.get('max'):
            self.max = attrs.get('max').value
        if attrs.get('systemLanguage'):
            self.systemLanguage = attrs.get('systemLanguage').value
        if attrs.get('min'):
            self.min = attrs.get('min').value
        if attrs.get('to'):
            self.to = attrs.get('to').value
        if attrs.get('requiredFeatures'):
            self.requiredFeatures = attrs.get('requiredFeatures').value
        if attrs.get('base'):
            self.base = attrs.get('base').value
        if attrs.get('repeatCount'):
            self.repeatCount = attrs.get('repeatCount').value
        if attrs.get('externalResourcesRequired'):
            if attrs.get('externalResourcesRequired').value in ('true', '1'):
                self.externalResourcesRequired = True
            elif attrs.get('externalResourcesRequired').value in ('false', '0'):
                self.externalResourcesRequired = False
            else:
                raise ValueError('Bad boolean attribute (externalResourcesRequired)')
        if attrs.get('onend'):
            self.onend = attrs.get('onend').value
        if attrs.get('repeatDur'):
            self.repeatDur = attrs.get('repeatDur').value
        if attrs.get('id'):
            self.id = attrs.get('id').value
        if attrs.get('restart'):
            self.restart = attrs.get('restart').value
        if attrs.get('onrepeat'):
            self.onrepeat = attrs.get('onrepeat').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.TEXT_NODE:
            self.valueOf_ += child_.nodeValue
        elif child_.nodeType == Node.CDATA_SECTION_NODE:
            self.valueOf_ += '![CDATA['+child_.nodeValue+']]'
# end class setType


class animateMotionType(object):
    subclass = None
    superclass = None
    def __init__(self, origin=None, keySplines=None, requiredExtensions=None, fromxx=None, repeatCount=None, additive='replace', id=None, fill='remove', end=None, calcMode='linear', min=None, repeatDur=None, to=None, dur=None, onend=None, begin=None, max=None, keyPoints=None, onbegin=None, systemLanguage=None, accumulate='none', path=None, externalResourcesRequired=None, by=None, restart='always', rotate=None, requiredFeatures=None, base=None, values=None, keyTimes=None, onrepeat=None, mpath=None):
        self.internalName = "animateMotion"
        self.origin = origin
        self.keySplines = keySplines
        self.requiredExtensions = requiredExtensions
        self.fromxx = fromxx
        self.repeatCount = repeatCount
        self.additive = additive
        self.id = id
        self.fill = fill
        self.end = end
        self.calcMode = calcMode
        self.min = min
        self.repeatDur = repeatDur
        self.to = to
        self.dur = dur
        self.onend = onend
        self.begin = begin
        self.max = max
        self.keyPoints = keyPoints
        self.onbegin = onbegin
        self.systemLanguage = systemLanguage
        self.accumulate = accumulate
        self.path = path
        self.externalResourcesRequired = externalResourcesRequired
        self.by = by
        self.restart = restart
        self.rotate = rotate
        self.requiredFeatures = requiredFeatures
        self.base = base
        self.values = values
        self.keyTimes = keyTimes
        self.onrepeat = onrepeat
        self.mpath = mpath
    def factory(*args_, **kwargs_):
        if animateMotionType.subclass:
            return animateMotionType.subclass(*args_, **kwargs_)
        else:
            return animateMotionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_mpath(self): return self.mpath
    def set_mpath(self, mpath): self.mpath = mpath
    def get_origin(self): return self.origin
    def set_origin(self, origin): self.origin = origin
    def get_keySplines(self): return self.keySplines
    def set_keySplines(self, keySplines): self.keySplines = keySplines
    def get_requiredExtensions(self): return self.requiredExtensions
    def set_requiredExtensions(self, requiredExtensions): self.requiredExtensions = requiredExtensions
    def get_from(self): return self.fromxx
    def set_from(self, fromxx): self.fromxx = fromxx
    def get_repeatCount(self): return self.repeatCount
    def set_repeatCount(self, repeatCount): self.repeatCount = repeatCount
    def get_additive(self): return self.additive
    def set_additive(self, additive): self.additive = additive
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_fill(self): return self.fill
    def set_fill(self, fill): self.fill = fill
    def get_end(self): return self.end
    def set_end(self, end): self.end = end
    def get_calcMode(self): return self.calcMode
    def set_calcMode(self, calcMode): self.calcMode = calcMode
    def get_min(self): return self.min
    def set_min(self, min): self.min = min
    def get_repeatDur(self): return self.repeatDur
    def set_repeatDur(self, repeatDur): self.repeatDur = repeatDur
    def get_to(self): return self.to
    def set_to(self, to): self.to = to
    def get_dur(self): return self.dur
    def set_dur(self, dur): self.dur = dur
    def get_onend(self): return self.onend
    def set_onend(self, onend): self.onend = onend
    def get_begin(self): return self.begin
    def set_begin(self, begin): self.begin = begin
    def get_max(self): return self.max
    def set_max(self, max): self.max = max
    def get_keyPoints(self): return self.keyPoints
    def set_keyPoints(self, keyPoints): self.keyPoints = keyPoints
    def get_onbegin(self): return self.onbegin
    def set_onbegin(self, onbegin): self.onbegin = onbegin
    def get_systemLanguage(self): return self.systemLanguage
    def set_systemLanguage(self, systemLanguage): self.systemLanguage = systemLanguage
    def get_accumulate(self): return self.accumulate
    def set_accumulate(self, accumulate): self.accumulate = accumulate
    def get_path(self): return self.path
    def set_path(self, path): self.path = path
    def get_externalResourcesRequired(self): return self.externalResourcesRequired
    def set_externalResourcesRequired(self, externalResourcesRequired): self.externalResourcesRequired = externalResourcesRequired
    def get_by(self): return self.by
    def set_by(self, by): self.by = by
    def get_restart(self): return self.restart
    def set_restart(self, restart): self.restart = restart
    def get_rotate(self): return self.rotate
    def set_rotate(self, rotate): self.rotate = rotate
    def get_requiredFeatures(self): return self.requiredFeatures
    def set_requiredFeatures(self, requiredFeatures): self.requiredFeatures = requiredFeatures
    def get_base(self): return self.base
    def set_base(self, base): self.base = base
    def get_values(self): return self.values
    def set_values(self, values): self.values = values
    def get_keyTimes(self): return self.keyTimes
    def set_keyTimes(self, keyTimes): self.keyTimes = keyTimes
    def get_onrepeat(self): return self.onrepeat
    def set_onrepeat(self, onrepeat): self.onrepeat = onrepeat
    def export(self, outfile, level, namespace_='svg:', name_='animateMotionType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, self.internalName, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='animateMotionType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, self.internalName))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='svg:', name_='animateMotionType'):
        if self.origin is not None:
            outfile.write(' origin=%s' % (quote_attrib(self.origin), ))
        if self.keySplines is not None:
            outfile.write(' keySplines=%s' % (quote_attrib(self.keySplines), ))
        if self.requiredExtensions is not None:
            outfile.write(' requiredExtensions=%s' % (quote_attrib(self.requiredExtensions), ))
        if self.fromxx is not None:
            outfile.write(' from=%s' % (quote_attrib(self.fromxx), ))
        if self.repeatCount is not None:
            outfile.write(' repeatCount=%s' % (quote_attrib(self.repeatCount), ))
        if self.additive is not None:
            outfile.write(' additive=%s' % (quote_attrib(self.additive), ))
        if self.id is not None:
            outfile.write(' id=%s' % (quote_attrib(self.id), ))
        if self.fill is not None:
            outfile.write(' fill=%s' % (quote_attrib(self.fill), ))
        if self.end is not None:
            outfile.write(' end=%s' % (quote_attrib(self.end), ))
        if self.calcMode is not None:
            outfile.write(' calcMode=%s' % (quote_attrib(self.calcMode), ))
        if self.min is not None:
            outfile.write(' min=%s' % (quote_attrib(self.min), ))
        if self.repeatDur is not None:
            outfile.write(' repeatDur=%s' % (quote_attrib(self.repeatDur), ))
        if self.to is not None:
            outfile.write(' to=%s' % (quote_attrib(self.to), ))
        if self.dur is not None:
            outfile.write(' dur=%s' % (quote_attrib(self.dur), ))
        if self.onend is not None:
            outfile.write(' onend=%s' % (quote_attrib(self.onend), ))
        if self.begin is not None:
            outfile.write(' begin=%s' % (quote_attrib(self.begin), ))
        if self.max is not None:
            outfile.write(' max=%s' % (quote_attrib(self.max), ))
        if self.keyPoints is not None:
            outfile.write(' keyPoints=%s' % (quote_attrib(self.keyPoints), ))
        if self.onbegin is not None:
            outfile.write(' onbegin=%s' % (quote_attrib(self.onbegin), ))
        if self.systemLanguage is not None:
            outfile.write(' systemLanguage=%s' % (quote_attrib(self.systemLanguage), ))
        if self.accumulate is not None:
            outfile.write(' accumulate=%s' % (quote_attrib(self.accumulate), ))
        if self.path is not None:
            outfile.write(' path=%s' % (quote_attrib(self.path), ))
        if self.externalResourcesRequired is not None:
            outfile.write(' externalResourcesRequired="%s"' % str_lower(str(self.externalResourcesRequired)))
        if self.by is not None:
            outfile.write(' by=%s' % (quote_attrib(self.by), ))
        if self.restart is not None:
            outfile.write(' restart=%s' % (quote_attrib(self.restart), ))
        if self.rotate is not None:
            outfile.write(' rotate=%s' % (quote_attrib(self.rotate), ))
        if self.requiredFeatures is not None:
            outfile.write(' requiredFeatures=%s' % (quote_attrib(self.requiredFeatures), ))
        if self.base is not None:
            outfile.write(' base=%s' % (quote_attrib(self.base), ))
        if self.values is not None:
            outfile.write(' values=%s' % (quote_attrib(self.values), ))
        if self.keyTimes is not None:
            outfile.write(' keyTimes=%s' % (quote_attrib(self.keyTimes), ))
        if self.onrepeat is not None:
            outfile.write(' onrepeat=%s' % (quote_attrib(self.onrepeat), ))
    def exportChildren(self, outfile, level, namespace_='svg:', name_='animateMotionType'):
        if self.mpath:
            self.mpath.export(outfile, level, namespace_, name_='mpath')
    def hasContent_(self):
        if (
            self.mpath
            ):
            return True
        else:
            return False
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('origin'):
            self.origin = attrs.get('origin').value
        if attrs.get('keySplines'):
            self.keySplines = attrs.get('keySplines').value
        if attrs.get('requiredExtensions'):
            self.requiredExtensions = attrs.get('requiredExtensions').value
        if attrs.get('from'):
            self.fromxx = attrs.get('from').value
        if attrs.get('repeatCount'):
            self.repeatCount = attrs.get('repeatCount').value
        if attrs.get('additive'):
            self.additive = attrs.get('additive').value
        if attrs.get('id'):
            self.id = attrs.get('id').value
        if attrs.get('fill'):
            self.fill = attrs.get('fill').value
        if attrs.get('end'):
            self.end = attrs.get('end').value
        if attrs.get('calcMode'):
            self.calcMode = attrs.get('calcMode').value
        if attrs.get('min'):
            self.min = attrs.get('min').value
        if attrs.get('repeatDur'):
            self.repeatDur = attrs.get('repeatDur').value
        if attrs.get('to'):
            self.to = attrs.get('to').value
        if attrs.get('dur'):
            self.dur = attrs.get('dur').value
        if attrs.get('onend'):
            self.onend = attrs.get('onend').value
        if attrs.get('begin'):
            self.begin = attrs.get('begin').value
        if attrs.get('max'):
            self.max = attrs.get('max').value
        if attrs.get('keyPoints'):
            self.keyPoints = attrs.get('keyPoints').value
        if attrs.get('onbegin'):
            self.onbegin = attrs.get('onbegin').value
        if attrs.get('systemLanguage'):
            self.systemLanguage = attrs.get('systemLanguage').value
        if attrs.get('accumulate'):
            self.accumulate = attrs.get('accumulate').value
        if attrs.get('path'):
            self.path = attrs.get('path').value
        if attrs.get('externalResourcesRequired'):
            if attrs.get('externalResourcesRequired').value in ('true', '1'):
                self.externalResourcesRequired = True
            elif attrs.get('externalResourcesRequired').value in ('false', '0'):
                self.externalResourcesRequired = False
            else:
                raise ValueError('Bad boolean attribute (externalResourcesRequired)')
        if attrs.get('by'):
            self.by = attrs.get('by').value
        if attrs.get('restart'):
            self.restart = attrs.get('restart').value
        if attrs.get('rotate'):
            self.rotate = attrs.get('rotate').value
        if attrs.get('requiredFeatures'):
            self.requiredFeatures = attrs.get('requiredFeatures').value
        if attrs.get('base'):
            self.base = attrs.get('base').value
        if attrs.get('values'):
            self.values = attrs.get('values').value
        if attrs.get('keyTimes'):
            self.keyTimes = attrs.get('keyTimes').value
        if attrs.get('onrepeat'):
            self.onrepeat = attrs.get('onrepeat').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'mpath':
            obj_ = mpathType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            self.set_mpath(obj_)
# end class animateMotionType


class mpathType(object):
    subclass = None
    superclass = None
    def __init__(self, title=None, show='other', actuate=None, href=None, role=None, arcrole=None, base=None, externalResourcesRequired=None, type_=None, id=None, valueOf_=''):
        self.internalName = "mpath"
        self.title = title
        self.show = show
        self.actuate = actuate
        self.href = href
        self.role = role
        self.arcrole = arcrole
        self.base = base
        self.externalResourcesRequired = externalResourcesRequired
        self.type_ = type_
        self.id = id
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if mpathType.subclass:
            return mpathType.subclass(*args_, **kwargs_)
        else:
            return mpathType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_title(self): return self.title
    def set_title(self, title): self.title = title
    def get_show(self): return self.show
    def set_show(self, show): self.show = show
    def get_actuate(self): return self.actuate
    def set_actuate(self, actuate): self.actuate = actuate
    def get_href(self): return self.href
    def set_href(self, href): self.href = href
    def get_role(self): return self.role
    def set_role(self, role): self.role = role
    def get_arcrole(self): return self.arcrole
    def set_arcrole(self, arcrole): self.arcrole = arcrole
    def get_base(self): return self.base
    def set_base(self, base): self.base = base
    def get_externalResourcesRequired(self): return self.externalResourcesRequired
    def set_externalResourcesRequired(self, externalResourcesRequired): self.externalResourcesRequired = externalResourcesRequired
    def get_type(self): return self.type_
    def set_type(self, type_): self.type_ = type_
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def getValueOf_(self): return self.valueOf_
    def setValueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='svg:', name_='mpathType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, self.internalName, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='mpathType')
        outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='svg:', name_='mpathType'):
        if self.title is not None:
            outfile.write(' title=%s' % (quote_attrib(self.title), ))
        if self.show is not None:
            outfile.write(' show=%s' % (quote_attrib(self.show), ))
        if self.actuate is not None:
            outfile.write(' actuate=%s' % (quote_attrib(self.actuate), ))
        if self.href is not None:
            outfile.write(' href=%s' % (quote_attrib(self.href), ))
        if self.role is not None:
            outfile.write(' role=%s' % (quote_attrib(self.role), ))
        if self.arcrole is not None:
            outfile.write(' arcrole=%s' % (quote_attrib(self.arcrole), ))
        if self.base is not None:
            outfile.write(' base=%s' % (quote_attrib(self.base), ))
        if self.externalResourcesRequired is not None:
            outfile.write(' externalResourcesRequired="%s"' % str_lower(str(self.externalResourcesRequired)))
        if self.type_ is not None:
            outfile.write(' type=%s' % (quote_attrib(self.type_), ))
        if self.id is not None:
            outfile.write(' id=%s' % (quote_attrib(self.id), ))
    def exportChildren(self, outfile, level, namespace_='svg:', name_='mpathType'):
        if self.valueOf_.find('![CDATA')>-1:
            value=quote_xml('%s' % self.valueOf_)
            value=value.replace('![CDATA','<![CDATA')
            value=value.replace(']]',']]>')
            outfile.write(value)
        else:
            outfile.write(quote_xml('%s' % self.valueOf_))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        self.valueOf_ = ''
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('title'):
            self.title = attrs.get('title').value
        if attrs.get('show'):
            self.show = attrs.get('show').value
        if attrs.get('actuate'):
            self.actuate = attrs.get('actuate').value
        if attrs.get('href'):
            self.href = attrs.get('href').value
        if attrs.get('role'):
            self.role = attrs.get('role').value
        if attrs.get('arcrole'):
            self.arcrole = attrs.get('arcrole').value
        if attrs.get('base'):
            self.base = attrs.get('base').value
        if attrs.get('externalResourcesRequired'):
            if attrs.get('externalResourcesRequired').value in ('true', '1'):
                self.externalResourcesRequired = True
            elif attrs.get('externalResourcesRequired').value in ('false', '0'):
                self.externalResourcesRequired = False
            else:
                raise ValueError('Bad boolean attribute (externalResourcesRequired)')
        if attrs.get('type'):
            self.type_ = attrs.get('type').value
        if attrs.get('id'):
            self.id = attrs.get('id').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.TEXT_NODE:
            self.valueOf_ += child_.nodeValue
        elif child_.nodeType == Node.CDATA_SECTION_NODE:
            self.valueOf_ += '![CDATA['+child_.nodeValue+']]'
# end class mpathType


class animateColorType(object):
    subclass = None
    superclass = None
    def __init__(self, keySplines=None, repeatCount=None, additive='replace', repeatDur=None, id=None, fill='remove', end=None, calcMode='linear', min=None, requiredExtensions=None, to=None, dur=None, onend=None, begin=None, max=None, onbegin=None, systemLanguage=None, accumulate='none', fromxx=None, externalResourcesRequired=None, by=None, restart='always', requiredFeatures=None, base=None, values=None, keyTimes=None, onrepeat=None, valueOf_=''):
        self.internalName = "animateColor"
        self.keySplines = keySplines
        self.repeatCount = repeatCount
        self.additive = additive
        self.repeatDur = repeatDur
        self.id = id
        self.fill = fill
        self.end = end
        self.calcMode = calcMode
        self.min = min
        self.requiredExtensions = requiredExtensions
        self.to = to
        self.dur = dur
        self.onend = onend
        self.begin = begin
        self.max = max
        self.onbegin = onbegin
        self.systemLanguage = systemLanguage
        self.accumulate = accumulate
        self.fromxx = fromxx
        self.externalResourcesRequired = externalResourcesRequired
        self.by = by
        self.restart = restart
        self.requiredFeatures = requiredFeatures
        self.base = base
        self.values = values
        self.keyTimes = keyTimes
        self.onrepeat = onrepeat
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if animateColorType.subclass:
            return animateColorType.subclass(*args_, **kwargs_)
        else:
            return animateColorType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_keySplines(self): return self.keySplines
    def set_keySplines(self, keySplines): self.keySplines = keySplines
    def get_repeatCount(self): return self.repeatCount
    def set_repeatCount(self, repeatCount): self.repeatCount = repeatCount
    def get_additive(self): return self.additive
    def set_additive(self, additive): self.additive = additive
    def get_repeatDur(self): return self.repeatDur
    def set_repeatDur(self, repeatDur): self.repeatDur = repeatDur
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_fill(self): return self.fill
    def set_fill(self, fill): self.fill = fill
    def get_end(self): return self.end
    def set_end(self, end): self.end = end
    def get_calcMode(self): return self.calcMode
    def set_calcMode(self, calcMode): self.calcMode = calcMode
    def get_min(self): return self.min
    def set_min(self, min): self.min = min
    def get_requiredExtensions(self): return self.requiredExtensions
    def set_requiredExtensions(self, requiredExtensions): self.requiredExtensions = requiredExtensions
    def get_to(self): return self.to
    def set_to(self, to): self.to = to
    def get_dur(self): return self.dur
    def set_dur(self, dur): self.dur = dur
    def get_onend(self): return self.onend
    def set_onend(self, onend): self.onend = onend
    def get_begin(self): return self.begin
    def set_begin(self, begin): self.begin = begin
    def get_max(self): return self.max
    def set_max(self, max): self.max = max
    def get_onbegin(self): return self.onbegin
    def set_onbegin(self, onbegin): self.onbegin = onbegin
    def get_systemLanguage(self): return self.systemLanguage
    def set_systemLanguage(self, systemLanguage): self.systemLanguage = systemLanguage
    def get_accumulate(self): return self.accumulate
    def set_accumulate(self, accumulate): self.accumulate = accumulate
    def get_from(self): return self.fromxx
    def set_from(self, fromxx): self.fromxx = fromxx
    def get_externalResourcesRequired(self): return self.externalResourcesRequired
    def set_externalResourcesRequired(self, externalResourcesRequired): self.externalResourcesRequired = externalResourcesRequired
    def get_by(self): return self.by
    def set_by(self, by): self.by = by
    def get_restart(self): return self.restart
    def set_restart(self, restart): self.restart = restart
    def get_requiredFeatures(self): return self.requiredFeatures
    def set_requiredFeatures(self, requiredFeatures): self.requiredFeatures = requiredFeatures
    def get_base(self): return self.base
    def set_base(self, base): self.base = base
    def get_values(self): return self.values
    def set_values(self, values): self.values = values
    def get_keyTimes(self): return self.keyTimes
    def set_keyTimes(self, keyTimes): self.keyTimes = keyTimes
    def get_onrepeat(self): return self.onrepeat
    def set_onrepeat(self, onrepeat): self.onrepeat = onrepeat
    def getValueOf_(self): return self.valueOf_
    def setValueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='svg:', name_='animateColorType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, self.internalName, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='animateColorType')
        outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='svg:', name_='animateColorType'):
        if self.keySplines is not None:
            outfile.write(' keySplines=%s' % (quote_attrib(self.keySplines), ))
        if self.repeatCount is not None:
            outfile.write(' repeatCount=%s' % (quote_attrib(self.repeatCount), ))
        if self.additive is not None:
            outfile.write(' additive=%s' % (quote_attrib(self.additive), ))
        if self.repeatDur is not None:
            outfile.write(' repeatDur=%s' % (quote_attrib(self.repeatDur), ))
        if self.id is not None:
            outfile.write(' id=%s' % (quote_attrib(self.id), ))
        if self.fill is not None:
            outfile.write(' fill=%s' % (quote_attrib(self.fill), ))
        if self.end is not None:
            outfile.write(' end=%s' % (quote_attrib(self.end), ))
        if self.calcMode is not None:
            outfile.write(' calcMode=%s' % (quote_attrib(self.calcMode), ))
        if self.min is not None:
            outfile.write(' min=%s' % (quote_attrib(self.min), ))
        if self.requiredExtensions is not None:
            outfile.write(' requiredExtensions=%s' % (quote_attrib(self.requiredExtensions), ))
        if self.to is not None:
            outfile.write(' to=%s' % (quote_attrib(self.to), ))
        if self.dur is not None:
            outfile.write(' dur=%s' % (quote_attrib(self.dur), ))
        if self.onend is not None:
            outfile.write(' onend=%s' % (quote_attrib(self.onend), ))
        if self.begin is not None:
            outfile.write(' begin=%s' % (quote_attrib(self.begin), ))
        if self.max is not None:
            outfile.write(' max=%s' % (quote_attrib(self.max), ))
        if self.onbegin is not None:
            outfile.write(' onbegin=%s' % (quote_attrib(self.onbegin), ))
        if self.systemLanguage is not None:
            outfile.write(' systemLanguage=%s' % (quote_attrib(self.systemLanguage), ))
        if self.accumulate is not None:
            outfile.write(' accumulate=%s' % (quote_attrib(self.accumulate), ))
        if self.fromxx is not None:
            outfile.write(' from=%s' % (quote_attrib(self.fromxx), ))
        if self.externalResourcesRequired is not None:
            outfile.write(' externalResourcesRequired="%s"' % str_lower(str(self.externalResourcesRequired)))
        if self.by is not None:
            outfile.write(' by=%s' % (quote_attrib(self.by), ))
        if self.restart is not None:
            outfile.write(' restart=%s' % (quote_attrib(self.restart), ))
        if self.requiredFeatures is not None:
            outfile.write(' requiredFeatures=%s' % (quote_attrib(self.requiredFeatures), ))
        if self.base is not None:
            outfile.write(' base=%s' % (quote_attrib(self.base), ))
        if self.values is not None:
            outfile.write(' values=%s' % (quote_attrib(self.values), ))
        if self.keyTimes is not None:
            outfile.write(' keyTimes=%s' % (quote_attrib(self.keyTimes), ))
        if self.onrepeat is not None:
            outfile.write(' onrepeat=%s' % (quote_attrib(self.onrepeat), ))
    def exportChildren(self, outfile, level, namespace_='svg:', name_='animateColorType'):
        if self.valueOf_.find('![CDATA')>-1:
            value=quote_xml('%s' % self.valueOf_)
            value=value.replace('![CDATA','<![CDATA')
            value=value.replace(']]',']]>')
            outfile.write(value)
        else:
            outfile.write(quote_xml('%s' % self.valueOf_))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        self.valueOf_ = ''
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('keySplines'):
            self.keySplines = attrs.get('keySplines').value
        if attrs.get('repeatCount'):
            self.repeatCount = attrs.get('repeatCount').value
        if attrs.get('additive'):
            self.additive = attrs.get('additive').value
        if attrs.get('repeatDur'):
            self.repeatDur = attrs.get('repeatDur').value
        if attrs.get('id'):
            self.id = attrs.get('id').value
        if attrs.get('fill'):
            self.fill = attrs.get('fill').value
        if attrs.get('end'):
            self.end = attrs.get('end').value
        if attrs.get('calcMode'):
            self.calcMode = attrs.get('calcMode').value
        if attrs.get('min'):
            self.min = attrs.get('min').value
        if attrs.get('requiredExtensions'):
            self.requiredExtensions = attrs.get('requiredExtensions').value
        if attrs.get('to'):
            self.to = attrs.get('to').value
        if attrs.get('dur'):
            self.dur = attrs.get('dur').value
        if attrs.get('onend'):
            self.onend = attrs.get('onend').value
        if attrs.get('begin'):
            self.begin = attrs.get('begin').value
        if attrs.get('max'):
            self.max = attrs.get('max').value
        if attrs.get('onbegin'):
            self.onbegin = attrs.get('onbegin').value
        if attrs.get('systemLanguage'):
            self.systemLanguage = attrs.get('systemLanguage').value
        if attrs.get('accumulate'):
            self.accumulate = attrs.get('accumulate').value
        if attrs.get('from'):
            self.fromxx = attrs.get('from').value
        if attrs.get('externalResourcesRequired'):
            if attrs.get('externalResourcesRequired').value in ('true', '1'):
                self.externalResourcesRequired = True
            elif attrs.get('externalResourcesRequired').value in ('false', '0'):
                self.externalResourcesRequired = False
            else:
                raise ValueError('Bad boolean attribute (externalResourcesRequired)')
        if attrs.get('by'):
            self.by = attrs.get('by').value
        if attrs.get('restart'):
            self.restart = attrs.get('restart').value
        if attrs.get('requiredFeatures'):
            self.requiredFeatures = attrs.get('requiredFeatures').value
        if attrs.get('base'):
            self.base = attrs.get('base').value
        if attrs.get('values'):
            self.values = attrs.get('values').value
        if attrs.get('keyTimes'):
            self.keyTimes = attrs.get('keyTimes').value
        if attrs.get('onrepeat'):
            self.onrepeat = attrs.get('onrepeat').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.TEXT_NODE:
            self.valueOf_ += child_.nodeValue
        elif child_.nodeType == Node.CDATA_SECTION_NODE:
            self.valueOf_ += '![CDATA['+child_.nodeValue+']]'
# end class animateColorType


class animateTransformType(object):
    subclass = None
    superclass = None
    def __init__(self, keySplines=None, repeatCount=None, additive='replace', repeatDur=None, id=None, fill='remove', end=None, calcMode='linear', min=None, requiredExtensions=None, to=None, dur=None, type_='translate', onend=None, begin=None, max=None, onbegin=None, systemLanguage=None, accumulate='none', fromxx=None, externalResourcesRequired=None, by=None, restart='always', requiredFeatures=None, base=None, values=None, keyTimes=None, onrepeat=None, valueOf_=''):
        self.internalName = "animateTransform"
        self.keySplines = keySplines
        self.repeatCount = repeatCount
        self.additive = additive
        self.repeatDur = repeatDur
        self.id = id
        self.fill = fill
        self.end = end
        self.calcMode = calcMode
        self.min = min
        self.requiredExtensions = requiredExtensions
        self.to = to
        self.dur = dur
        self.type_ = type_
        self.onend = onend
        self.begin = begin
        self.max = max
        self.onbegin = onbegin
        self.systemLanguage = systemLanguage
        self.accumulate = accumulate
        self.fromxx = fromxx
        self.externalResourcesRequired = externalResourcesRequired
        self.by = by
        self.restart = restart
        self.requiredFeatures = requiredFeatures
        self.base = base
        self.values = values
        self.keyTimes = keyTimes
        self.onrepeat = onrepeat
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if animateTransformType.subclass:
            return animateTransformType.subclass(*args_, **kwargs_)
        else:
            return animateTransformType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_keySplines(self): return self.keySplines
    def set_keySplines(self, keySplines): self.keySplines = keySplines
    def get_repeatCount(self): return self.repeatCount
    def set_repeatCount(self, repeatCount): self.repeatCount = repeatCount
    def get_additive(self): return self.additive
    def set_additive(self, additive): self.additive = additive
    def get_repeatDur(self): return self.repeatDur
    def set_repeatDur(self, repeatDur): self.repeatDur = repeatDur
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_fill(self): return self.fill
    def set_fill(self, fill): self.fill = fill
    def get_end(self): return self.end
    def set_end(self, end): self.end = end
    def get_calcMode(self): return self.calcMode
    def set_calcMode(self, calcMode): self.calcMode = calcMode
    def get_min(self): return self.min
    def set_min(self, min): self.min = min
    def get_requiredExtensions(self): return self.requiredExtensions
    def set_requiredExtensions(self, requiredExtensions): self.requiredExtensions = requiredExtensions
    def get_to(self): return self.to
    def set_to(self, to): self.to = to
    def get_dur(self): return self.dur
    def set_dur(self, dur): self.dur = dur
    def get_type(self): return self.type_
    def set_type(self, type_): self.type_ = type_
    def get_onend(self): return self.onend
    def set_onend(self, onend): self.onend = onend
    def get_begin(self): return self.begin
    def set_begin(self, begin): self.begin = begin
    def get_max(self): return self.max
    def set_max(self, max): self.max = max
    def get_onbegin(self): return self.onbegin
    def set_onbegin(self, onbegin): self.onbegin = onbegin
    def get_systemLanguage(self): return self.systemLanguage
    def set_systemLanguage(self, systemLanguage): self.systemLanguage = systemLanguage
    def get_accumulate(self): return self.accumulate
    def set_accumulate(self, accumulate): self.accumulate = accumulate
    def get_from(self): return self.fromxx
    def set_from(self, fromxx): self.fromxx = fromxx
    def get_externalResourcesRequired(self): return self.externalResourcesRequired
    def set_externalResourcesRequired(self, externalResourcesRequired): self.externalResourcesRequired = externalResourcesRequired
    def get_by(self): return self.by
    def set_by(self, by): self.by = by
    def get_restart(self): return self.restart
    def set_restart(self, restart): self.restart = restart
    def get_requiredFeatures(self): return self.requiredFeatures
    def set_requiredFeatures(self, requiredFeatures): self.requiredFeatures = requiredFeatures
    def get_base(self): return self.base
    def set_base(self, base): self.base = base
    def get_values(self): return self.values
    def set_values(self, values): self.values = values
    def get_keyTimes(self): return self.keyTimes
    def set_keyTimes(self, keyTimes): self.keyTimes = keyTimes
    def get_onrepeat(self): return self.onrepeat
    def set_onrepeat(self, onrepeat): self.onrepeat = onrepeat
    def getValueOf_(self): return self.valueOf_
    def setValueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='svg:', name_='animateTransformType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, self.internalName, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='animateTransformType')
        outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='svg:', name_='animateTransformType'):
        if self.keySplines is not None:
            outfile.write(' keySplines=%s' % (quote_attrib(self.keySplines), ))
        if self.repeatCount is not None:
            outfile.write(' repeatCount=%s' % (quote_attrib(self.repeatCount), ))
        if self.additive is not None:
            outfile.write(' additive=%s' % (quote_attrib(self.additive), ))
        if self.repeatDur is not None:
            outfile.write(' repeatDur=%s' % (quote_attrib(self.repeatDur), ))
        if self.id is not None:
            outfile.write(' id=%s' % (quote_attrib(self.id), ))
        if self.fill is not None:
            outfile.write(' fill=%s' % (quote_attrib(self.fill), ))
        if self.end is not None:
            outfile.write(' end=%s' % (quote_attrib(self.end), ))
        if self.calcMode is not None:
            outfile.write(' calcMode=%s' % (quote_attrib(self.calcMode), ))
        if self.min is not None:
            outfile.write(' min=%s' % (quote_attrib(self.min), ))
        if self.requiredExtensions is not None:
            outfile.write(' requiredExtensions=%s' % (quote_attrib(self.requiredExtensions), ))
        if self.to is not None:
            outfile.write(' to=%s' % (quote_attrib(self.to), ))
        if self.dur is not None:
            outfile.write(' dur=%s' % (quote_attrib(self.dur), ))
        if self.type_ is not None:
            outfile.write(' type=%s' % (quote_attrib(self.type_), ))
        if self.onend is not None:
            outfile.write(' onend=%s' % (quote_attrib(self.onend), ))
        if self.begin is not None:
            outfile.write(' begin=%s' % (quote_attrib(self.begin), ))
        if self.max is not None:
            outfile.write(' max=%s' % (quote_attrib(self.max), ))
        if self.onbegin is not None:
            outfile.write(' onbegin=%s' % (quote_attrib(self.onbegin), ))
        if self.systemLanguage is not None:
            outfile.write(' systemLanguage=%s' % (quote_attrib(self.systemLanguage), ))
        if self.accumulate is not None:
            outfile.write(' accumulate=%s' % (quote_attrib(self.accumulate), ))
        if self.fromxx is not None:
            outfile.write(' from=%s' % (quote_attrib(self.fromxx), ))
        if self.externalResourcesRequired is not None:
            outfile.write(' externalResourcesRequired="%s"' % str_lower(str(self.externalResourcesRequired)))
        if self.by is not None:
            outfile.write(' by=%s' % (quote_attrib(self.by), ))
        if self.restart is not None:
            outfile.write(' restart=%s' % (quote_attrib(self.restart), ))
        if self.requiredFeatures is not None:
            outfile.write(' requiredFeatures=%s' % (quote_attrib(self.requiredFeatures), ))
        if self.base is not None:
            outfile.write(' base=%s' % (quote_attrib(self.base), ))
        if self.values is not None:
            outfile.write(' values=%s' % (quote_attrib(self.values), ))
        if self.keyTimes is not None:
            outfile.write(' keyTimes=%s' % (quote_attrib(self.keyTimes), ))
        if self.onrepeat is not None:
            outfile.write(' onrepeat=%s' % (quote_attrib(self.onrepeat), ))
    def exportChildren(self, outfile, level, namespace_='svg:', name_='animateTransformType'):
        if self.valueOf_.find('![CDATA')>-1:
            value=quote_xml('%s' % self.valueOf_)
            value=value.replace('![CDATA','<![CDATA')
            value=value.replace(']]',']]>')
            outfile.write(value)
        else:
            outfile.write(quote_xml('%s' % self.valueOf_))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        self.valueOf_ = ''
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('keySplines'):
            self.keySplines = attrs.get('keySplines').value
        if attrs.get('repeatCount'):
            self.repeatCount = attrs.get('repeatCount').value
        if attrs.get('additive'):
            self.additive = attrs.get('additive').value
        if attrs.get('repeatDur'):
            self.repeatDur = attrs.get('repeatDur').value
        if attrs.get('id'):
            self.id = attrs.get('id').value
        if attrs.get('fill'):
            self.fill = attrs.get('fill').value
        if attrs.get('end'):
            self.end = attrs.get('end').value
        if attrs.get('calcMode'):
            self.calcMode = attrs.get('calcMode').value
        if attrs.get('min'):
            self.min = attrs.get('min').value
        if attrs.get('requiredExtensions'):
            self.requiredExtensions = attrs.get('requiredExtensions').value
        if attrs.get('to'):
            self.to = attrs.get('to').value
        if attrs.get('dur'):
            self.dur = attrs.get('dur').value
        if attrs.get('type'):
            self.type_ = attrs.get('type').value
        if attrs.get('onend'):
            self.onend = attrs.get('onend').value
        if attrs.get('begin'):
            self.begin = attrs.get('begin').value
        if attrs.get('max'):
            self.max = attrs.get('max').value
        if attrs.get('onbegin'):
            self.onbegin = attrs.get('onbegin').value
        if attrs.get('systemLanguage'):
            self.systemLanguage = attrs.get('systemLanguage').value
        if attrs.get('accumulate'):
            self.accumulate = attrs.get('accumulate').value
        if attrs.get('from'):
            self.fromxx = attrs.get('from').value
        if attrs.get('externalResourcesRequired'):
            if attrs.get('externalResourcesRequired').value in ('true', '1'):
                self.externalResourcesRequired = True
            elif attrs.get('externalResourcesRequired').value in ('false', '0'):
                self.externalResourcesRequired = False
            else:
                raise ValueError('Bad boolean attribute (externalResourcesRequired)')
        if attrs.get('by'):
            self.by = attrs.get('by').value
        if attrs.get('restart'):
            self.restart = attrs.get('restart').value
        if attrs.get('requiredFeatures'):
            self.requiredFeatures = attrs.get('requiredFeatures').value
        if attrs.get('base'):
            self.base = attrs.get('base').value
        if attrs.get('values'):
            self.values = attrs.get('values').value
        if attrs.get('keyTimes'):
            self.keyTimes = attrs.get('keyTimes').value
        if attrs.get('onrepeat'):
            self.onrepeat = attrs.get('onrepeat').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.TEXT_NODE:
            self.valueOf_ += child_.nodeValue
        elif child_.nodeType == Node.CDATA_SECTION_NODE:
            self.valueOf_ += '![CDATA['+child_.nodeValue+']]'
# end class animateTransformType


class fontType(object):
    subclass = None
    superclass = None
    def __init__(self, horiz_origin_x=None, horiz_origin_y=None, style=None, vert_origin_x=None, horiz_adv_x=None, vert_origin_y=None, id=None, base=None, vert_adv_y=None, externalResourcesRequired=None, classxx=None, font_face=None, missing_glyph=None):
        self.internalName = "font"
        self.horiz_origin_x = horiz_origin_x
        self.horiz_origin_y = horiz_origin_y
        self.style = style
        self.vert_origin_x = vert_origin_x
        self.horiz_adv_x = horiz_adv_x
        self.vert_origin_y = vert_origin_y
        self.id = id
        self.base = base
        self.vert_adv_y = vert_adv_y
        self.externalResourcesRequired = externalResourcesRequired
        self.classxx = classxx
        self.font_face = font_face
        self.missing_glyph = missing_glyph
        self.internalElements = []
    def factory(*args_, **kwargs_):
        if fontType.subclass:
            return fontType.subclass(*args_, **kwargs_)
        else:
            return fontType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_font_face(self): return self.font_face
    def set_font_face(self, font_face): self.font_face = font_face
    def get_missing_glyph(self): return self.missing_glyph
    def set_missing_glyph(self, missing_glyph): self.missing_glyph = missing_glyph
    def addElement(self, value): self.internalElements.append(value)
    def get_horiz_origin_x(self): return self.horiz_origin_x
    def set_horiz_origin_x(self, horiz_origin_x): self.horiz_origin_x = horiz_origin_x
    def get_horiz_origin_y(self): return self.horiz_origin_y
    def set_horiz_origin_y(self, horiz_origin_y): self.horiz_origin_y = horiz_origin_y
    def get_style(self): return self.style
    def set_style(self, style): self.style = style
    def get_vert_origin_x(self): return self.vert_origin_x
    def set_vert_origin_x(self, vert_origin_x): self.vert_origin_x = vert_origin_x
    def get_horiz_adv_x(self): return self.horiz_adv_x
    def set_horiz_adv_x(self, horiz_adv_x): self.horiz_adv_x = horiz_adv_x
    def get_vert_origin_y(self): return self.vert_origin_y
    def set_vert_origin_y(self, vert_origin_y): self.vert_origin_y = vert_origin_y
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_base(self): return self.base
    def set_base(self, base): self.base = base
    def get_vert_adv_y(self): return self.vert_adv_y
    def set_vert_adv_y(self, vert_adv_y): self.vert_adv_y = vert_adv_y
    def get_externalResourcesRequired(self): return self.externalResourcesRequired
    def set_externalResourcesRequired(self, externalResourcesRequired): self.externalResourcesRequired = externalResourcesRequired
    def get_class(self): return self.classxx
    def set_class(self, classxx): self.classxx = classxx
    def export(self, outfile, level, namespace_='svg:', name_='fontType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, self.internalName, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='fontType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, self.internalName))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='svg:', name_='fontType'):
        if self.horiz_origin_x is not None:
            outfile.write(' horiz-origin-x="%e"' % self.horiz_origin_x)
        if self.horiz_origin_y is not None:
            outfile.write(' horiz-origin-y="%e"' % self.horiz_origin_y)
        if self.style is not None:
            outfile.write(' style=%s' % (quote_attrib(self.style), ))
        if self.vert_origin_x is not None:
            outfile.write(' vert-origin-x="%e"' % self.vert_origin_x)
        outfile.write(' horiz-adv-x="%e"' % self.horiz_adv_x)
        if self.vert_origin_y is not None:
            outfile.write(' vert-origin-y="%e"' % self.vert_origin_y)
        if self.id is not None:
            outfile.write(' id=%s' % (quote_attrib(self.id), ))
        if self.base is not None:
            outfile.write(' base=%s' % (quote_attrib(self.base), ))
        if self.vert_adv_y is not None:
            outfile.write(' vert-adv-y="%e"' % self.vert_adv_y)
        if self.externalResourcesRequired is not None:
            outfile.write(' externalResourcesRequired="%s"' % str_lower(str(self.externalResourcesRequired)))
        if self.classxx is not None:
            outfile.write(' class=%s' % (quote_attrib(self.classxx), ))
    def exportChildren(self, outfile, level, namespace_='svg:', name_='fontType'):
        if self.font_face:
            self.font_face.export(outfile, level, namespace_, name_='font-face', )
        if self.missing_glyph:
            self.missing_glyph.export(outfile, level, namespace_, name_='missing-glyph', )
        for element_ in self.internalElements:
            element_.export(outfile, level, namespace_, name_='glyph')
    def hasContent_(self):
        if (
            self.font_face or
            self.missing_glyph or
         len(self.internalElements)>0
            ):
            return True
        else:
            return False
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('horiz-origin-x'):
            try:
                self.horiz_origin_x = float(attrs.get('horiz-origin-x').value)
            except ValueError, exp:
                raise ValueError('Bad float/double attribute (horiz-origin-x): %s' % exp)
        if attrs.get('horiz-origin-y'):
            try:
                self.horiz_origin_y = float(attrs.get('horiz-origin-y').value)
            except ValueError, exp:
                raise ValueError('Bad float/double attribute (horiz-origin-y): %s' % exp)
        if attrs.get('style'):
            self.style = attrs.get('style').value
        if attrs.get('vert-origin-x'):
            try:
                self.vert_origin_x = float(attrs.get('vert-origin-x').value)
            except ValueError, exp:
                raise ValueError('Bad float/double attribute (vert-origin-x): %s' % exp)
        if attrs.get('horiz-adv-x'):
            try:
                self.horiz_adv_x = float(attrs.get('horiz-adv-x').value)
            except ValueError, exp:
                raise ValueError('Bad float/double attribute (horiz-adv-x): %s' % exp)
        if attrs.get('vert-origin-y'):
            try:
                self.vert_origin_y = float(attrs.get('vert-origin-y').value)
            except ValueError, exp:
                raise ValueError('Bad float/double attribute (vert-origin-y): %s' % exp)
        if attrs.get('id'):
            self.id = attrs.get('id').value
        if attrs.get('base'):
            self.base = attrs.get('base').value
        if attrs.get('vert-adv-y'):
            try:
                self.vert_adv_y = float(attrs.get('vert-adv-y').value)
            except ValueError, exp:
                raise ValueError('Bad float/double attribute (vert-adv-y): %s' % exp)
        if attrs.get('externalResourcesRequired'):
            if attrs.get('externalResourcesRequired').value in ('true', '1'):
                self.externalResourcesRequired = True
            elif attrs.get('externalResourcesRequired').value in ('false', '0'):
                self.externalResourcesRequired = False
            else:
                raise ValueError('Bad boolean attribute (externalResourcesRequired)')
        if attrs.get('class'):
            self.classxx = attrs.get('class').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'font-face':
            obj_ = font_face.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            self.set_font_face(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'missing-glyph':
            obj_ = missing_glyph.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            self.set_missing_glyph(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'glyph':
            obj_ = glyphType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'hkern':
            obj_ = hkernType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'vkern':
            obj_ = vkernType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
# end class fontType


class glyphType(object):
    subclass = None
    superclass = None
    def __init__(self, horiz_adv_x=None, d=None, han=None, vert_text_orient=None, id=None, base=None, vert_adv_y=None, style_attr=None, unicode=None, arabic=None, glyph_name=None, classxx=None):
        self.internalName = "glyph"
        self.horiz_adv_x = horiz_adv_x
        self.d = d
        self.han = han
        self.vert_text_orient = vert_text_orient
        self.id = id
        self.base = base
        self.vert_adv_y = vert_adv_y
        self.style_attr = style_attr
        self.unicode = unicode
        self.arabic = arabic
        self.glyph_name = glyph_name
        self.classxx = classxx
        self.internalElements = []
    def factory(*args_, **kwargs_):
        if glyphType.subclass:
            return glyphType.subclass(*args_, **kwargs_)
        else:
            return glyphType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def addElement(self, value): self.internalElements.append(value)
    def validate_textType(self, value):
        # validate type textType
        pass
    def validate_svgType(self, value):
        # validate type svgType
        pass
    def validate_viewType(self, value):
        # validate type viewType
        pass
    def validate_markerType(self, value):
        # validate type markerType
        pass
    def validate_clipPathType(self, value):
        # validate type clipPathType
        pass
    def validate_maskType(self, value):
        # validate type maskType
        pass
    def validate_linearGradientType(self, value):
        # validate type linearGradientType
        pass
    def validate_radialGradientType(self, value):
        # validate type radialGradientType
        pass
    def validate_patternType(self, value):
        # validate type patternType
        pass
    def validate_filterType(self, value):
        # validate type filterType
        pass
    def validate_animateTransformType(self, value):
        # validate type animateTransformType
        pass
    def get_horiz_adv_x(self): return self.horiz_adv_x
    def set_horiz_adv_x(self, horiz_adv_x): self.horiz_adv_x = horiz_adv_x
    def get_d(self): return self.d
    def set_d(self, d): self.d = d
    def get_han(self): return self.han
    def set_han(self, han): self.han = han
    def get_vert_text_orient(self): return self.vert_text_orient
    def set_vert_text_orient(self, vert_text_orient): self.vert_text_orient = vert_text_orient
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_base(self): return self.base
    def set_base(self, base): self.base = base
    def get_vert_adv_y(self): return self.vert_adv_y
    def set_vert_adv_y(self, vert_adv_y): self.vert_adv_y = vert_adv_y
    def get_style_attr(self): return self.style_attr
    def set_style_attr(self, style_attr): self.style_attr = style_attr
    def get_unicode(self): return self.unicode
    def set_unicode(self, unicode): self.unicode = unicode
    def get_arabic(self): return self.arabic
    def set_arabic(self, arabic): self.arabic = arabic
    def get_glyph_name(self): return self.glyph_name
    def set_glyph_name(self, glyph_name): self.glyph_name = glyph_name
    def get_class(self): return self.classxx
    def set_class(self, classxx): self.classxx = classxx
    def export(self, outfile, level, namespace_='svg:', name_='glyphType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, self.internalName, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='glyphType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, self.internalName))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='svg:', name_='glyphType'):
        if self.horiz_adv_x is not None:
            outfile.write(' horiz-adv-x="%e"' % self.horiz_adv_x)
        if self.d is not None:
            outfile.write(' d=%s' % (quote_attrib(self.d), ))
        if self.han is not None:
            outfile.write(' han=%s' % (quote_attrib(self.han), ))
        if self.vert_text_orient is not None:
            outfile.write(' vert-text-orient=%s' % (quote_attrib(self.vert_text_orient), ))
        if self.id is not None:
            outfile.write(' id=%s' % (quote_attrib(self.id), ))
        if self.base is not None:
            outfile.write(' base=%s' % (quote_attrib(self.base), ))
        if self.vert_adv_y is not None:
            outfile.write(' vert-adv-y="%e"' % self.vert_adv_y)
        if self.style_attr is not None:
            outfile.write(' style_attr=%s' % (quote_attrib(self.style_attr), ))
        if self.unicode is not None:
            outfile.write(' unicode=%s' % (quote_attrib(self.unicode), ))
        if self.arabic is not None:
            outfile.write(' arabic=%s' % (quote_attrib(self.arabic), ))
        if self.glyph_name is not None:
            outfile.write(' glyph-name=%s' % (quote_attrib(self.glyph_name), ))
        if self.classxx is not None:
            outfile.write(' class=%s' % (quote_attrib(self.classxx), ))
    def exportChildren(self, outfile, level, namespace_='svg:', name_='glyphType'):
        for element_ in self.internalElements:
            element_.export(outfile, level, namespace_, name_='desc')
    def hasContent_(self):
        if (
         len(self.internalElements)>0
            ):
            return True
        else:
            return False
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('horiz-adv-x'):
            try:
                self.horiz_adv_x = float(attrs.get('horiz-adv-x').value)
            except ValueError, exp:
                raise ValueError('Bad float/double attribute (horiz-adv-x): %s' % exp)
        if attrs.get('d'):
            self.d = attrs.get('d').value
        if attrs.get('han'):
            self.han = attrs.get('han').value
        if attrs.get('vert-text-orient'):
            self.vert_text_orient = attrs.get('vert-text-orient').value
        if attrs.get('id'):
            self.id = attrs.get('id').value
        if attrs.get('base'):
            self.base = attrs.get('base').value
        if attrs.get('vert-adv-y'):
            try:
                self.vert_adv_y = float(attrs.get('vert-adv-y').value)
            except ValueError, exp:
                raise ValueError('Bad float/double attribute (vert-adv-y): %s' % exp)
        if attrs.get('style_attr'):
            self.style_attr = attrs.get('style_attr').value
        if attrs.get('unicode'):
            self.unicode = attrs.get('unicode').value
        if attrs.get('arabic'):
            self.arabic = attrs.get('arabic').value
        if attrs.get('glyph-name'):
            self.glyph_name = attrs.get('glyph-name').value
        if attrs.get('class'):
            self.classxx = attrs.get('class').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'desc':
            obj_ = descType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'title':
            obj_ = titleType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'metadata':
            obj_ = metadataType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'defs':
            obj_ = defsType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'path':
            obj_ = pathType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'text':
            obj_ = textType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_textType(obj_)    # validate type textType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'rect':
            obj_ = rectType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'circle':
            obj_ = circleType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'ellipse':
            obj_ = ellipseType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'line':
            obj_ = lineType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'polyline':
            obj_ = polylineType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'polygon':
            obj_ = polygonType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'use':
            obj_ = useType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'image':
            obj_ = imageType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'svg':
            obj_ = svgType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_svgType(obj_)    # validate type svgType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'g':
            obj_ = gType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'view':
            obj_ = viewType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_viewType(obj_)    # validate type viewType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'switch':
            obj_ = switchType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'a':
            obj_ = aType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'altGlyphDef':
            obj_ = altGlyphDefType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'script':
            obj_ = scriptType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'style':
            obj_ = styleType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'symbol':
            obj_ = symbolType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'marker':
            obj_ = markerType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_markerType(obj_)    # validate type markerType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'clipPath':
            obj_ = clipPathType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_clipPathType(obj_)    # validate type clipPathType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'mask':
            obj_ = maskType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_maskType(obj_)    # validate type maskType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'linearGradient':
            obj_ = linearGradientType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_linearGradientType(obj_)    # validate type linearGradientType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'radialGradient':
            obj_ = radialGradientType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_radialGradientType(obj_)    # validate type radialGradientType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'pattern':
            obj_ = patternType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_patternType(obj_)    # validate type patternType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'filter':
            obj_ = filterType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_filterType(obj_)    # validate type filterType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'cursor':
            obj_ = cursorType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'font':
            obj_ = fontType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animate':
            obj_ = animateType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'set':
            obj_ = setType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animateMotion':
            obj_ = animateMotionType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animateColor':
            obj_ = animateColorType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animateTransform':
            obj_ = animateTransformType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_animateTransformType(obj_)    # validate type animateTransformType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'color-profile':
            obj_ = color_profile.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'font-face':
            obj_ = font_face.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
# end class glyphType


class missing_glyphType(object):
    subclass = None
    superclass = None
    def __init__(self, vert_adv_y=None, d=None, horiz_adv_x=None, id=None, base=None, style_attr=None, classxx=None):
        self.internalName = "missing-glyph"
        self.vert_adv_y = vert_adv_y
        self.d = d
        self.horiz_adv_x = horiz_adv_x
        self.id = id
        self.base = base
        self.style_attr = style_attr
        self.classxx = classxx
        self.internalElements = []
    def factory(*args_, **kwargs_):
        if missing_glyphType.subclass:
            return missing_glyphType.subclass(*args_, **kwargs_)
        else:
            return missing_glyphType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def addElement(self, value): self.internalElements.append(value)
    def validate_textType(self, value):
        # validate type textType
        pass
    def validate_svgType(self, value):
        # validate type svgType
        pass
    def validate_viewType(self, value):
        # validate type viewType
        pass
    def validate_markerType(self, value):
        # validate type markerType
        pass
    def validate_clipPathType(self, value):
        # validate type clipPathType
        pass
    def validate_maskType(self, value):
        # validate type maskType
        pass
    def validate_linearGradientType(self, value):
        # validate type linearGradientType
        pass
    def validate_radialGradientType(self, value):
        # validate type radialGradientType
        pass
    def validate_patternType(self, value):
        # validate type patternType
        pass
    def validate_filterType(self, value):
        # validate type filterType
        pass
    def validate_animateTransformType(self, value):
        # validate type animateTransformType
        pass
    def get_vert_adv_y(self): return self.vert_adv_y
    def set_vert_adv_y(self, vert_adv_y): self.vert_adv_y = vert_adv_y
    def get_d(self): return self.d
    def set_d(self, d): self.d = d
    def get_horiz_adv_x(self): return self.horiz_adv_x
    def set_horiz_adv_x(self, horiz_adv_x): self.horiz_adv_x = horiz_adv_x
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_base(self): return self.base
    def set_base(self, base): self.base = base
    def get_style_attr(self): return self.style_attr
    def set_style_attr(self, style_attr): self.style_attr = style_attr
    def get_class(self): return self.classxx
    def set_class(self, classxx): self.classxx = classxx
    def export(self, outfile, level, namespace_='svg:', name_='missing-glyphType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, self.internalName, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='missing-glyphType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, self.internalName))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='svg:', name_='missing-glyphType'):
        if self.vert_adv_y is not None:
            outfile.write(' vert-adv-y="%e"' % self.vert_adv_y)
        if self.d is not None:
            outfile.write(' d=%s' % (quote_attrib(self.d), ))
        if self.horiz_adv_x is not None:
            outfile.write(' horiz-adv-x="%e"' % self.horiz_adv_x)
        if self.id is not None:
            outfile.write(' id=%s' % (quote_attrib(self.id), ))
        if self.base is not None:
            outfile.write(' base=%s' % (quote_attrib(self.base), ))
        if self.style_attr is not None:
            outfile.write(' style_attr=%s' % (quote_attrib(self.style_attr), ))
        if self.classxx is not None:
            outfile.write(' class=%s' % (quote_attrib(self.classxx), ))
    def exportChildren(self, outfile, level, namespace_='svg:', name_='missing-glyphType'):
        for element_ in self.internalElements:
            element_.export(outfile, level, namespace_, name_='desc')
    def hasContent_(self):
        if (
         len(self.internalElements)>0
            ):
            return True
        else:
            return False
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('vert-adv-y'):
            try:
                self.vert_adv_y = float(attrs.get('vert-adv-y').value)
            except ValueError, exp:
                raise ValueError('Bad float/double attribute (vert-adv-y): %s' % exp)
        if attrs.get('d'):
            self.d = attrs.get('d').value
        if attrs.get('horiz-adv-x'):
            try:
                self.horiz_adv_x = float(attrs.get('horiz-adv-x').value)
            except ValueError, exp:
                raise ValueError('Bad float/double attribute (horiz-adv-x): %s' % exp)
        if attrs.get('id'):
            self.id = attrs.get('id').value
        if attrs.get('base'):
            self.base = attrs.get('base').value
        if attrs.get('style_attr'):
            self.style_attr = attrs.get('style_attr').value
        if attrs.get('class'):
            self.classxx = attrs.get('class').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'desc':
            obj_ = descType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'title':
            obj_ = titleType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'metadata':
            obj_ = metadataType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'defs':
            obj_ = defsType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'path':
            obj_ = pathType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'text':
            obj_ = textType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_textType(obj_)    # validate type textType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'rect':
            obj_ = rectType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'circle':
            obj_ = circleType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'ellipse':
            obj_ = ellipseType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'line':
            obj_ = lineType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'polyline':
            obj_ = polylineType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'polygon':
            obj_ = polygonType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'use':
            obj_ = useType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'image':
            obj_ = imageType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'svg':
            obj_ = svgType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_svgType(obj_)    # validate type svgType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'g':
            obj_ = gType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'view':
            obj_ = viewType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_viewType(obj_)    # validate type viewType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'switch':
            obj_ = switchType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'a':
            obj_ = aType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'altGlyphDef':
            obj_ = altGlyphDefType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'script':
            obj_ = scriptType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'style':
            obj_ = styleType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'symbol':
            obj_ = symbolType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'marker':
            obj_ = markerType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_markerType(obj_)    # validate type markerType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'clipPath':
            obj_ = clipPathType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_clipPathType(obj_)    # validate type clipPathType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'mask':
            obj_ = maskType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_maskType(obj_)    # validate type maskType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'linearGradient':
            obj_ = linearGradientType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_linearGradientType(obj_)    # validate type linearGradientType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'radialGradient':
            obj_ = radialGradientType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_radialGradientType(obj_)    # validate type radialGradientType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'pattern':
            obj_ = patternType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_patternType(obj_)    # validate type patternType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'filter':
            obj_ = filterType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_filterType(obj_)    # validate type filterType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'cursor':
            obj_ = cursorType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'font':
            obj_ = fontType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animate':
            obj_ = animateType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'set':
            obj_ = setType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animateMotion':
            obj_ = animateMotionType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animateColor':
            obj_ = animateColorType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'animateTransform':
            obj_ = animateTransformType.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
            self.validate_animateTransformType(obj_)    # validate type animateTransformType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'color-profile':
            obj_ = color_profile.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'font-face':
            obj_ = font_face.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
# end class missing_glyphType


class hkernType(object):
    subclass = None
    superclass = None
    def __init__(self, g2=None, g1=None, k=None, u1=None, u2=None, base=None, id=None, valueOf_=''):
        self.internalName = "hkern"
        self.g2 = g2
        self.g1 = g1
        self.k = k
        self.u1 = u1
        self.u2 = u2
        self.base = base
        self.id = id
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if hkernType.subclass:
            return hkernType.subclass(*args_, **kwargs_)
        else:
            return hkernType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_g2(self): return self.g2
    def set_g2(self, g2): self.g2 = g2
    def get_g1(self): return self.g1
    def set_g1(self, g1): self.g1 = g1
    def get_k(self): return self.k
    def set_k(self, k): self.k = k
    def get_u1(self): return self.u1
    def set_u1(self, u1): self.u1 = u1
    def get_u2(self): return self.u2
    def set_u2(self, u2): self.u2 = u2
    def get_base(self): return self.base
    def set_base(self, base): self.base = base
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def getValueOf_(self): return self.valueOf_
    def setValueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='svg:', name_='hkernType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, self.internalName, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='hkernType')
        outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='svg:', name_='hkernType'):
        if self.g2 is not None:
            outfile.write(' g2=%s' % (quote_attrib(self.g2), ))
        if self.g1 is not None:
            outfile.write(' g1=%s' % (quote_attrib(self.g1), ))
        outfile.write(' k="%e"' % self.k)
        if self.u1 is not None:
            outfile.write(' u1=%s' % (quote_attrib(self.u1), ))
        if self.u2 is not None:
            outfile.write(' u2=%s' % (quote_attrib(self.u2), ))
        if self.base is not None:
            outfile.write(' base=%s' % (quote_attrib(self.base), ))
        if self.id is not None:
            outfile.write(' id=%s' % (quote_attrib(self.id), ))
    def exportChildren(self, outfile, level, namespace_='svg:', name_='hkernType'):
        if self.valueOf_.find('![CDATA')>-1:
            value=quote_xml('%s' % self.valueOf_)
            value=value.replace('![CDATA','<![CDATA')
            value=value.replace(']]',']]>')
            outfile.write(value)
        else:
            outfile.write(quote_xml('%s' % self.valueOf_))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        self.valueOf_ = ''
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('g2'):
            self.g2 = attrs.get('g2').value
        if attrs.get('g1'):
            self.g1 = attrs.get('g1').value
        if attrs.get('k'):
            try:
                self.k = float(attrs.get('k').value)
            except ValueError, exp:
                raise ValueError('Bad float/double attribute (k): %s' % exp)
        if attrs.get('u1'):
            self.u1 = attrs.get('u1').value
        if attrs.get('u2'):
            self.u2 = attrs.get('u2').value
        if attrs.get('base'):
            self.base = attrs.get('base').value
        if attrs.get('id'):
            self.id = attrs.get('id').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.TEXT_NODE:
            self.valueOf_ += child_.nodeValue
        elif child_.nodeType == Node.CDATA_SECTION_NODE:
            self.valueOf_ += '![CDATA['+child_.nodeValue+']]'
# end class hkernType


class vkernType(object):
    subclass = None
    superclass = None
    def __init__(self, g2=None, g1=None, k=None, u1=None, u2=None, base=None, id=None, valueOf_=''):
        self.internalName = "vkern"
        self.g2 = g2
        self.g1 = g1
        self.k = k
        self.u1 = u1
        self.u2 = u2
        self.base = base
        self.id = id
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if vkernType.subclass:
            return vkernType.subclass(*args_, **kwargs_)
        else:
            return vkernType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_g2(self): return self.g2
    def set_g2(self, g2): self.g2 = g2
    def get_g1(self): return self.g1
    def set_g1(self, g1): self.g1 = g1
    def get_k(self): return self.k
    def set_k(self, k): self.k = k
    def get_u1(self): return self.u1
    def set_u1(self, u1): self.u1 = u1
    def get_u2(self): return self.u2
    def set_u2(self, u2): self.u2 = u2
    def get_base(self): return self.base
    def set_base(self, base): self.base = base
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def getValueOf_(self): return self.valueOf_
    def setValueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='svg:', name_='vkernType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, self.internalName, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='vkernType')
        outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='svg:', name_='vkernType'):
        if self.g2 is not None:
            outfile.write(' g2=%s' % (quote_attrib(self.g2), ))
        if self.g1 is not None:
            outfile.write(' g1=%s' % (quote_attrib(self.g1), ))
        outfile.write(' k="%e"' % self.k)
        if self.u1 is not None:
            outfile.write(' u1=%s' % (quote_attrib(self.u1), ))
        if self.u2 is not None:
            outfile.write(' u2=%s' % (quote_attrib(self.u2), ))
        if self.base is not None:
            outfile.write(' base=%s' % (quote_attrib(self.base), ))
        if self.id is not None:
            outfile.write(' id=%s' % (quote_attrib(self.id), ))
    def exportChildren(self, outfile, level, namespace_='svg:', name_='vkernType'):
        if self.valueOf_.find('![CDATA')>-1:
            value=quote_xml('%s' % self.valueOf_)
            value=value.replace('![CDATA','<![CDATA')
            value=value.replace(']]',']]>')
            outfile.write(value)
        else:
            outfile.write(quote_xml('%s' % self.valueOf_))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        self.valueOf_ = ''
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('g2'):
            self.g2 = attrs.get('g2').value
        if attrs.get('g1'):
            self.g1 = attrs.get('g1').value
        if attrs.get('k'):
            try:
                self.k = float(attrs.get('k').value)
            except ValueError, exp:
                raise ValueError('Bad float/double attribute (k): %s' % exp)
        if attrs.get('u1'):
            self.u1 = attrs.get('u1').value
        if attrs.get('u2'):
            self.u2 = attrs.get('u2').value
        if attrs.get('base'):
            self.base = attrs.get('base').value
        if attrs.get('id'):
            self.id = attrs.get('id').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.TEXT_NODE:
            self.valueOf_ += child_.nodeValue
        elif child_.nodeType == Node.CDATA_SECTION_NODE:
            self.valueOf_ += '![CDATA['+child_.nodeValue+']]'
# end class vkernType


class font_faceType(object):
    subclass = None
    superclass = None
    def __init__(self, slope=None, font_size=None, hanging=None, id=None, ascent=None, font_style=None, strikethrough_position=None, underline_position=None, descent=None, cap_height=None, units_per_em=None, overline_thickness=None, unicode_range=None, font_stretch=None, font_variant=None, x_height=None, centerline=None, mathline=None, panose_1=None, strikethrough_thickness=None, stemh=None, stemv=None, base=None, bbox=None, underline_thickness=None, font_family=None, topline=None, baseline=None, ideographic=None, font_weight=None, overline_position=None, widths=None, accent_height=None, font_face_src=None, definition_src=None):
        self.internalName = "font-face"
        self.slope = slope
        self.font_size = font_size
        self.hanging = hanging
        self.id = id
        self.ascent = ascent
        self.font_style = font_style
        self.strikethrough_position = strikethrough_position
        self.underline_position = underline_position
        self.descent = descent
        self.cap_height = cap_height
        self.units_per_em = units_per_em
        self.overline_thickness = overline_thickness
        self.unicode_range = unicode_range
        self.font_stretch = font_stretch
        self.font_variant = font_variant
        self.x_height = x_height
        self.centerline = centerline
        self.mathline = mathline
        self.panose_1 = panose_1
        self.strikethrough_thickness = strikethrough_thickness
        self.stemh = stemh
        self.stemv = stemv
        self.base = base
        self.bbox = bbox
        self.underline_thickness = underline_thickness
        self.font_family = font_family
        self.topline = topline
        self.baseline = baseline
        self.ideographic = ideographic
        self.font_weight = font_weight
        self.overline_position = overline_position
        self.widths = widths
        self.accent_height = accent_height
        self.font_face_src = font_face_src
        self.definition_src = definition_src
    def factory(*args_, **kwargs_):
        if font_faceType.subclass:
            return font_faceType.subclass(*args_, **kwargs_)
        else:
            return font_faceType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_font_face_src(self): return self.font_face_src
    def set_font_face_src(self, font_face_src): self.font_face_src = font_face_src
    def get_definition_src(self): return self.definition_src
    def set_definition_src(self, definition_src): self.definition_src = definition_src
    def get_slope(self): return self.slope
    def set_slope(self, slope): self.slope = slope
    def get_font_size(self): return self.font_size
    def set_font_size(self, font_size): self.font_size = font_size
    def get_hanging(self): return self.hanging
    def set_hanging(self, hanging): self.hanging = hanging
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_ascent(self): return self.ascent
    def set_ascent(self, ascent): self.ascent = ascent
    def get_font_style(self): return self.font_style
    def set_font_style(self, font_style): self.font_style = font_style
    def get_strikethrough_position(self): return self.strikethrough_position
    def set_strikethrough_position(self, strikethrough_position): self.strikethrough_position = strikethrough_position
    def get_underline_position(self): return self.underline_position
    def set_underline_position(self, underline_position): self.underline_position = underline_position
    def get_descent(self): return self.descent
    def set_descent(self, descent): self.descent = descent
    def get_cap_height(self): return self.cap_height
    def set_cap_height(self, cap_height): self.cap_height = cap_height
    def get_units_per_em(self): return self.units_per_em
    def set_units_per_em(self, units_per_em): self.units_per_em = units_per_em
    def get_overline_thickness(self): return self.overline_thickness
    def set_overline_thickness(self, overline_thickness): self.overline_thickness = overline_thickness
    def get_unicode_range(self): return self.unicode_range
    def set_unicode_range(self, unicode_range): self.unicode_range = unicode_range
    def get_font_stretch(self): return self.font_stretch
    def set_font_stretch(self, font_stretch): self.font_stretch = font_stretch
    def get_font_variant(self): return self.font_variant
    def set_font_variant(self, font_variant): self.font_variant = font_variant
    def get_x_height(self): return self.x_height
    def set_x_height(self, x_height): self.x_height = x_height
    def get_centerline(self): return self.centerline
    def set_centerline(self, centerline): self.centerline = centerline
    def get_mathline(self): return self.mathline
    def set_mathline(self, mathline): self.mathline = mathline
    def get_panose_1(self): return self.panose_1
    def set_panose_1(self, panose_1): self.panose_1 = panose_1
    def get_strikethrough_thickness(self): return self.strikethrough_thickness
    def set_strikethrough_thickness(self, strikethrough_thickness): self.strikethrough_thickness = strikethrough_thickness
    def get_stemh(self): return self.stemh
    def set_stemh(self, stemh): self.stemh = stemh
    def get_stemv(self): return self.stemv
    def set_stemv(self, stemv): self.stemv = stemv
    def get_base(self): return self.base
    def set_base(self, base): self.base = base
    def get_bbox(self): return self.bbox
    def set_bbox(self, bbox): self.bbox = bbox
    def get_underline_thickness(self): return self.underline_thickness
    def set_underline_thickness(self, underline_thickness): self.underline_thickness = underline_thickness
    def get_font_family(self): return self.font_family
    def set_font_family(self, font_family): self.font_family = font_family
    def get_topline(self): return self.topline
    def set_topline(self, topline): self.topline = topline
    def get_baseline(self): return self.baseline
    def set_baseline(self, baseline): self.baseline = baseline
    def get_ideographic(self): return self.ideographic
    def set_ideographic(self, ideographic): self.ideographic = ideographic
    def get_font_weight(self): return self.font_weight
    def set_font_weight(self, font_weight): self.font_weight = font_weight
    def get_overline_position(self): return self.overline_position
    def set_overline_position(self, overline_position): self.overline_position = overline_position
    def get_widths(self): return self.widths
    def set_widths(self, widths): self.widths = widths
    def get_accent_height(self): return self.accent_height
    def set_accent_height(self, accent_height): self.accent_height = accent_height
    def export(self, outfile, level, namespace_='svg:', name_='font-faceType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, self.internalName, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='font-faceType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, self.internalName))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='svg:', name_='font-faceType'):
        if self.slope is not None:
            outfile.write(' slope="%e"' % self.slope)
        if self.font_size is not None:
            outfile.write(' font-size=%s' % (quote_attrib(self.font_size), ))
        if self.hanging is not None:
            outfile.write(' hanging="%e"' % self.hanging)
        if self.id is not None:
            outfile.write(' id=%s' % (quote_attrib(self.id), ))
        if self.ascent is not None:
            outfile.write(' ascent="%e"' % self.ascent)
        if self.font_style is not None:
            outfile.write(' font-style=%s' % (quote_attrib(self.font_style), ))
        if self.strikethrough_position is not None:
            outfile.write(' strikethrough-position="%e"' % self.strikethrough_position)
        if self.underline_position is not None:
            outfile.write(' underline-position="%e"' % self.underline_position)
        if self.descent is not None:
            outfile.write(' descent="%e"' % self.descent)
        if self.cap_height is not None:
            outfile.write(' cap-height="%e"' % self.cap_height)
        if self.units_per_em is not None:
            outfile.write(' units-per-em="%e"' % self.units_per_em)
        if self.overline_thickness is not None:
            outfile.write(' overline-thickness="%e"' % self.overline_thickness)
        if self.unicode_range is not None:
            outfile.write(' unicode-range=%s' % (quote_attrib(self.unicode_range), ))
        if self.font_stretch is not None:
            outfile.write(' font-stretch=%s' % (quote_attrib(self.font_stretch), ))
        if self.font_variant is not None:
            outfile.write(' font-variant=%s' % (quote_attrib(self.font_variant), ))
        if self.x_height is not None:
            outfile.write(' x-height="%e"' % self.x_height)
        if self.centerline is not None:
            outfile.write(' centerline="%e"' % self.centerline)
        if self.mathline is not None:
            outfile.write(' mathline="%e"' % self.mathline)
        if self.panose_1 is not None:
            outfile.write(' panose-1=%s' % (quote_attrib(self.panose_1), ))
        if self.strikethrough_thickness is not None:
            outfile.write(' strikethrough-thickness="%e"' % self.strikethrough_thickness)
        if self.stemh is not None:
            outfile.write(' stemh="%e"' % self.stemh)
        if self.stemv is not None:
            outfile.write(' stemv="%e"' % self.stemv)
        if self.base is not None:
            outfile.write(' base=%s' % (quote_attrib(self.base), ))
        if self.bbox is not None:
            outfile.write(' bbox=%s' % (quote_attrib(self.bbox), ))
        if self.underline_thickness is not None:
            outfile.write(' underline-thickness="%e"' % self.underline_thickness)
        if self.font_family is not None:
            outfile.write(' font-family=%s' % (quote_attrib(self.font_family), ))
        if self.topline is not None:
            outfile.write(' topline="%e"' % self.topline)
        if self.baseline is not None:
            outfile.write(' baseline="%e"' % self.baseline)
        if self.ideographic is not None:
            outfile.write(' ideographic="%e"' % self.ideographic)
        if self.font_weight is not None:
            outfile.write(' font-weight=%s' % (quote_attrib(self.font_weight), ))
        if self.overline_position is not None:
            outfile.write(' overline-position="%e"' % self.overline_position)
        if self.widths is not None:
            outfile.write(' widths=%s' % (quote_attrib(self.widths), ))
        if self.accent_height is not None:
            outfile.write(' accent-height="%e"' % self.accent_height)
    def exportChildren(self, outfile, level, namespace_='svg:', name_='font-faceType'):
        if self.font_face_src:
            self.font_face_src.export(outfile, level, namespace_, name_='font-face-src', )
        if self.definition_src:
            self.definition_src.export(outfile, level, namespace_, name_='definition-src', )
    def hasContent_(self):
        if (
            self.font_face_src or
            self.definition_src
            ):
            return True
        else:
            return False
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('slope'):
            try:
                self.slope = float(attrs.get('slope').value)
            except ValueError, exp:
                raise ValueError('Bad float/double attribute (slope): %s' % exp)
        if attrs.get('font-size'):
            self.font_size = attrs.get('font-size').value
        if attrs.get('hanging'):
            try:
                self.hanging = float(attrs.get('hanging').value)
            except ValueError, exp:
                raise ValueError('Bad float/double attribute (hanging): %s' % exp)
        if attrs.get('id'):
            self.id = attrs.get('id').value
        if attrs.get('ascent'):
            try:
                self.ascent = float(attrs.get('ascent').value)
            except ValueError, exp:
                raise ValueError('Bad float/double attribute (ascent): %s' % exp)
        if attrs.get('font-style'):
            self.font_style = attrs.get('font-style').value
        if attrs.get('strikethrough-position'):
            try:
                self.strikethrough_position = float(attrs.get('strikethrough-position').value)
            except ValueError, exp:
                raise ValueError('Bad float/double attribute (strikethrough-position): %s' % exp)
        if attrs.get('underline-position'):
            try:
                self.underline_position = float(attrs.get('underline-position').value)
            except ValueError, exp:
                raise ValueError('Bad float/double attribute (underline-position): %s' % exp)
        if attrs.get('descent'):
            try:
                self.descent = float(attrs.get('descent').value)
            except ValueError, exp:
                raise ValueError('Bad float/double attribute (descent): %s' % exp)
        if attrs.get('cap-height'):
            try:
                self.cap_height = float(attrs.get('cap-height').value)
            except ValueError, exp:
                raise ValueError('Bad float/double attribute (cap-height): %s' % exp)
        if attrs.get('units-per-em'):
            try:
                self.units_per_em = float(attrs.get('units-per-em').value)
            except ValueError, exp:
                raise ValueError('Bad float/double attribute (units-per-em): %s' % exp)
        if attrs.get('overline-thickness'):
            try:
                self.overline_thickness = float(attrs.get('overline-thickness').value)
            except ValueError, exp:
                raise ValueError('Bad float/double attribute (overline-thickness): %s' % exp)
        if attrs.get('unicode-range'):
            self.unicode_range = attrs.get('unicode-range').value
        if attrs.get('font-stretch'):
            self.font_stretch = attrs.get('font-stretch').value
        if attrs.get('font-variant'):
            self.font_variant = attrs.get('font-variant').value
        if attrs.get('x-height'):
            try:
                self.x_height = float(attrs.get('x-height').value)
            except ValueError, exp:
                raise ValueError('Bad float/double attribute (x-height): %s' % exp)
        if attrs.get('centerline'):
            try:
                self.centerline = float(attrs.get('centerline').value)
            except ValueError, exp:
                raise ValueError('Bad float/double attribute (centerline): %s' % exp)
        if attrs.get('mathline'):
            try:
                self.mathline = float(attrs.get('mathline').value)
            except ValueError, exp:
                raise ValueError('Bad float/double attribute (mathline): %s' % exp)
        if attrs.get('panose-1'):
            self.panose_1 = attrs.get('panose-1').value
        if attrs.get('strikethrough-thickness'):
            try:
                self.strikethrough_thickness = float(attrs.get('strikethrough-thickness').value)
            except ValueError, exp:
                raise ValueError('Bad float/double attribute (strikethrough-thickness): %s' % exp)
        if attrs.get('stemh'):
            try:
                self.stemh = float(attrs.get('stemh').value)
            except ValueError, exp:
                raise ValueError('Bad float/double attribute (stemh): %s' % exp)
        if attrs.get('stemv'):
            try:
                self.stemv = float(attrs.get('stemv').value)
            except ValueError, exp:
                raise ValueError('Bad float/double attribute (stemv): %s' % exp)
        if attrs.get('base'):
            self.base = attrs.get('base').value
        if attrs.get('bbox'):
            self.bbox = attrs.get('bbox').value
        if attrs.get('underline-thickness'):
            try:
                self.underline_thickness = float(attrs.get('underline-thickness').value)
            except ValueError, exp:
                raise ValueError('Bad float/double attribute (underline-thickness): %s' % exp)
        if attrs.get('font-family'):
            self.font_family = attrs.get('font-family').value
        if attrs.get('topline'):
            try:
                self.topline = float(attrs.get('topline').value)
            except ValueError, exp:
                raise ValueError('Bad float/double attribute (topline): %s' % exp)
        if attrs.get('baseline'):
            try:
                self.baseline = float(attrs.get('baseline').value)
            except ValueError, exp:
                raise ValueError('Bad float/double attribute (baseline): %s' % exp)
        if attrs.get('ideographic'):
            try:
                self.ideographic = float(attrs.get('ideographic').value)
            except ValueError, exp:
                raise ValueError('Bad float/double attribute (ideographic): %s' % exp)
        if attrs.get('font-weight'):
            self.font_weight = attrs.get('font-weight').value
        if attrs.get('overline-position'):
            try:
                self.overline_position = float(attrs.get('overline-position').value)
            except ValueError, exp:
                raise ValueError('Bad float/double attribute (overline-position): %s' % exp)
        if attrs.get('widths'):
            self.widths = attrs.get('widths').value
        if attrs.get('accent-height'):
            try:
                self.accent_height = float(attrs.get('accent-height').value)
            except ValueError, exp:
                raise ValueError('Bad float/double attribute (accent-height): %s' % exp)
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'font-face-src':
            obj_ = font_face_src.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            self.set_font_face_src(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'definition-src':
            obj_ = definition_src.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            self.set_definition_src(obj_)
# end class font_faceType


class font_face_srcType(object):
    subclass = None
    superclass = None
    def __init__(self, base=None, id=None):
        self.internalName = "font-face-src"
        self.base = base
        self.id = id
        self.internalElements = []
    def factory(*args_, **kwargs_):
        if font_face_srcType.subclass:
            return font_face_srcType.subclass(*args_, **kwargs_)
        else:
            return font_face_srcType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def addElement(self, value): self.internalElements.append(value)
    def get_base(self): return self.base
    def set_base(self, base): self.base = base
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='svg:', name_='font-face-srcType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, self.internalName, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='font-face-srcType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, self.internalName))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='svg:', name_='font-face-srcType'):
        if self.base is not None:
            outfile.write(' base=%s' % (quote_attrib(self.base), ))
        if self.id is not None:
            outfile.write(' id=%s' % (quote_attrib(self.id), ))
    def exportChildren(self, outfile, level, namespace_='svg:', name_='font-face-srcType'):
        for element_ in self.internalElements:
            element_.export(outfile, level, namespace_, name_='font-face-uri')
    def hasContent_(self):
        if (
         len(self.internalElements)>0
            ):
            return True
        else:
            return False
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('base'):
            self.base = attrs.get('base').value
        if attrs.get('id'):
            self.id = attrs.get('id').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'font-face-uri':
            obj_ = font_face_uri.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'font-face-name':
            obj_ = font_face_name.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            if self.internalElements==None:
              self.internalElements=[]
            self.internalElements.append(obj_)
# end class font_face_srcType


class font_face_uriType(object):
    subclass = None
    superclass = None
    def __init__(self, title=None, show='other', actuate=None, href=None, role=None, arcrole=None, base=None, type_=None, id=None, font_face_format=None):
        self.internalName = "font-face-uri"
        self.title = title
        self.show = show
        self.actuate = actuate
        self.href = href
        self.role = role
        self.arcrole = arcrole
        self.base = base
        self.type_ = type_
        self.id = id
        self.font_face_format = font_face_format
    def factory(*args_, **kwargs_):
        if font_face_uriType.subclass:
            return font_face_uriType.subclass(*args_, **kwargs_)
        else:
            return font_face_uriType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_font_face_format(self): return self.font_face_format
    def set_font_face_format(self, font_face_format): self.font_face_format = font_face_format
    def get_title(self): return self.title
    def set_title(self, title): self.title = title
    def get_show(self): return self.show
    def set_show(self, show): self.show = show
    def get_actuate(self): return self.actuate
    def set_actuate(self, actuate): self.actuate = actuate
    def get_href(self): return self.href
    def set_href(self, href): self.href = href
    def get_role(self): return self.role
    def set_role(self, role): self.role = role
    def get_arcrole(self): return self.arcrole
    def set_arcrole(self, arcrole): self.arcrole = arcrole
    def get_base(self): return self.base
    def set_base(self, base): self.base = base
    def get_type(self): return self.type_
    def set_type(self, type_): self.type_ = type_
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='svg:', name_='font-face-uriType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, self.internalName, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='font-face-uriType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, self.internalName))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='svg:', name_='font-face-uriType'):
        if self.title is not None:
            outfile.write(' title=%s' % (quote_attrib(self.title), ))
        if self.show is not None:
            outfile.write(' show=%s' % (quote_attrib(self.show), ))
        if self.actuate is not None:
            outfile.write(' actuate=%s' % (quote_attrib(self.actuate), ))
        if self.href is not None:
            outfile.write(' href=%s' % (quote_attrib(self.href), ))
        if self.role is not None:
            outfile.write(' role=%s' % (quote_attrib(self.role), ))
        if self.arcrole is not None:
            outfile.write(' arcrole=%s' % (quote_attrib(self.arcrole), ))
        if self.base is not None:
            outfile.write(' base=%s' % (quote_attrib(self.base), ))
        if self.type_ is not None:
            outfile.write(' type=%s' % (quote_attrib(self.type_), ))
        if self.id is not None:
            outfile.write(' id=%s' % (quote_attrib(self.id), ))
    def exportChildren(self, outfile, level, namespace_='svg:', name_='font-face-uriType'):
        if self.font_face_format:
            self.font_face_format.export(outfile, level, namespace_, name_='font-face-format', )
    def hasContent_(self):
        if (
            self.font_face_format
            ):
            return True
        else:
            return False
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('title'):
            self.title = attrs.get('title').value
        if attrs.get('show'):
            self.show = attrs.get('show').value
        if attrs.get('actuate'):
            self.actuate = attrs.get('actuate').value
        if attrs.get('href'):
            self.href = attrs.get('href').value
        if attrs.get('role'):
            self.role = attrs.get('role').value
        if attrs.get('arcrole'):
            self.arcrole = attrs.get('arcrole').value
        if attrs.get('base'):
            self.base = attrs.get('base').value
        if attrs.get('type'):
            self.type_ = attrs.get('type').value
        if attrs.get('id'):
            self.id = attrs.get('id').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'font-face-format':
            obj_ = font_face_format.factory()
            obj_.build(child_)
            obj_.internalName = nodeName_
            self.set_font_face_format(obj_)
# end class font_face_uriType


class font_face_formatType(object):
    subclass = None
    superclass = None
    def __init__(self, base=None, string=None, id=None, valueOf_=''):
        self.internalName = "font-face-format"
        self.base = base
        self.string = string
        self.id = id
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if font_face_formatType.subclass:
            return font_face_formatType.subclass(*args_, **kwargs_)
        else:
            return font_face_formatType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_base(self): return self.base
    def set_base(self, base): self.base = base
    def get_string(self): return self.string
    def set_string(self, string): self.string = string
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def getValueOf_(self): return self.valueOf_
    def setValueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='svg:', name_='font-face-formatType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, self.internalName, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='font-face-formatType')
        outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='svg:', name_='font-face-formatType'):
        if self.base is not None:
            outfile.write(' base=%s' % (quote_attrib(self.base), ))
        if self.string is not None:
            outfile.write(' string=%s' % (quote_attrib(self.string), ))
        if self.id is not None:
            outfile.write(' id=%s' % (quote_attrib(self.id), ))
    def exportChildren(self, outfile, level, namespace_='svg:', name_='font-face-formatType'):
        if self.valueOf_.find('![CDATA')>-1:
            value=quote_xml('%s' % self.valueOf_)
            value=value.replace('![CDATA','<![CDATA')
            value=value.replace(']]',']]>')
            outfile.write(value)
        else:
            outfile.write(quote_xml('%s' % self.valueOf_))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        self.valueOf_ = ''
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('base'):
            self.base = attrs.get('base').value
        if attrs.get('string'):
            self.string = attrs.get('string').value
        if attrs.get('id'):
            self.id = attrs.get('id').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.TEXT_NODE:
            self.valueOf_ += child_.nodeValue
        elif child_.nodeType == Node.CDATA_SECTION_NODE:
            self.valueOf_ += '![CDATA['+child_.nodeValue+']]'
# end class font_face_formatType


class font_face_nameType(object):
    subclass = None
    superclass = None
    def __init__(self, base=None, name=None, id=None, valueOf_=''):
        self.internalName = "font-face-name"
        self.base = base
        self.name = name
        self.id = id
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if font_face_nameType.subclass:
            return font_face_nameType.subclass(*args_, **kwargs_)
        else:
            return font_face_nameType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_base(self): return self.base
    def set_base(self, base): self.base = base
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def getValueOf_(self): return self.valueOf_
    def setValueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='svg:', name_='font-face-nameType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, self.internalName, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='font-face-nameType')
        outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='svg:', name_='font-face-nameType'):
        if self.base is not None:
            outfile.write(' base=%s' % (quote_attrib(self.base), ))
        if self.name is not None:
            outfile.write(' name=%s' % (quote_attrib(self.name), ))
        if self.id is not None:
            outfile.write(' id=%s' % (quote_attrib(self.id), ))
    def exportChildren(self, outfile, level, namespace_='svg:', name_='font-face-nameType'):
        if self.valueOf_.find('![CDATA')>-1:
            value=quote_xml('%s' % self.valueOf_)
            value=value.replace('![CDATA','<![CDATA')
            value=value.replace(']]',']]>')
            outfile.write(value)
        else:
            outfile.write(quote_xml('%s' % self.valueOf_))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        self.valueOf_ = ''
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('base'):
            self.base = attrs.get('base').value
        if attrs.get('name'):
            self.name = attrs.get('name').value
        if attrs.get('id'):
            self.id = attrs.get('id').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.TEXT_NODE:
            self.valueOf_ += child_.nodeValue
        elif child_.nodeType == Node.CDATA_SECTION_NODE:
            self.valueOf_ += '![CDATA['+child_.nodeValue+']]'
# end class font_face_nameType


class definition_srcType(object):
    subclass = None
    superclass = None
    def __init__(self, title=None, show='other', actuate=None, href=None, role=None, arcrole=None, base=None, type_=None, id=None, valueOf_=''):
        self.internalName = "definition-src"
        self.title = title
        self.show = show
        self.actuate = actuate
        self.href = href
        self.role = role
        self.arcrole = arcrole
        self.base = base
        self.type_ = type_
        self.id = id
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if definition_srcType.subclass:
            return definition_srcType.subclass(*args_, **kwargs_)
        else:
            return definition_srcType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_title(self): return self.title
    def set_title(self, title): self.title = title
    def get_show(self): return self.show
    def set_show(self, show): self.show = show
    def get_actuate(self): return self.actuate
    def set_actuate(self, actuate): self.actuate = actuate
    def get_href(self): return self.href
    def set_href(self, href): self.href = href
    def get_role(self): return self.role
    def set_role(self, role): self.role = role
    def get_arcrole(self): return self.arcrole
    def set_arcrole(self, arcrole): self.arcrole = arcrole
    def get_base(self): return self.base
    def set_base(self, base): self.base = base
    def get_type(self): return self.type_
    def set_type(self, type_): self.type_ = type_
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def getValueOf_(self): return self.valueOf_
    def setValueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='svg:', name_='definition-srcType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, self.internalName, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='definition-srcType')
        outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='svg:', name_='definition-srcType'):
        if self.title is not None:
            outfile.write(' title=%s' % (quote_attrib(self.title), ))
        if self.show is not None:
            outfile.write(' show=%s' % (quote_attrib(self.show), ))
        if self.actuate is not None:
            outfile.write(' actuate=%s' % (quote_attrib(self.actuate), ))
        if self.href is not None:
            outfile.write(' href=%s' % (quote_attrib(self.href), ))
        if self.role is not None:
            outfile.write(' role=%s' % (quote_attrib(self.role), ))
        if self.arcrole is not None:
            outfile.write(' arcrole=%s' % (quote_attrib(self.arcrole), ))
        if self.base is not None:
            outfile.write(' base=%s' % (quote_attrib(self.base), ))
        if self.type_ is not None:
            outfile.write(' type=%s' % (quote_attrib(self.type_), ))
        if self.id is not None:
            outfile.write(' id=%s' % (quote_attrib(self.id), ))
    def exportChildren(self, outfile, level, namespace_='svg:', name_='definition-srcType'):
        if self.valueOf_.find('![CDATA')>-1:
            value=quote_xml('%s' % self.valueOf_)
            value=value.replace('![CDATA','<![CDATA')
            value=value.replace(']]',']]>')
            outfile.write(value)
        else:
            outfile.write(quote_xml('%s' % self.valueOf_))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        self.valueOf_ = ''
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('title'):
            self.title = attrs.get('title').value
        if attrs.get('show'):
            self.show = attrs.get('show').value
        if attrs.get('actuate'):
            self.actuate = attrs.get('actuate').value
        if attrs.get('href'):
            self.href = attrs.get('href').value
        if attrs.get('role'):
            self.role = attrs.get('role').value
        if attrs.get('arcrole'):
            self.arcrole = attrs.get('arcrole').value
        if attrs.get('base'):
            self.base = attrs.get('base').value
        if attrs.get('type'):
            self.type_ = attrs.get('type').value
        if attrs.get('id'):
            self.id = attrs.get('id').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.TEXT_NODE:
            self.valueOf_ += child_.nodeValue
        elif child_.nodeType == Node.CDATA_SECTION_NODE:
            self.valueOf_ += '![CDATA['+child_.nodeValue+']]'
# end class definition_srcType


class metadataType(object):
    subclass = None
    superclass = None
    def __init__(self, base=None, id=None, valueOf_='', mixedclass_=None, content_=None):
        self.internalName = "metadata"
        self.base = base
        self.id = id
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
    def factory(*args_, **kwargs_):
        if metadataType.subclass:
            return metadataType.subclass(*args_, **kwargs_)
        else:
            return metadataType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_base(self): return self.base
    def set_base(self, base): self.base = base
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def getValueOf_(self): return self.valueOf_
    def setValueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='svg:', name_='metadataType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, self.internalName, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='metadataType')
        outfile.write('>')
        self.exportChildren(outfile, level + 1, namespace_, name_)
        outfile.write('</%s%s>\n' % (namespace_, self.internalName))
    def exportAttributes(self, outfile, level, namespace_='svg:', name_='metadataType'):
        if self.base is not None:
            outfile.write(' base=%s' % (quote_attrib(self.base), ))
        if self.id is not None:
            outfile.write(' id=%s' % (quote_attrib(self.id), ))
    def exportChildren(self, outfile, level, namespace_='svg:', name_='metadataType'):
        if self.valueOf_.find('![CDATA')>-1:
            value=quote_xml('%s' % self.valueOf_)
            value=value.replace('![CDATA','<![CDATA')
            value=value.replace(']]',']]>')
            outfile.write(value)
        else:
            outfile.write(quote_xml('%s' % self.valueOf_))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        self.valueOf_ = ''
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('base'):
            self.base = attrs.get('base').value
        if attrs.get('id'):
            self.id = attrs.get('id').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.TEXT_NODE:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.nodeValue)
            self.content_.append(obj_)
        if child_.nodeType == Node.TEXT_NODE:
            self.valueOf_ += child_.nodeValue
        elif child_.nodeType == Node.CDATA_SECTION_NODE:
            self.valueOf_ += '![CDATA['+child_.nodeValue+']]'
# end class metadataType


class foreignObjectType(object):
    subclass = None
    superclass = None
    def __init__(self, requiredExtensions=None, onfocusout=None, height=None, id=None, onload=None, style=None, space=None, transform=None, content=None, width=None, onmouseup=None, onmousemove=None, onclick=None, onfocusin=None, onactivate=None, onmouseout=None, systemLanguage=None, onmouseover=None, externalResourcesRequired=None, onmousedown=None, classxx=None, lang=None, requiredFeatures=None, base=None, y=None, x=None, valueOf_='', mixedclass_=None, content_=None):
        self.internalName = "foreignObject"
        self.requiredExtensions = requiredExtensions
        self.onfocusout = onfocusout
        self.height = height
        self.id = id
        self.onload = onload
        self.style = style
        self.space = space
        self.transform = transform
        self.content = content
        self.width = width
        self.onmouseup = onmouseup
        self.onmousemove = onmousemove
        self.onclick = onclick
        self.onfocusin = onfocusin
        self.onactivate = onactivate
        self.onmouseout = onmouseout
        self.systemLanguage = systemLanguage
        self.onmouseover = onmouseover
        self.externalResourcesRequired = externalResourcesRequired
        self.onmousedown = onmousedown
        self.classxx = classxx
        self.lang = lang
        self.requiredFeatures = requiredFeatures
        self.base = base
        self.y = y
        self.x = x
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
    def factory(*args_, **kwargs_):
        if foreignObjectType.subclass:
            return foreignObjectType.subclass(*args_, **kwargs_)
        else:
            return foreignObjectType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_requiredExtensions(self): return self.requiredExtensions
    def set_requiredExtensions(self, requiredExtensions): self.requiredExtensions = requiredExtensions
    def get_onfocusout(self): return self.onfocusout
    def set_onfocusout(self, onfocusout): self.onfocusout = onfocusout
    def get_height(self): return self.height
    def set_height(self, height): self.height = height
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_onload(self): return self.onload
    def set_onload(self, onload): self.onload = onload
    def get_style(self): return self.style
    def set_style(self, style): self.style = style
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_transform(self): return self.transform
    def set_transform(self, transform): self.transform = transform
    def get_content(self): return self.content
    def set_content(self, content): self.content = content
    def get_width(self): return self.width
    def set_width(self, width): self.width = width
    def get_onmouseup(self): return self.onmouseup
    def set_onmouseup(self, onmouseup): self.onmouseup = onmouseup
    def get_onmousemove(self): return self.onmousemove
    def set_onmousemove(self, onmousemove): self.onmousemove = onmousemove
    def get_onclick(self): return self.onclick
    def set_onclick(self, onclick): self.onclick = onclick
    def get_onfocusin(self): return self.onfocusin
    def set_onfocusin(self, onfocusin): self.onfocusin = onfocusin
    def get_onactivate(self): return self.onactivate
    def set_onactivate(self, onactivate): self.onactivate = onactivate
    def get_onmouseout(self): return self.onmouseout
    def set_onmouseout(self, onmouseout): self.onmouseout = onmouseout
    def get_systemLanguage(self): return self.systemLanguage
    def set_systemLanguage(self, systemLanguage): self.systemLanguage = systemLanguage
    def get_onmouseover(self): return self.onmouseover
    def set_onmouseover(self, onmouseover): self.onmouseover = onmouseover
    def get_externalResourcesRequired(self): return self.externalResourcesRequired
    def set_externalResourcesRequired(self, externalResourcesRequired): self.externalResourcesRequired = externalResourcesRequired
    def get_onmousedown(self): return self.onmousedown
    def set_onmousedown(self, onmousedown): self.onmousedown = onmousedown
    def get_class(self): return self.classxx
    def set_class(self, classxx): self.classxx = classxx
    def get_lang(self): return self.lang
    def set_lang(self, lang): self.lang = lang
    def get_requiredFeatures(self): return self.requiredFeatures
    def set_requiredFeatures(self, requiredFeatures): self.requiredFeatures = requiredFeatures
    def get_base(self): return self.base
    def set_base(self, base): self.base = base
    def get_y(self): return self.y
    def set_y(self, y): self.y = y
    def get_x(self): return self.x
    def set_x(self, x): self.x = x
    def getValueOf_(self): return self.valueOf_
    def setValueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='svg:', name_='foreignObjectType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, self.internalName, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='foreignObjectType')
        outfile.write('>')
        self.exportChildren(outfile, level + 1, namespace_, name_)
        outfile.write('</%s%s>\n' % (namespace_, self.internalName))
    def exportAttributes(self, outfile, level, namespace_='svg:', name_='foreignObjectType'):
        if self.requiredExtensions is not None:
            outfile.write(' requiredExtensions=%s' % (quote_attrib(self.requiredExtensions), ))
        if self.onfocusout is not None:
            outfile.write(' onfocusout=%s' % (quote_attrib(self.onfocusout), ))
        outfile.write(' height=%s' % (quote_attrib(self.height), ))
        if self.id is not None:
            outfile.write(' id=%s' % (quote_attrib(self.id), ))
        if self.onload is not None:
            outfile.write(' onload=%s' % (quote_attrib(self.onload), ))
        if self.style is not None:
            outfile.write(' style=%s' % (quote_attrib(self.style), ))
        if self.space is not None:
            outfile.write(' space=%s' % (quote_attrib(self.space), ))
        if self.transform is not None:
            outfile.write(' transform=%s' % (quote_attrib(self.transform), ))
        if self.content is not None:
            outfile.write(' content=%s' % (quote_attrib(self.content), ))
        outfile.write(' width=%s' % (quote_attrib(self.width), ))
        if self.onmouseup is not None:
            outfile.write(' onmouseup=%s' % (quote_attrib(self.onmouseup), ))
        if self.onmousemove is not None:
            outfile.write(' onmousemove=%s' % (quote_attrib(self.onmousemove), ))
        if self.onclick is not None:
            outfile.write(' onclick=%s' % (quote_attrib(self.onclick), ))
        if self.onfocusin is not None:
            outfile.write(' onfocusin=%s' % (quote_attrib(self.onfocusin), ))
        if self.onactivate is not None:
            outfile.write(' onactivate=%s' % (quote_attrib(self.onactivate), ))
        if self.onmouseout is not None:
            outfile.write(' onmouseout=%s' % (quote_attrib(self.onmouseout), ))
        if self.systemLanguage is not None:
            outfile.write(' systemLanguage=%s' % (quote_attrib(self.systemLanguage), ))
        if self.onmouseover is not None:
            outfile.write(' onmouseover=%s' % (quote_attrib(self.onmouseover), ))
        if self.externalResourcesRequired is not None:
            outfile.write(' externalResourcesRequired="%s"' % str_lower(str(self.externalResourcesRequired)))
        if self.onmousedown is not None:
            outfile.write(' onmousedown=%s' % (quote_attrib(self.onmousedown), ))
        if self.classxx is not None:
            outfile.write(' class=%s' % (quote_attrib(self.classxx), ))
        if self.lang is not None:
            outfile.write(' lang=%s' % (quote_attrib(self.lang), ))
        if self.requiredFeatures is not None:
            outfile.write(' requiredFeatures=%s' % (quote_attrib(self.requiredFeatures), ))
        if self.base is not None:
            outfile.write(' base=%s' % (quote_attrib(self.base), ))
        if self.y is not None:
            outfile.write(' y=%s' % (quote_attrib(self.y), ))
        if self.x is not None:
            outfile.write(' x=%s' % (quote_attrib(self.x), ))
    def exportChildren(self, outfile, level, namespace_='svg:', name_='foreignObjectType'):
        if self.valueOf_.find('![CDATA')>-1:
            value=quote_xml('%s' % self.valueOf_)
            value=value.replace('![CDATA','<![CDATA')
            value=value.replace(']]',']]>')
            outfile.write(value)
        else:
            outfile.write(quote_xml('%s' % self.valueOf_))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        self.valueOf_ = ''
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('requiredExtensions'):
            self.requiredExtensions = attrs.get('requiredExtensions').value
        if attrs.get('onfocusout'):
            self.onfocusout = attrs.get('onfocusout').value
        if attrs.get('height'):
            self.height = attrs.get('height').value
        if attrs.get('id'):
            self.id = attrs.get('id').value
        if attrs.get('onload'):
            self.onload = attrs.get('onload').value
        if attrs.get('style'):
            self.style = attrs.get('style').value
        if attrs.get('space'):
            self.space = attrs.get('space').value
        if attrs.get('transform'):
            self.transform = attrs.get('transform').value
        if attrs.get('content'):
            self.content = attrs.get('content').value
        if attrs.get('width'):
            self.width = attrs.get('width').value
        if attrs.get('onmouseup'):
            self.onmouseup = attrs.get('onmouseup').value
        if attrs.get('onmousemove'):
            self.onmousemove = attrs.get('onmousemove').value
        if attrs.get('onclick'):
            self.onclick = attrs.get('onclick').value
        if attrs.get('onfocusin'):
            self.onfocusin = attrs.get('onfocusin').value
        if attrs.get('onactivate'):
            self.onactivate = attrs.get('onactivate').value
        if attrs.get('onmouseout'):
            self.onmouseout = attrs.get('onmouseout').value
        if attrs.get('systemLanguage'):
            self.systemLanguage = attrs.get('systemLanguage').value
        if attrs.get('onmouseover'):
            self.onmouseover = attrs.get('onmouseover').value
        if attrs.get('externalResourcesRequired'):
            if attrs.get('externalResourcesRequired').value in ('true', '1'):
                self.externalResourcesRequired = True
            elif attrs.get('externalResourcesRequired').value in ('false', '0'):
                self.externalResourcesRequired = False
            else:
                raise ValueError('Bad boolean attribute (externalResourcesRequired)')
        if attrs.get('onmousedown'):
            self.onmousedown = attrs.get('onmousedown').value
        if attrs.get('class'):
            self.classxx = attrs.get('class').value
        if attrs.get('lang'):
            self.lang = attrs.get('lang').value
        if attrs.get('requiredFeatures'):
            self.requiredFeatures = attrs.get('requiredFeatures').value
        if attrs.get('base'):
            self.base = attrs.get('base').value
        if attrs.get('y'):
            self.y = attrs.get('y').value
        if attrs.get('x'):
            self.x = attrs.get('x').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.TEXT_NODE:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.nodeValue)
            self.content_.append(obj_)
        if child_.nodeType == Node.TEXT_NODE:
            self.valueOf_ += child_.nodeValue
        elif child_.nodeType == Node.CDATA_SECTION_NODE:
            self.valueOf_ += '![CDATA['+child_.nodeValue+']]'
# end class foreignObjectType


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
Options:
    -s        Use the SAX parser, not the minidom parser.
"""

def usage():
    print USAGE_TEXT
    sys.exit(1)


def parse(inFileName):
    doc = minidom.parse(inFileName)
    rootNode = doc.documentElement
    rootObj = svgType.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    sys.stdout.write('<?xml version="1.0" ?>\n')
    rootObj.export(sys.stdout, 0, name_="svg",
        namespacedef_='')
    return rootObj


def parseString(inString):
    doc = minidom.parseString(inString)
    rootNode = doc.documentElement
    rootObj = svgType.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    sys.stdout.write('<?xml version="1.0" ?>\n')
    rootObj.export(sys.stdout, 0, name_="svg",
        namespacedef_='')
    return rootObj


def parseLiteral(inFileName):
    doc = minidom.parse(inFileName)
    rootNode = doc.documentElement
    rootObj = svgType.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    sys.stdout.write('from pysvg import *\n\n')
    sys.stdout.write('rootObj = svg(\n')
    rootObj.exportLiteral(sys.stdout, 0, name_="svg")
    sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    main()
    #import pdb
    #pdb.run('main()')

